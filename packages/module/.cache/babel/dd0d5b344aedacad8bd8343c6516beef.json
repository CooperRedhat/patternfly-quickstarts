{"ast":null,"code":"var _require = require('@patternfly/ast-helpers'),\n    parse = _require.parse;\n\nvar versions = require('../versions.json');\n\nvar overpass = require('./fonts');\n\nvar _require2 = require('./capitalize'),\n    capitalize = _require2.capitalize;\n\nvar getStaticParams = function getStaticParams(title, html) {\n  var imgAssetRegex = /['\"](\\/assets\\/images\\/.*)['\"]/g;\n  var imgAsset;\n\n  while (imgAsset = imgAssetRegex.exec(html)) {\n    var imgName = imgAsset[1];\n    html = html.replace(imgName, \"https://www.patternfly.org/v4\" + imgName);\n  }\n\n  return {\n    files: {\n      'index.html': {\n        content: \"\\n          <!DOCTYPE html>\\n          <html lang=\\\"en\\\" class=\\\"pf-m-redhat-font\\\">\\n            <head>\\n              <meta charset=\\\"utf-8\\\" />\\n              <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n              <link rel=\\\"stylesheet\\\" href=\\\"fonts.css\\\" />\\n              <!-- Include latest PatternFly CSS via CDN -->\\n              <link \\n                rel=\\\"stylesheet\\\" \\n                href=\\\"https://unpkg.com/@patternfly/patternfly/patternfly.css\\\" \\n                crossorigin=\\\"anonymous\\\"\\n              >\\n              <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" />\\n              <title>PatternFly \" + title + \" CodeSandbox Example</title>\\n            </head>\\n            <body>\\n              \" + html + \"\\n            </body>\\n          </html>\\n        \"\n      },\n      'package.json': {\n        content: {}\n      },\n      'style.css': {\n        content: ''\n      },\n      'fonts.css': {\n        content: overpass\n      },\n      'sandbox.config.json': {\n        content: {\n          template: 'static'\n        }\n      }\n    },\n    template: 'static'\n  };\n}; // Allow 4 formats for example identifiers\n// 1. Example = () => { return <jsx />; }\n// 2. class Example {}\n// 3. function Example() { return <jsx />; }\n// 4. const Example = () => { return <jsx />; }\n\n\nvar allowedIdentifiers = ['ClassDeclaration', 'FunctionDeclaration', 'ExpressionStatement', 'VariableDeclaration'];\n\nfunction getExampleDeclaration(code) {\n  code = code.replace(/export\\s+default\\s+/g, '').replace(/export\\s+/g, '');\n\n  var _parse = parse(code),\n      body = _parse.body;\n\n  var lastParsed = body[body.length - 1];\n\n  if (allowedIdentifiers.includes(lastParsed.type)) {\n    return lastParsed;\n  }\n}\n\nfunction getIdentifier(title) {\n  return capitalize(title.replace(/^[^A-Za-z]/, '').replace(/\\s+([a-z])?/g, function (_, match) {\n    return match ? capitalize(match) : '';\n  }).replace(/[^A-Za-z0-9_]/g, ''));\n}\n\nfunction prettyExampleCode(title, code, declaration, identifier) {\n  // Create identifier from title\n  var ident = identifier || getIdentifier(title);\n  var jsxBlock = code.substring(declaration.start, declaration.end);\n\n  if (identifier) {\n    return code.replace(jsxBlock, \"const \" + jsxBlock);\n  }\n\n  if (jsxBlock.includes('\\n')) {\n    // Make pretty\n    return code.replace(jsxBlock, \"const \" + ident + \" = () => (\\n  \" + jsxBlock.replace(/\\n/g, '\\n  ').replace(/;[ \\t]*$/, '') + \"\\n)\");\n  } else {\n    return code.replace(jsxBlock, \"const \" + ident + \" = () => \" + jsxBlock);\n  }\n} // TODO: Make React examples work and use a template that has our assets.\n\n\nfunction getReactParams(title, code, scope, lang) {\n  var _files;\n\n  var toRender = null;\n\n  try {\n    var declaration = getExampleDeclaration(code);\n\n    if (declaration.type === 'ExpressionStatement') {\n      if (!declaration.expression.left) {\n        // () => <jsx />\n        code = prettyExampleCode(title, code, declaration);\n        toRender = getIdentifier(title);\n      } else if (declaration.expression.type === 'AssignmentExpression') {\n        // Basic = () => <jsx />\n        code = prettyExampleCode(title, code, declaration, declaration.expression.left.name);\n        toRender = declaration.expression.left.name;\n      }\n    } else if (declaration.type === 'VariableDeclaration') {\n      toRender = declaration.declarations[0].id.name;\n    } else if (declaration.id) {\n      toRender = declaration.id.name;\n    }\n  } catch (err) {// Ignore\n  }\n\n  var imgImportRegex = /import\\s*(\\w*).*['\"](.*)(\\.(png|jpe?g|webp|gif|svg))['\"]/g;\n  var imgImportMatch;\n\n  while (imgImportMatch = imgImportRegex.exec(code)) {\n    var imgName = imgImportMatch[1];\n    code = code.replace(imgImportMatch[0], \"const \" + imgName + \" = \\\"https://www.patternfly.org/v4\" + scope[imgName] + \"\\\"\");\n  }\n\n  var dependencies = {\n    '@patternfly/react-core': versions.Releases[0].versions['@patternfly/react-core']\n  };\n\n  if (lang === 'ts') {\n    dependencies['@babel/runtime'] = 'latest';\n  }\n\n  Object.entries(versions.Releases[0].versions).filter(function (_ref) {\n    var pkg = _ref[0];\n    return code.includes(pkg);\n  }).forEach(function (_ref2) {\n    var pkg = _ref2[0],\n        version = _ref2[1];\n    return dependencies[pkg] = version;\n  });\n  return {\n    files: (_files = {\n      'index.html': {\n        content: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\" class=\\\"pf-m-redhat-font\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <title>PatternFly-React \" + title + \" CodeSandbox Example</title>\\n  </head>\\n<body>\\n  <noscript>\\n    You need to enable JavaScript to run this app.\\n  </noscript>\\n  <div id=\\\"root\\\" style=\\\"height:100%\\\"></div>\\n</body>\\n</html>\"\n      }\n    }, _files[lang === 'ts' ? 'index.tsx' : 'index.js'] = {\n      content: \"import ReactDOM from 'react-dom';\\nimport \\\"@patternfly/react-core/dist/styles/base.css\\\";\\nimport './fonts.css';\\n\\n\" + code + \"\\n\\nconst rootElement = document.getElementById(\\\"root\\\");\\nReactDOM.render(<\" + toRender + \" />, rootElement);\"\n    }, _files['fonts.css'] = {\n      content: overpass\n    }, _files['package.json'] = {\n      content: {\n        dependencies: Object.assign({}, dependencies, {\n          'react': '^16.8.0',\n          'react-dom': '^16.8.0'\n        })\n      }\n    }, _files['sandbox.config.json'] = {\n      content: {\n        template: lang === 'ts' ? 'create-react-app-typescript' : 'create-react-app'\n      }\n    }, _files)\n  };\n}\n\nmodule.exports = {\n  getReactParams: getReactParams,\n  getStaticParams: getStaticParams,\n  getExampleDeclaration: getExampleDeclaration,\n  prettyExampleCode: prettyExampleCode\n};","map":null,"metadata":{},"sourceType":"module"}