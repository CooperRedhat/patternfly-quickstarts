{"ast":null,"code":"function _construct(Parent, args, Class) { if (_isNativeReflectConstruct()) { _construct = Reflect.construct; } else { _construct = function _construct(Parent, args, Class) { var a = [null]; a.push.apply(a, args); var Constructor = Function.bind.apply(Parent, a); var instance = new Constructor(); if (Class) _setPrototypeOf(instance, Class.prototype); return instance; }; } return _construct.apply(null, arguments); }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nimport React from 'react';\nimport { useLocation } from '@reach/router';\nimport { Badge, CodeBlock, CodeBlockCode, debounce } from '@patternfly/react-core';\nimport * as reactCoreModule from '@patternfly/react-core';\nimport * as reactTableModule from '@patternfly/react-table';\nimport { css } from '@patternfly/react-styles';\nimport { getParameters } from 'codesandbox/lib/api/define';\nimport { ExampleToolbar } from './exampleToolbar';\nimport { AutoLinkHeader } from '../autoLinkHeader/autoLinkHeader';\nimport { slugger, getStaticParams, getReactParams, getExampleClassName, getExampleId, liveCodeTypes } from '../../helpers';\nimport { convertToReactComponent } from '@patternfly/ast-helpers';\nimport missingThumbnail from './missing-thumbnail.jpg';\nimport './example.css';\n\nvar errorComponent = function errorComponent(err) {\n  return /*#__PURE__*/React.createElement(\"pre\", null, err.toString());\n};\n\nvar ErrorBoundary = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(ErrorBoundary, _React$Component);\n\n  function ErrorBoundary(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this;\n    _this.state = {\n      error: null,\n      errorInfo: null\n    };\n    return _this;\n  }\n\n  var _proto = ErrorBoundary.prototype;\n\n  _proto.componentDidCatch = function componentDidCatch(error, errorInfo) {\n    errorInfo._suppressLogging = true;\n    this.setState({\n      error: error,\n      errorInfo: errorInfo\n    });\n  };\n\n  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {\n    if (prevProps.children !== this.props.children) {\n      this.setState({\n        error: null,\n        errorInfo: null\n      });\n    }\n  };\n\n  _proto.render = function render() {\n    if (this.state.errorInfo) {\n      return errorComponent(this.state.error);\n    }\n\n    return this.props.children;\n  };\n\n  return ErrorBoundary;\n}(React.Component); // Props come from mdx-ast-to-mdx-hast.js\n\n\nexport var Example = function Example(_ref) {\n  var code = _ref.code,\n      _ref$lang = _ref.lang,\n      lang = _ref$lang === void 0 ? '' : _ref$lang,\n      source = _ref.source,\n      _ref$noLive = _ref.noLive,\n      noLive = _ref$noLive === void 0 ? !liveCodeTypes.includes(lang) : _ref$noLive,\n      _ref$title = _ref.title,\n      title = _ref$title === void 0 ? 'Untitled' : _ref$title,\n      isFullscreen = _ref.isFullscreen,\n      isFullscreenPreview = _ref.isFullscreenPreview,\n      _ref$thumbnail = _ref.thumbnail,\n      thumbnail = _ref$thumbnail === void 0 ? missingThumbnail : _ref$thumbnail,\n      isBeta = _ref.isBeta,\n      id = _ref.id,\n      section = _ref.section,\n      liveContext = _ref.liveContext,\n      children = _ref.children;\n\n  if (isFullscreenPreview) {\n    isFullscreen = false;\n  }\n\n  if (!lang) {\n    // Inline code\n    return /*#__PURE__*/React.createElement(\"code\", {\n      className: \"ws-code\"\n    }, code);\n  } else if (noLive) {\n    // Code block\n    return /*#__PURE__*/React.createElement(CodeBlock, null, /*#__PURE__*/React.createElement(CodeBlockCode, null, code));\n  }\n\n  var _React$useState = React.useState(code),\n      editorCode = _React$useState[0],\n      setEditorCode = _React$useState[1];\n\n  var loc = useLocation();\n  var scope = Object.assign({}, liveContext, reactCoreModule, reactTableModule);\n  var livePreview = null;\n\n  if (lang === 'html') {\n    livePreview = /*#__PURE__*/React.createElement(\"div\", {\n      className: css('ws-preview-html', isFullscreenPreview && 'pf-u-h-100'),\n      dangerouslySetInnerHTML: {\n        __html: editorCode\n      }\n    });\n  } else {\n    try {\n      var _convertToReactCompon = convertToReactComponent(editorCode),\n          transformedCode = _convertToReactCompon.code,\n          hasTS = _convertToReactCompon.hasTS;\n\n      if (hasTS) {\n        lang = 'ts';\n      } else {\n        lang = 'js';\n      }\n\n      var getPreviewComponent = _construct(Function, ['React'].concat(Object.keys(scope), [transformedCode]));\n\n      var PreviewComponent = getPreviewComponent.apply(void 0, [React].concat(Object.values(scope)));\n      livePreview = /*#__PURE__*/React.createElement(ErrorBoundary, null, /*#__PURE__*/React.createElement(PreviewComponent, null));\n    } catch (err) {\n      livePreview = errorComponent(err);\n    }\n  }\n\n  var previewId = getExampleId(source, section[0], id, title);\n  var className = getExampleClassName(source, section[0], id);\n\n  if (isFullscreenPreview) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      id: previewId,\n      className: css(className, 'pf-u-h-100')\n    }, livePreview);\n  }\n\n  var codeBoxParams = getParameters(lang === 'html' ? getStaticParams(title, editorCode) : getReactParams(title, editorCode, scope, lang));\n  var fullscreenLink = loc.pathname.replace(/\\/$/, '') + (loc.pathname.endsWith(source) ? '' : \"/\" + source) + '/' + slugger(title);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ws-example\"\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ws-example-header\"\n  }, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    metaText: isBeta && /*#__PURE__*/React.createElement(Badge, {\n      className: \"ws-beta-badge pf-u-ml-xs\"\n    }, \"Beta\"),\n    size: \"h4\",\n    headingLevel: \"h3\",\n    className: \"ws-example-heading\"\n  }, title), children), isFullscreen ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ws-preview\"\n  }, /*#__PURE__*/React.createElement(\"a\", {\n    className: \"ws-preview__thumbnail-link\",\n    href: fullscreenLink,\n    target: \"_blank\",\n    \"aria-label\": \"Open fullscreen \" + title + \" example\"\n  }, /*#__PURE__*/React.createElement(\"img\", {\n    src: thumbnail.src,\n    width: thumbnail.width,\n    height: thumbnail.height\n  }))) : /*#__PURE__*/React.createElement(\"div\", {\n    id: previewId,\n    className: css(className, isFullscreen ? 'ws-preview-fullscreen' : 'ws-preview')\n  }, livePreview), /*#__PURE__*/React.createElement(ExampleToolbar, {\n    lang: lang,\n    isFullscreen: isFullscreen,\n    fullscreenLink: fullscreenLink,\n    originalCode: code,\n    code: editorCode,\n    setCode: debounce(setEditorCode, 300),\n    codeBoxParams: codeBoxParams\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}