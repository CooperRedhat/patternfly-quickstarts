{"ast":null,"code":"var _require = require('@patternfly/ast-helpers'),\n    parse = _require.parse;\n\nvar versions = require('../versions.json');\n\nvar overpass = require('./fonts');\n\nvar _require2 = require('./capitalize'),\n    capitalize = _require2.capitalize;\n\nvar getStaticParams = function getStaticParams(title, html) {\n  var imgAssetRegex = /['\"](\\/assets\\/images\\/.*)['\"]/g;\n  var imgAsset;\n\n  while (imgAsset = imgAssetRegex.exec(html)) {\n    var imgName = imgAsset[1];\n    html = html.replace(imgName, \"https://www.patternfly.org/v4\" + imgName);\n  }\n\n  return {\n    files: {\n      'index.html': {\n        content: \"\\n          <!DOCTYPE html>\\n          <html lang=\\\"en\\\" class=\\\"pf-m-redhat-font\\\">\\n            <head>\\n              <meta charset=\\\"utf-8\\\" />\\n              <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n              <link rel=\\\"stylesheet\\\" href=\\\"fonts.css\\\" />\\n              <!-- Include latest PatternFly CSS via CDN -->\\n              <link \\n                rel=\\\"stylesheet\\\" \\n                href=\\\"https://unpkg.com/@patternfly/patternfly/patternfly.css\\\" \\n                crossorigin=\\\"anonymous\\\"\\n              >\\n              <link rel=\\\"stylesheet\\\" href=\\\"style.css\\\" />\\n              <title>PatternFly \" + title + \" CodeSandbox Example</title>\\n            </head>\\n            <body>\\n              \" + html + \"\\n            </body>\\n          </html>\\n        \"\n      },\n      'package.json': {\n        content: {}\n      },\n      'style.css': {\n        content: ''\n      },\n      'fonts.css': {\n        content: overpass\n      },\n      'sandbox.config.json': {\n        content: {\n          template: 'static'\n        }\n      }\n    },\n    template: 'static'\n  };\n}; // Allow 4 formats for example identifiers\n// 1. Example = () => { return <jsx />; }\n// 2. class Example {}\n// 3. function Example() { return <jsx />; }\n// 4. const Example = () => { return <jsx />; }\n\n\nvar allowedIdentifiers = ['ClassDeclaration', 'FunctionDeclaration', 'ExpressionStatement', 'VariableDeclaration'];\n\nfunction getExampleDeclaration(code) {\n  code = code.replace(/export\\s+default\\s+/g, '').replace(/export\\s+/g, '');\n\n  var _parse = parse(code),\n      body = _parse.body;\n\n  var lastParsed = body[body.length - 1];\n\n  if (allowedIdentifiers.includes(lastParsed.type)) {\n    return lastParsed;\n  }\n}\n\nfunction getIdentifier(title) {\n  return capitalize(title.replace(/^[^A-Za-z]/, '').replace(/\\s+([a-z])?/g, function (_, match) {\n    return match ? capitalize(match) : '';\n  }).replace(/[^A-Za-z0-9_]/g, ''));\n}\n\nfunction prettyExampleCode(title, code, declaration, identifier) {\n  // Create identifier from title\n  var ident = identifier || getIdentifier(title);\n  var jsxBlock = code.substring(declaration.start, declaration.end);\n\n  if (identifier) {\n    return code.replace(jsxBlock, \"const \" + jsxBlock);\n  }\n\n  if (jsxBlock.includes('\\n')) {\n    // Make pretty\n    return code.replace(jsxBlock, \"const \" + ident + \" = () => (\\n  \" + jsxBlock.replace(/\\n/g, '\\n  ').replace(/;[ \\t]*$/, '') + \"\\n)\");\n  } else {\n    return code.replace(jsxBlock, \"const \" + ident + \" = () => \" + jsxBlock);\n  }\n} // TODO: Make React examples work and use a template that has our assets.\n\n\nfunction getReactParams(title, code, scope, lang) {\n  var _files;\n\n  var toRender = null;\n\n  try {\n    var declaration = getExampleDeclaration(code);\n\n    if (declaration.type === 'ExpressionStatement') {\n      if (!declaration.expression.left) {\n        // () => <jsx />\n        code = prettyExampleCode(title, code, declaration);\n        toRender = getIdentifier(title);\n      } else if (declaration.expression.type === 'AssignmentExpression') {\n        // Basic = () => <jsx />\n        code = prettyExampleCode(title, code, declaration, declaration.expression.left.name);\n        toRender = declaration.expression.left.name;\n      }\n    } else if (declaration.type === 'VariableDeclaration') {\n      toRender = declaration.declarations[0].id.name;\n    } else if (declaration.id) {\n      toRender = declaration.id.name;\n    }\n  } catch (err) {// Ignore\n  }\n\n  var imgImportRegex = /import\\s*(\\w*).*['\"](.*)(\\.(png|jpe?g|webp|gif|svg))['\"]/g;\n  var imgImportMatch;\n\n  while (imgImportMatch = imgImportRegex.exec(code)) {\n    var imgName = imgImportMatch[1];\n    code = code.replace(imgImportMatch[0], \"const \" + imgName + \" = \\\"https://www.patternfly.org/v4\" + scope[imgName] + \"\\\"\");\n  }\n\n  var dependencies = {\n    '@patternfly/react-core': versions.Releases[0].versions['@patternfly/react-core']\n  };\n\n  if (lang === 'ts') {\n    dependencies['@babel/runtime'] = 'latest';\n  }\n\n  Object.entries(versions.Releases[0].versions).filter(function (_ref) {\n    var pkg = _ref[0];\n    return code.includes(pkg);\n  }).forEach(function (_ref2) {\n    var pkg = _ref2[0],\n        version = _ref2[1];\n    return dependencies[pkg] = version;\n  });\n  return {\n    files: (_files = {\n      'index.html': {\n        content: \"<!DOCTYPE html>\\n<html lang=\\\"en\\\" class=\\\"pf-m-redhat-font\\\">\\n  <head>\\n    <meta charset=\\\"utf-8\\\" />\\n    <meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1\\\" />\\n    <title>PatternFly-React \" + title + \" CodeSandbox Example</title>\\n  </head>\\n<body>\\n  <noscript>\\n    You need to enable JavaScript to run this app.\\n  </noscript>\\n  <div id=\\\"root\\\" style=\\\"height:100%\\\"></div>\\n</body>\\n</html>\"\n      }\n    }, _files[lang === 'ts' ? 'index.tsx' : 'index.js'] = {\n      content: \"import ReactDOM from 'react-dom';\\nimport \\\"@patternfly/react-core/dist/styles/base.css\\\";\\nimport './fonts.css';\\n\\n\" + code + \"\\n\\nconst rootElement = document.getElementById(\\\"root\\\");\\nReactDOM.render(<\" + toRender + \" />, rootElement);\"\n    }, _files['fonts.css'] = {\n      content: overpass\n    }, _files['package.json'] = {\n      content: {\n        dependencies: Object.assign({}, dependencies, {\n          'react': '^16.8.0',\n          'react-dom': '^16.8.0'\n        })\n      }\n    }, _files['sandbox.config.json'] = {\n      content: {\n        template: lang === 'ts' ? 'create-react-app-typescript' : 'create-react-app'\n      }\n    }, _files)\n  };\n}\n\nmodule.exports = {\n  getReactParams: getReactParams,\n  getStaticParams: getStaticParams,\n  getExampleDeclaration: getExampleDeclaration,\n  prettyExampleCode: prettyExampleCode\n};","map":{"version":3,"sources":["/Users/ctrowbri/dev/patternfly-quickstarts/node_modules/theme-patternfly-org/helpers/codesandbox.js"],"names":["require","parse","versions","overpass","capitalize","getStaticParams","title","html","imgAssetRegex","imgAsset","exec","imgName","replace","files","content","template","allowedIdentifiers","getExampleDeclaration","code","body","lastParsed","length","includes","type","getIdentifier","_","match","prettyExampleCode","declaration","identifier","ident","jsxBlock","substring","start","end","getReactParams","scope","lang","toRender","expression","left","name","declarations","id","err","imgImportRegex","imgImportMatch","dependencies","Releases","Object","entries","filter","pkg","forEach","version","module","exports"],"mappings":"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","sourcesContent":["const { parse } = require('@patternfly/ast-helpers');\nconst versions  = require('../versions.json');\nconst overpass = require('./fonts');\nconst { capitalize } = require('./capitalize');\n\nconst getStaticParams = (title, html) => {\n  const imgAssetRegex = /['\"](\\/assets\\/images\\/.*)['\"]/g;\n  let imgAsset;\n  while ((imgAsset = imgAssetRegex.exec(html))) {\n    const imgName = imgAsset[1];\n    html = html.replace(imgName, `https://www.patternfly.org/v4${imgName}`);\n  }\n\n  return {\n    files: {\n      'index.html': {\n        content: `\n          <!DOCTYPE html>\n          <html lang=\"en\" class=\"pf-m-redhat-font\">\n            <head>\n              <meta charset=\"utf-8\" />\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n              <link rel=\"stylesheet\" href=\"fonts.css\" />\n              <!-- Include latest PatternFly CSS via CDN -->\n              <link \n                rel=\"stylesheet\" \n                href=\"https://unpkg.com/@patternfly/patternfly/patternfly.css\" \n                crossorigin=\"anonymous\"\n              >\n              <link rel=\"stylesheet\" href=\"style.css\" />\n              <title>PatternFly ${title} CodeSandbox Example</title>\n            </head>\n            <body>\n              ${html}\n            </body>\n          </html>\n        `,\n      },\n      'package.json': {\n        content: {},\n      },\n      'style.css': {\n        content: ''\n      },\n      'fonts.css': {\n        content: overpass\n      },\n      'sandbox.config.json': {\n        content: { template: 'static' }\n      }\n    },\n    template: 'static',\n  }\n};\n\n// Allow 4 formats for example identifiers\n// 1. Example = () => { return <jsx />; }\n// 2. class Example {}\n// 3. function Example() { return <jsx />; }\n// 4. const Example = () => { return <jsx />; }\nconst allowedIdentifiers = [\n  'ClassDeclaration',\n  'FunctionDeclaration',\n  'ExpressionStatement',\n  'VariableDeclaration'\n];\nfunction getExampleDeclaration(code) {\n  code = code\n    .replace(/export\\s+default\\s+/g, '')\n    .replace(/export\\s+/g, '');\n\n  const { body } = parse(code);\n  const lastParsed = body[body.length - 1];\n  if (allowedIdentifiers.includes(lastParsed.type)) {\n    return lastParsed;\n  }\n}\n\nfunction getIdentifier(title) {\n  return capitalize(\n    title\n      .replace(/^[^A-Za-z]/, '')\n      .replace(/\\s+([a-z])?/g, (_, match) => match ? capitalize(match) : '')\n      .replace(/[^A-Za-z0-9_]/g, '')\n  );\n}\n\nfunction prettyExampleCode(title, code, declaration, identifier) {\n  // Create identifier from title\n  const ident = identifier || getIdentifier(title);\n  const jsxBlock = code.substring(declaration.start, declaration.end);\n  if (identifier) {\n    return code.replace(jsxBlock, `const ${jsxBlock}`);\n  }\n  if (jsxBlock.includes('\\n')) {\n    // Make pretty\n    return code.replace(jsxBlock, `const ${ident} = () => (\\n  ${\n      jsxBlock\n        .replace(/\\n/g, '\\n  ')\n        .replace(/;[ \\t]*$/, '')\n      }\\n)`);\n  }\n  else {\n    return code.replace(jsxBlock, `const ${ident} = () => ${jsxBlock}`);\n  }\n}\n\n// TODO: Make React examples work and use a template that has our assets.\nfunction getReactParams(title, code, scope, lang) {\n  let toRender = null;\n  try {\n    let declaration = getExampleDeclaration(code);\n    if (declaration.type === 'ExpressionStatement') {\n      if (!declaration.expression.left) {\n        // () => <jsx />\n        code = prettyExampleCode(title, code, declaration);\n        toRender = getIdentifier(title);\n      } else if (declaration.expression.type === 'AssignmentExpression') {\n        // Basic = () => <jsx />\n        code = prettyExampleCode(title, code, declaration, declaration.expression.left.name);\n        toRender = declaration.expression.left.name;\n      }\n    } else if (declaration.type === 'VariableDeclaration') {\n      toRender = declaration.declarations[0].id.name;\n    } else if (declaration.id) {\n      toRender = declaration.id.name;\n    }\n  }\n  catch (err) {\n    // Ignore\n  }\n\n  const imgImportRegex = /import\\s*(\\w*).*['\"](.*)(\\.(png|jpe?g|webp|gif|svg))['\"]/g;\n  let imgImportMatch;\n  while ((imgImportMatch = imgImportRegex.exec(code))) {\n    const imgName = imgImportMatch[1];\n    code = code.replace(imgImportMatch[0], `const ${imgName} = \"https://www.patternfly.org/v4${scope[imgName]}\"`);\n  }\n\n  const dependencies = {\n    '@patternfly/react-core': versions.Releases[0].versions['@patternfly/react-core']\n  };\n\n  if (lang === 'ts') {\n    dependencies['@babel/runtime'] = 'latest';\n  }\n\n  Object.entries(versions.Releases[0].versions)\n    .filter(([pkg]) => code.includes(pkg))\n    .forEach(([pkg, version]) => dependencies[pkg] = version);\n\n  return {\n    files: {\n      'index.html': {\n        content: `<!DOCTYPE html>\n<html lang=\"en\" class=\"pf-m-redhat-font\">\n  <head>\n    <meta charset=\"utf-8\" />\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\" />\n    <title>PatternFly-React ${title} CodeSandbox Example</title>\n  </head>\n<body>\n  <noscript>\n    You need to enable JavaScript to run this app.\n  </noscript>\n  <div id=\"root\" style=\"height:100%\"></div>\n</body>\n</html>`,\n      },\n      [lang === 'ts' ? 'index.tsx' : 'index.js']: {\n        content: `import ReactDOM from 'react-dom';\nimport \"@patternfly/react-core/dist/styles/base.css\";\nimport './fonts.css';\n\n${code}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<${toRender} />, rootElement);`\n      },\n      'fonts.css': {\n        content: overpass\n      },\n      'package.json': {\n        content: {\n          dependencies: {\n            ...dependencies,\n            'react': '^16.8.0',\n            'react-dom': '^16.8.0'\n          }\n        },\n      },\n      'sandbox.config.json': {\n        content: { template: lang === 'ts' ? 'create-react-app-typescript' : 'create-react-app' }\n      }\n    },\n  }\n}\n\nmodule.exports = {\n  getReactParams,\n  getStaticParams,\n  getExampleDeclaration,\n  prettyExampleCode\n};\n"]},"metadata":{},"sourceType":"module"}