{"ast":null,"code":"import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Router, useLocation } from '@reach/router';\nimport { SideNavLayout } from 'theme-patternfly-org/layouts';\nimport { Footer } from 'theme-patternfly-org/components';\nimport { MDXTemplate } from 'theme-patternfly-org/templates/mdx';\nimport { routes, groupedRoutes, fullscreenRoutes, getAsyncComponent } from './routes';\nimport 'client-styles';\n\nvar AppRoute = function AppRoute(_ref) {\n  var child = _ref.child,\n      katacodaLayout = _ref.katacodaLayout,\n      title = _ref.title;\n  var location = useLocation();\n\n  if (typeof window !== 'undefined' && window.gtag) {\n    gtag('config', 'UA-47523816-6', {\n      'page_path': location.pathname,\n      'page_title': title || location.pathname\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, child, !katacodaLayout && process.env.hasFooter && /*#__PURE__*/React.createElement(Footer, null));\n};\n\nvar SideNavRouter = function SideNavRouter() {\n  var pathname = useLocation().pathname.replace(process.env.pathPrefix, '');\n  var navOpen = !routes[pathname] || !routes[pathname].katacodaLayout;\n  return /*#__PURE__*/React.createElement(SideNavLayout, {\n    groupedRoutes: groupedRoutes,\n    navOpen: navOpen\n  }, /*#__PURE__*/React.createElement(Router, {\n    id: \"ws-page-content-router\"\n  }, Object.entries(routes).map(function (_ref2) {\n    var path = _ref2[0],\n        _ref2$ = _ref2[1],\n        Component = _ref2$.Component,\n        title = _ref2$.title,\n        sources = _ref2$.sources,\n        katacodaLayout = _ref2$.katacodaLayout;\n    return Component ? /*#__PURE__*/React.createElement(AppRoute, {\n      key: path,\n      path: path,\n      \"default\": path === '/404',\n      child: /*#__PURE__*/React.createElement(Component, null),\n      katacodaLayout: katacodaLayout,\n      title: title\n    }) : /*#__PURE__*/React.createElement(AppRoute, {\n      key: path,\n      path: path + '/*',\n      child: /*#__PURE__*/React.createElement(MDXTemplate, {\n        path: path,\n        title: title,\n        sources: sources\n      }),\n      katacodaLayout: katacodaLayout,\n      title: title\n    });\n  })));\n};\n\nvar FullscreenComponent = function FullscreenComponent(_ref3) {\n  var Component = _ref3.Component,\n      title = _ref3.title;\n\n  var _React$useState = React.useState(false),\n      isLoaded = _React$useState[0],\n      setIsLoaded = _React$useState[1];\n\n  React.useEffect(function () {\n    Component.preload().then(function () {\n      return setIsLoaded(true);\n    });\n  }, []);\n\n  var _Component$getPageDat = Component.getPageData(),\n      _Component$getPageDat2 = _Component$getPageDat.examples,\n      examples = _Component$getPageDat2 === void 0 ? {} : _Component$getPageDat2;\n\n  var Example = examples[title];\n  return isLoaded ? /*#__PURE__*/React.createElement(Example, {\n    isFullscreen: false,\n    isFullscreenPreview: true\n  }) : /*#__PURE__*/React.createElement(Component, null);\n}; // Export for SSR\n\n\nexport var App = function App() {\n  return /*#__PURE__*/React.createElement(Router, {\n    basepath: process.env.pathPrefix,\n    id: \"ws-router\"\n  }, /*#__PURE__*/React.createElement(SideNavRouter, {\n    path: \"/*\"\n  }), Object.entries(fullscreenRoutes).map(function (_ref4) {\n    var path = _ref4[0],\n        _ref4$ = _ref4[1],\n        title = _ref4$.title,\n        Component = _ref4$.Component;\n    return /*#__PURE__*/React.createElement(FullscreenComponent, {\n      key: path,\n      path: path,\n      Component: Component,\n      title: title\n    });\n  }));\n};\nvar isProd = process.env.NODE_ENV === 'production';\nvar isPrerender = process.env.PRERENDER; // Don't use ReactDOM in SSR\n\nif (!isPrerender) {\n  var render = function render() {\n    var renderFn = isProd ? ReactDOM.hydrate : ReactDOM.render;\n    renderFn( /*#__PURE__*/React.createElement(App, null), document.getElementById('root'));\n  }; // On first load, await promise for the current page to avoid flashing a \"Loading...\" state\n\n\n  var Component = getAsyncComponent(null);\n\n  if (Component) {\n    Component.preload().then(render);\n  } else {\n    render();\n  }\n}","map":null,"metadata":{},"sourceType":"module"}