{"ast":null,"code":"function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _inheritsLoose(subClass, superClass) { subClass.prototype = Object.create(superClass.prototype); subClass.prototype.constructor = subClass; _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport { debounce } from \"@patternfly/react-core\";\nimport { Table, TableHeader, TableBody, sortable, SortByDirection, expandable } from \"@patternfly/react-table\";\nimport * as tokensModule from \"@patternfly/react-tokens/dist/esm/componentIndex\";\nimport global_spacer_md from \"@patternfly/react-tokens/dist/esm/global_spacer_md\";\nimport LevelUpAltIcon from \"@patternfly/react-icons/dist/esm/icons/level-up-alt-icon\";\nimport { CSSSearch } from './cssSearch';\nimport \"./cssVariables.css\";\nvar isColorRegex = /^(#|rgb)/;\n\nvar mappingAsList = function mappingAsList(property, values) {\n  return /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"ws-css-property\"\n  }, /*#__PURE__*/React.createElement(\"span\", null, property)), values.map(function (entry, index) {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      key: index,\n      style: {\n        padding: \"4px 0 4px calc(\" + global_spacer_md.value + \" * \" + (index + 3) + \")\"\n      }\n    }, /*#__PURE__*/React.createElement(LevelUpAltIcon, {\n      style: {\n        transform: 'rotate(90deg)'\n      }\n    }), /*#__PURE__*/React.createElement(\"span\", {\n      style: {\n        paddingLeft: '16px'\n      }\n    }, entry));\n  }));\n};\n\nvar flattenList = function flattenList(files) {\n  var list = [];\n  files.forEach(function (file) {\n    Object.entries(file).forEach(function (_ref) {\n      var selector = _ref[0],\n          values = _ref[1];\n      Object.entries(values).forEach(function (_ref2) {\n        var key = _ref2[0],\n            val = _ref2[1];\n        list.push({\n          selector: selector,\n          property: val.name,\n          token: key,\n          value: val.value,\n          values: val.values\n        });\n      });\n    });\n  });\n  return list;\n};\n\nexport var CSSVariables = /*#__PURE__*/function (_React$Component) {\n  _inheritsLoose(CSSVariables, _React$Component);\n\n  function CSSVariables(props) {\n    var _this;\n\n    _this = _React$Component.call(this, props) || this; // Ensure array in case of multiple prefixes\n\n    _defineProperty(_assertThisInitialized(_this), \"getFilteredRows\", function (searchRE) {\n      var filteredRows = [];\n      var rowNumber = -1;\n\n      _this.flatList.forEach(function (row) {\n        var selector = row.selector,\n            property = row.property,\n            token = row.token,\n            value = row.value,\n            values = row.values;\n        var passes = !searchRE || searchRE.test(selector) || searchRE.test(property) || searchRE.test(value) || values && searchRE.test(JSON.stringify(values));\n\n        if (passes) {\n          var rowKey = selector + \"_\" + property;\n          var cells = [].concat(_this.props.hideSelectorColumn ? [] : [selector], [property, /*#__PURE__*/React.createElement(\"div\", {\n            key: rowKey\n          }, /*#__PURE__*/React.createElement(\"div\", {\n            key: rowKey + \"_1\",\n            className: \"pf-l-flex pf-m-space-items-sm\"\n          }, isColorRegex.test(value) && /*#__PURE__*/React.createElement(\"div\", {\n            key: rowKey + \"_2\",\n            className: \"pf-l-flex pf-m-column pf-m-align-self-center\"\n          }, /*#__PURE__*/React.createElement(\"span\", {\n            className: \"ws-color-box\",\n            style: {\n              backgroundColor: value\n            }\n          })), /*#__PURE__*/React.createElement(\"div\", {\n            key: rowKey + \"_3\",\n            className: \"pf-l-flex pf-m-column pf-m-align-self-center ws-td-text\"\n          }, value)))]);\n          filteredRows.push({\n            isOpen: values ? false : undefined,\n            cells: cells\n          });\n          rowNumber += 1;\n\n          if (values) {\n            filteredRows.push({\n              parent: rowNumber,\n              fullWidth: true,\n              cells: [{\n                title: mappingAsList(property, values)\n              }]\n            });\n            rowNumber += 1;\n          }\n        }\n      });\n\n      return filteredRows;\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"onCollapse\", function (event, rowKey, isOpen) {\n      var rows = _this.state.rows;\n      rows[rowKey].isOpen = isOpen;\n\n      _this.setState({\n        rows: rows\n      });\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"getDebouncedFilteredRows\", debounce(function (value) {\n      var searchRE = new RegExp(value, \"i\");\n\n      _this.setState({\n        searchRE: searchRE,\n        rows: _this.getFilteredRows(searchRE)\n      });\n    }, 500));\n\n    _defineProperty(_assertThisInitialized(_this), \"onSort\", function (_event, index, direction) {\n      _this.flatList = _this.flatList.sort(function (a, b) {\n        var indexToColMap = {\n          '1': 'selector',\n          '2': 'property',\n          '3': 'value'\n        };\n        var column = indexToColMap[index];\n\n        if (direction === SortByDirection.asc) {\n          return a[column] < b[column] ? -1 : a[column] > b[column] ? 1 : 0;\n        } else {\n          return a[column] > b[column] ? -1 : a[column] < b[column] ? 1 : 0;\n        }\n      });\n\n      _this.setState({\n        sortBy: {\n          index: index,\n          direction: direction\n        },\n        rows: _this.getFilteredRows(_this.state.searchRE)\n      });\n    });\n\n    _this.prefix = typeof props.prefix === \"string\" ? [props.prefix] : props.prefix;\n\n    var prefixTokens = _this.prefix.map(function (prefix) {\n      return prefix.replace(\"pf-\", \"\").replace(/-+/g, \"_\");\n    });\n\n    var applicableFiles = Object.entries(tokensModule).filter(function (_ref3) {\n      var key = _ref3[0],\n          val = _ref3[1];\n      return prefixTokens.includes(key);\n    }).sort(function (_ref4, _ref5) {\n      var key1 = _ref4[0];\n      var key2 = _ref5[0];\n      return key1.localeCompare(key2);\n    }).map(function (_ref6) {\n      var key = _ref6[0],\n          val = _ref6[1];\n\n      if (props.selector) {\n        var _ref7;\n\n        return _ref7 = {}, _ref7[props.selector] = val[props.selector], _ref7;\n      }\n\n      return val;\n    });\n    _this.flatList = flattenList(applicableFiles);\n    _this.columns = [].concat(props.hideSelectorColumn ? [] : [{\n      title: \"Selector\",\n      transforms: [sortable],\n      cellFormatters: [expandable]\n    }], [{\n      title: \"Variable\",\n      transforms: [sortable]\n    }, {\n      title: \"Value\",\n      transforms: [sortable]\n    }]);\n    _this.state = {\n      searchRE: '',\n      rows: _this.getFilteredRows(),\n      sortBy: {\n        index: 0,\n        direction: \"asc\" // a-z\n\n      }\n    };\n    return _this;\n  }\n\n  var _proto = CSSVariables.prototype;\n\n  _proto.render = function render() {\n    return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CSSSearch, {\n      getDebouncedFilteredRows: this.getDebouncedFilteredRows\n    }), /*#__PURE__*/React.createElement(Table, {\n      variant: \"compact\",\n      \"aria-label\": \"CSS Variables for prefixes \" + this.prefix.join(\" \"),\n      sortBy: this.state.sortBy,\n      onSort: this.onSort,\n      cells: this.columns,\n      rows: this.state.rows,\n      onCollapse: this.onCollapse,\n      gridBreakPoint: \"grid-lg\"\n    }, /*#__PURE__*/React.createElement(TableHeader, null), /*#__PURE__*/React.createElement(TableBody, null)));\n  };\n\n  return CSSVariables;\n}(React.Component);","map":null,"metadata":{},"sourceType":"module"}