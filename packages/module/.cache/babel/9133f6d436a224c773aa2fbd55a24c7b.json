{"ast":null,"code":"var _excluded = [\"href\", \"to\", \"onMouseOver\", \"onClick\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\nimport React from 'react';\nimport { Link as ReachLink, navigate } from '@reach/router';\nimport { getAsyncComponent } from '../../routes';\n\nvar Promiseany = (Promise.any || function ($) {\n  return new Promise(function (D, E, A, L) {\n    A = [];\n    L = $.map(function ($, i) {\n      return Promise.resolve($).then(D, function (O) {\n        return (A[i] = O, --L) || E({\n          errors: A\n        });\n      });\n    }).length;\n  });\n}).bind(Promise);\n\nexport var Link = function Link(_ref) {\n  var href = _ref.href,\n      to = _ref.to,\n      _ref$onMouseOver = _ref.onMouseOver,\n      onMouseOver = _ref$onMouseOver === void 0 ? function () {} : _ref$onMouseOver,\n      onClick = _ref.onClick,\n      props = _objectWithoutPropertiesLoose(_ref, _excluded);\n\n  var preloadPromise;\n  var url = href || to || '';\n\n  if (url.startsWith('#') && !onClick) {\n    onClick = function onClick(ev) {\n      ev.preventDefault(); // Don't use client-side routing\n      // Chrome does not jump until ALL network requests finish.\n      // We have to force it to...\n\n      var referencedElement = document.getElementById(url.replace('#', ''));\n\n      if (referencedElement) {\n        referencedElement.scrollIntoView();\n      } // update URL without triggering route change\n\n\n      history.pushState({}, '', url);\n    };\n  }\n\n  if (url.includes('//') || url.startsWith('#')) {\n    return /*#__PURE__*/React.createElement(\"a\", _extends({\n      href: url,\n      onClick: onClick\n    }, props));\n  } else if (url.startsWith('/')) {\n    url = process.env.pathPrefix + \"/\" + url.substr(1);\n\n    if (!process.env.PRERENDER) {\n      var Component = getAsyncComponent(url);\n\n      if (Component) {\n        // Preload on hover\n        props.onMouseOver = function () {\n          preloadPromise = Component.preload();\n          onMouseOver();\n        }; // Wait up to an extra 500ms on click before showing 'Loading...'\n\n\n        props.onClick = function (ev) {\n          if (!(ev.ctrlKey || ev.metaKey)) {\n            // avoid disallowing cmnd/ctrl+click opening in new tab\n            ev.preventDefault();\n\n            if (typeof window !== 'undefined' && url !== location.pathname) {\n              Promiseany([preloadPromise, new Promise(function (res) {\n                return setTimeout(res, 500);\n              })]).then(function () {\n                return navigate(url);\n              });\n            }\n          }\n        };\n      }\n    }\n  }\n\n  return /*#__PURE__*/React.createElement(ReachLink, _extends({\n    to: url\n  }, props));\n};","map":null,"metadata":{},"sourceType":"module"}