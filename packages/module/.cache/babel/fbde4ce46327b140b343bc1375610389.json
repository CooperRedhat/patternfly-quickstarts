{"ast":null,"code":"import React from 'react';\nimport { Link } from '../link/link';\nimport { Nav, NavList, NavExpandable, PageContextConsumer, capitalize } from '@patternfly/react-core';\nimport { css } from '@patternfly/react-styles';\nimport { Location } from '@reach/router';\nimport { slugger } from '../../helpers';\nimport './sideNav.css';\nimport globalBreakpointXl from \"@patternfly/react-tokens/dist/esm/global_breakpoint_xl\";\nimport { trackEvent } from '../../helpers';\n\nvar NavItem = function NavItem(_ref) {\n  var text = _ref.text,\n      href = _ref.href;\n  var isMobileView = window.innerWidth < Number.parseInt(globalBreakpointXl.value, 10);\n  return /*#__PURE__*/React.createElement(PageContextConsumer, {\n    key: href + text\n  }, function (_ref2) {\n    var onNavToggle = _ref2.onNavToggle;\n    return /*#__PURE__*/React.createElement(\"li\", {\n      key: href + text,\n      className: \"pf-c-nav__item\",\n      onClick: function onClick() {\n        return isMobileView && onNavToggle();\n      }\n    }, /*#__PURE__*/React.createElement(Link, {\n      to: href,\n      getProps: function getProps(_ref3) {\n        var isCurrent = _ref3.isCurrent,\n            href = _ref3.href,\n            location = _ref3.location;\n        var pathname = location.pathname;\n        return {\n          className: css('pf-c-nav__link', (isCurrent || pathname.startsWith(href + '/')) && 'pf-m-current')\n        };\n      }\n    }, text));\n  });\n};\n\nexport var SideNav = function SideNav(_ref4) {\n  var _ref4$groupedRoutes = _ref4.groupedRoutes,\n      groupedRoutes = _ref4$groupedRoutes === void 0 ? {} : _ref4$groupedRoutes,\n      _ref4$navItems = _ref4.navItems,\n      navItems = _ref4$navItems === void 0 ? [] : _ref4$navItems;\n  React.useEffect(function () {\n    if (typeof window === 'undefined') {\n      return;\n    }\n\n    var overflowElement = document.getElementById('page-sidebar');\n\n    if (!overflowElement) {\n      return;\n    }\n\n    var activeElements = overflowElement.getElementsByClassName('pf-m-current');\n\n    if (activeElements.length > 0) {\n      var lastElement = activeElements[activeElements.length - 1];\n      lastElement.scrollIntoView({\n        block: 'center'\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(Nav, {\n    \"aria-label\": \"Side Nav\",\n    theme: \"light\"\n  }, /*#__PURE__*/React.createElement(NavList, {\n    className: \"ws-side-nav-list\"\n  }, navItems.map(function (_ref5) {\n    var section = _ref5.section,\n        text = _ref5.text,\n        href = _ref5.href;\n    return section ? /*#__PURE__*/React.createElement(Location, {\n      key: section\n    }, function (_ref6) {\n      var location = _ref6.location;\n      var isActive = location.pathname.startsWith(process.env.pathPrefix + \"/\" + slugger(section));\n      return /*#__PURE__*/React.createElement(NavExpandable, {\n        title: capitalize(section.replace(/-/g, ' ')),\n        isActive: isActive,\n        isExpanded: isActive,\n        className: \"ws-side-nav-group\",\n        onClick: function onClick(event) {\n          // Don't trigger for bubbled events from NavItems\n          if (!event.target.href) {\n            var isExpanded = event.currentTarget.classList.contains('pf-m-expanded'); // 1 === expand section, 0 === collapse section\n\n            trackEvent('sidenav_section_click', 'click_event', section, isExpanded ? 0 : 1);\n          }\n        }\n      }, Object.entries(groupedRoutes[section] || {}).filter(function (_ref7) {\n        var hideNavItem = _ref7[1].hideNavItem;\n        return !Boolean(hideNavItem);\n      }).map(function (_ref8) {\n        var id = _ref8[0],\n            slug = _ref8[1].slug;\n        return {\n          text: id,\n          href: slug\n        };\n      }).sort(function (_ref9, _ref10) {\n        var text1 = _ref9.text;\n        var text2 = _ref10.text;\n        return text1.localeCompare(text2);\n      }).map(NavItem));\n    }) : NavItem({\n      text: text || capitalize(href.replace(/\\//g, '').replace(/-/g, ' ')),\n      href: href\n    });\n  })));\n};","map":null,"metadata":{},"sourceType":"module"}