{"ast":null,"code":"import React from 'react';\nimport { Button, Form, Tooltip } from '@patternfly/react-core';\nimport { CodeEditor, CodeEditorControl, Language } from '@patternfly/react-code-editor';\nimport { convertToJSX } from '@patternfly/ast-helpers';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport CodepenIcon from '@patternfly/react-icons/dist/esm/icons/codepen-icon';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport CodeIcon from '@patternfly/react-icons/dist/esm/icons/code-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport ReplyAllIcon from '@patternfly/react-icons/dist/esm/icons/reply-all-icon';\nimport { copy } from '../../helpers';\nimport { trackEvent } from '../../helpers';\n\nfunction getLanguage(lang) {\n  if (lang === 'js') {\n    return Language.javascript;\n  } else if (lang === 'ts') {\n    return Language.typescript;\n  }\n\n  return lang;\n}\n\nexport var ExampleToolbar = function ExampleToolbar(_ref) {\n  var fullscreenLink = _ref.fullscreenLink,\n      codeBoxParams = _ref.codeBoxParams,\n      lang = _ref.lang,\n      isFullscreen = _ref.isFullscreen,\n      originalCode = _ref.originalCode,\n      code = _ref.code,\n      setCode = _ref.setCode;\n\n  var _React$useState = React.useState(false),\n      isEditorOpen = _React$useState[0],\n      setIsEditorOpen = _React$useState[1];\n\n  var _React$useState2 = React.useState(false),\n      isCopied = _React$useState2[0],\n      setCopied = _React$useState2[1];\n\n  var copyCode = function copyCode() {\n    copy(code);\n    setCopied(true); // Reset isCopied after Tooltip fades out\n\n    setTimeout(function () {\n      setCopied(false);\n    }, 2500);\n  };\n\n  var copyLabel = 'Copy code to clipboard';\n  var languageLabel = \"Toggle \" + lang.toUpperCase() + \" code\";\n  var codesandboxLabel = 'Open example in CodeSandbox';\n  var fullscreenLabel = 'Open example in new window';\n  var convertLabel = 'Convert example from Typescript to JavaScript';\n  var undoAllLabel = 'Undo all changes';\n  var customControls = /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CodeEditorControl, {\n    icon: /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(CodeIcon, null), ' ' + lang.toUpperCase()),\n    onClick: function onClick() {\n      setIsEditorOpen(!isEditorOpen); // 1 === expand code, 0 === collapse code\n\n      trackEvent('code_editor_control_click', 'click_event', 'TOGGLE_CODE', isEditorOpen ? 0 : 1);\n    },\n    \"aria-label\": languageLabel,\n    toolTipText: languageLabel,\n    \"aria-expanded\": isEditorOpen,\n    className: \"ws-code-editor-control\"\n  }), /*#__PURE__*/React.createElement(Tooltip, {\n    trigger: \"mouseenter\",\n    content: /*#__PURE__*/React.createElement(\"div\", null, isCopied ? 'Code copied' : copyLabel),\n    exitDelay: isCopied ? 1600 : 300,\n    entryDelay: 300,\n    maxWidth: \"100px\",\n    position: \"top\"\n  }, /*#__PURE__*/React.createElement(Button, {\n    onClick: function onClick() {\n      copyCode();\n      trackEvent('code_editor_control_click', 'click_event', 'COPY_CODE');\n    },\n    variant: \"control\",\n    \"aria-label\": copyLabel,\n    className: \"ws-code-editor-control\"\n  }, /*#__PURE__*/React.createElement(CopyIcon, null))), codeBoxParams && /*#__PURE__*/React.createElement(Tooltip, {\n    trigger: \"mouseenter\",\n    content: codesandboxLabel,\n    exitDelay: 300,\n    entryDelay: 300,\n    maxWidth: \"100px\",\n    position: \"top\"\n  }, /*#__PURE__*/React.createElement(Form, {\n    \"aria-label\": codesandboxLabel,\n    action: \"https://codesandbox.io/api/v1/sandboxes/define\",\n    method: \"POST\",\n    target: \"_blank\",\n    style: {\n      display: \"inline-block\"\n    }\n  }, /*#__PURE__*/React.createElement(Button, {\n    \"aria-label\": codesandboxLabel,\n    variant: \"control\",\n    type: \"submit\",\n    onClick: function onClick() {\n      trackEvent('code_editor_control_click', 'click_event', 'CODESANDBOX_LINK');\n    },\n    className: \"ws-code-editor-control\"\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    type: \"hidden\",\n    name: \"parameters\",\n    value: codeBoxParams\n  }), /*#__PURE__*/React.createElement(CodepenIcon, null)))), fullscreenLink && /*#__PURE__*/React.createElement(CodeEditorControl, {\n    component: \"a\",\n    icon: /*#__PURE__*/React.createElement(ExternalLinkAltIcon, null),\n    href: fullscreenLink,\n    target: \"_blank\",\n    rel: \"noopener noreferrer\",\n    \"aria-label\": fullscreenLabel,\n    toolTipText: fullscreenLabel,\n    onClick: function onClick() {\n      trackEvent('code_editor_control_click', 'click_event', 'FULLSCREEN_LINK');\n    },\n    className: \"ws-code-editor-control\"\n  }), isEditorOpen && lang === 'ts' && /*#__PURE__*/React.createElement(CodeEditorControl, {\n    icon: /*#__PURE__*/React.createElement(React.Fragment, null, 'TS ', /*#__PURE__*/React.createElement(AngleDoubleRightIcon, null), ' JS'),\n    \"aria-label\": convertLabel,\n    toolTipText: convertLabel,\n    onClick: function onClick() {\n      setCode(convertToJSX(code).code);\n      trackEvent('code_editor_control_click', 'click_event', 'TS_TO_JS');\n    },\n    className: \"ws-code-editor-control\"\n  }), code !== originalCode && /*#__PURE__*/React.createElement(CodeEditorControl, {\n    icon: /*#__PURE__*/React.createElement(ReplyAllIcon, null),\n    \"aria-label\": undoAllLabel,\n    toolTipText: undoAllLabel,\n    onClick: function onClick() {\n      setCode(originalCode);\n      trackEvent('code_editor_control_click', 'click_event', 'RESET_CODE');\n    },\n    className: \"ws-code-editor-control\"\n  })); // TODO: check if worth adding react, patternfly, and example types\n  // https://microsoft.github.io/monaco-editor/api/interfaces/monaco.languages.typescript.languageservicedefaults.html#addextralib\n\n  var onEditorDidMount = function onEditorDidMount(_editor, monaco) {\n    monaco.languages.typescript.typescriptDefaults.setCompilerOptions(Object.assign({\n      jsx: true\n    }, monaco.languages.typescript.typescriptDefaults.getCompilerOptions()));\n    monaco.languages.typescript.typescriptDefaults.setDiagnosticsOptions({\n      noSemanticValidation: true,\n      noSyntaxValidation: true,\n      noSuggestionDiagnostics: true,\n      onlyVisible: true\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(CodeEditor, {\n    customControls: customControls,\n    showEditor: isEditorOpen,\n    language: getLanguage(lang),\n    height: \"400px\",\n    code: code,\n    onChange: function onChange(newCode) {\n      return setCode(newCode);\n    },\n    onEditorDidMount: onEditorDidMount,\n    isReadOnly: isFullscreen,\n    className: (isEditorOpen ? 'ws-example-code-expanded ' : '') + \"ws-code-editor\"\n  });\n};","map":null,"metadata":{},"sourceType":"module"}