{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { css } from '@patternfly/react-styles';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport LightbulbIcon from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\nimport srcImportdefaultnav from './react-demos/default-nav.png';\nimport srcImportexpandablenav from './react-demos/expandable-nav.png';\nimport srcImportgroupednav from './react-demos/grouped-nav.png';\nimport srcImporthorizontalnav from './react-demos/horizontal-nav.png';\nimport srcImportlegacylightnav from './react-demos/legacylight-nav.png';\nimport srcImportmanualnav from './react-demos/manual-nav.png';\nimport srcImportstickysectiongroupalternatesyntaxandusingpageheader from './react-demos/sticky-section-group-alternate-syntax-and-using-pageheader.png';\nimport srcImportstickysectiongroupalternatesyntax from './react-demos/sticky-section-group-alternate-syntax.png';\nimport srcImportstickysectiongroupusingpageheader from './react-demos/sticky-section-group-using-pageheader.png';\nimport srcImportstickysectiongroup from './react-demos/sticky-section-group.png';\nimport srcImporttertiarynav from './react-demos/tertiary-nav.png';\nvar pageData = {\n  \"id\": \"Page\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/page/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Page/Page.md\",\n  \"fullscreenExamples\": [\"Sticky section group\", \"Sticky section group (using PageHeader)\", \"Sticky section group (alternate syntax and using PageHeader)\"]\n};\npageData.liveContext = {\n  css: css,\n  BellIcon: BellIcon,\n  CogIcon: CogIcon,\n  HelpIcon: HelpIcon,\n  QuestionCircleIcon: QuestionCircleIcon,\n  imgBrand: imgBrand,\n  imgAvatar: imgAvatar,\n  BarsIcon: BarsIcon,\n  AttentionBellIcon: AttentionBellIcon,\n  LightbulbIcon: LightbulbIcon\n};\npageData.examples = {\n  'Sticky section group': function StickySectionGroup(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      thumbnail: srcImportstickysectiongroup,\n      \"code\": \"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Checkbox,\\n  Divider,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Masthead,\\n  MastheadBrand,\\n  MastheadContent,\\n  MastheadMain,\\n  MastheadToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  PageToggleButton,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  Toolbar,\\n  ToolbarContent,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  Drawer,\\n  DrawerPanelContent,\\n  DrawerContent,\\n  DrawerContentBody,\\n  DrawerHead,\\n  DrawerActions,\\n  DrawerCloseButton,\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\\nimport LightbulbIcon from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGrouped extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      isFullKebabDropdownOpen: false,\\n      activeItem: 0,\\n      isDrawerExpanded: false\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n\\n    this.onFullKebabToggle = isFullKebabDropdownOpen => {\\n      this.setState({\\n        isFullKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onFullKebabSelect = () => {\\n      this.setState({\\n        isFullKebabDropdownOpen: !this.state.isFullKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onDrawerToggle = () => {\\n      const isDrawerExpanded = !this.state.isDrawerExpanded;\\n      this.setState({\\n        isDrawerExpanded\\n      });\\n    };\\n\\n    this.onDrawerClose = () => {\\n      this.setState({\\n        isDrawerExpanded: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem, isFullKebabDropdownOpen, isDrawerExpanded } = this.state;\\n\\n    const PageNav = (\\n      <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n        <NavList>\\n          <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n            System panel\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n            Policy\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n            Authentication\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n            Network services\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n            Server\\n          </NavItem>\\n        </NavList>\\n      </Nav>\\n    );\\n\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n\\n    const fullKebabItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>,\\n      <Divider key=\\\"divider\\\" />,\\n      <DropdownItem key=\\\"kebab-1\\\">\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"kebab-2\\\">\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n\\n    const headerToolbar = (\\n      <Toolbar id=\\\"toolbar\\\" isFullHeight isStatic>\\n        <ToolbarContent>\\n          <ToolbarGroup\\n            variant=\\\"icon-button-group\\\"\\n            alignment={{ default: 'alignRight' }}\\n            spacer={{ default: 'spacerNone', md: 'spacerMd' }}\\n          >\\n            <ToolbarItem>\\n              <Button aria-label=\\\"Toggle drawer\\\" variant={ButtonVariant.plain} onClick={this.onDrawerToggle}>\\n                <LightbulbIcon color={isDrawerExpanded ? 'yellow' : 'currentColor'} />\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarItem>\\n              <Button aria-label=\\\"Notifications\\\" variant={ButtonVariant.plain}>\\n                <AttentionBellIcon />\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarGroup variant=\\\"icon-button-group\\\" visibility={{ default: 'hidden', lg: 'visible' }}>\\n              <ToolbarItem>\\n                <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n                  <CogIcon />\\n                </Button>\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n                  <QuestionCircleIcon />\\n                </Button>\\n              </ToolbarItem>\\n            </ToolbarGroup>\\n            <ToolbarItem visibility={{ default: 'hidden', md: 'visible', lg: 'hidden' }}>\\n              <Dropdown\\n                isPlain\\n                position=\\\"right\\\"\\n                onSelect={this.onKebabDropdownSelect}\\n                toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n                isOpen={isKebabDropdownOpen}\\n                dropdownItems={kebabDropdownItems}\\n              />\\n            </ToolbarItem>\\n            <ToolbarItem visibility={{ default: 'visible', md: 'hidden', lg: 'hidden', xl: 'hidden', '2xl': 'hidden' }}>\\n              <Dropdown\\n                isPlain\\n                position=\\\"right\\\"\\n                onSelect={this.onFullKebabSelect}\\n                toggle={<KebabToggle onToggle={this.onFullKebabToggle} />}\\n                isOpen={isFullKebabDropdownOpen}\\n                dropdownItems={fullKebabItems}\\n              />\\n            </ToolbarItem>\\n          </ToolbarGroup>\\n          <ToolbarItem visibility={{ default: 'hidden', md: 'visible' }}>\\n            <Dropdown\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={\\n                <DropdownToggle icon={<Avatar src={imgAvatar} alt=\\\"Avatar\\\" />} onToggle={this.onDropdownToggle}>\\n                  John Smith\\n                </DropdownToggle>\\n              }\\n              dropdownItems={userDropdownItems}\\n            />\\n          </ToolbarItem>\\n        </ToolbarContent>\\n      </Toolbar>\\n    );\\n\\n    const Header = (\\n      <Masthead>\\n        <MastheadToggle>\\n          <PageToggleButton variant=\\\"plain\\\" aria-label=\\\"Global navigation\\\">\\n            <BarsIcon />\\n          </PageToggleButton>\\n        </MastheadToggle>\\n        <MastheadMain>\\n          <MastheadBrand>\\n            <Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />\\n          </MastheadBrand>\\n        </MastheadMain>\\n        <MastheadContent>{headerToolbar}</MastheadContent>\\n      </Masthead>\\n    );\\n\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    const PageBreadcrumb = (\\n      <Breadcrumb>\\n        <BreadcrumbItem>Section home</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\" isActive>\\n          Section landing\\n        </BreadcrumbItem>\\n      </Breadcrumb>\\n    );\\n\\n    const panelContent = (\\n      <DrawerPanelContent isResizable>\\n        <DrawerHead>\\n          <span tabIndex={isDrawerExpanded ? 0 : -1}>\\n            drawer-panel\\n          </span>\\n          <DrawerActions>\\n            <DrawerCloseButton onClick={this.onDrawerClose} />\\n          </DrawerActions>\\n        </DrawerHead>\\n      </DrawerPanelContent>\\n    );\\n\\n    const Sidebar = <PageSidebar nav=\\\"Navigation\\\" />;\\n\\n    return (\\n      <Drawer isExpanded={isDrawerExpanded} isInline onExpand={this.onExpand}>\\n        <DrawerContent panelContent={panelContent}>\\n          <DrawerContentBody>\\n            <Page\\n              header={Header}\\n              breadcrumb={PageBreadcrumb}\\n              sidebar={Sidebar}\\n              tertiaryNav={PageNav}\\n              isManagedSidebar\\n              isTertiaryNavWidthLimited\\n              isBreadcrumbWidthLimited\\n              skipToContent={PageSkipToContent}\\n              mainContainerId={pageId}\\n              isTertiaryNavGrouped\\n              isBreadcrumbGrouped\\n              additionalGroupedContent={\\n                <PageSection variant={PageSectionVariants.light}>\\n                  <TextContent>\\n                    <Text component=\\\"h1\\\">Main title</Text>\\n                    <Text component=\\\"p\\\">\\n                      Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                      of its relative line height of 1.5.\\n                    </Text>\\n                  </TextContent>\\n                </PageSection>\\n              }\\n              groupProps={{\\n                sticky: 'top'\\n              }}\\n            >\\n              <PageSection>\\n                <Gallery hasGutter>\\n                  {Array.apply(0, Array(20)).map((x, i) => (\\n                    <GalleryItem key={i}>\\n                      <Card>\\n                        <CardBody>This is a card</CardBody>\\n                      </Card>\\n                    </GalleryItem>\\n                  ))}\\n                </Gallery>\\n              </PageSection>\\n            </Page>\\n          </DrawerContentBody>\\n        </DrawerContent>\\n      </Drawer>\\n    );\\n  }\\n}\",\n      \"title\": \"Sticky section group\",\n      \"lang\": \"js\",\n      \"isFullscreen\": true\n    }));\n  },\n  'Sticky section group (using PageHeader)': function StickySectionGroupUsingPageHeader(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      thumbnail: srcImportstickysectiongroupusingpageheader,\n      \"code\": \"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageHeader,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  PageHeaderTools,\\n  PageHeaderToolsGroup,\\n  PageHeaderToolsItem\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGrouped extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      activeItem: 0\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\\n\\n    const PageNav = (\\n      <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n        <NavList>\\n          <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n            System panel\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n            Policy\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n            Authentication\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n            Network services\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n            Server\\n          </NavItem>\\n        </NavList>\\n      </Nav>\\n    );\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n    const headerTools = (\\n      <PageHeaderTools>\\n        <PageHeaderToolsGroup\\n          visibility={{\\n            default: 'hidden',\\n            lg: 'visible'\\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\\n        >\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n              <CogIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n              <QuestionCircleIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <PageHeaderToolsGroup>\\n          <PageHeaderToolsItem\\n            visibility={{\\n              lg: 'hidden'\\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onKebabDropdownSelect}\\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n              isOpen={isKebabDropdownOpen}\\n              dropdownItems={kebabDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem\\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\\n              dropdownItems={userDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <Avatar src={imgAvatar} alt=\\\"Avatar image\\\" />\\n      </PageHeaderTools>\\n    );\\n\\n    const Header = (\\n      <PageHeader logo={<Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />} headerTools={headerTools} showNavToggle />\\n    );\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    const PageBreadcrumb = (\\n      <Breadcrumb>\\n        <BreadcrumbItem>Section home</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\" isActive>\\n          Section landing\\n        </BreadcrumbItem>\\n      </Breadcrumb>\\n    );\\n\\n    return (\\n      <React.Fragment>\\n        <Page\\n          header={Header}\\n          breadcrumb={PageBreadcrumb}\\n          tertiaryNav={PageNav}\\n          isManagedSidebar\\n          isTertiaryNavWidthLimited\\n          isBreadcrumbWidthLimited\\n          skipToContent={PageSkipToContent}\\n          mainContainerId={pageId}\\n          isTertiaryNavGrouped\\n          isBreadcrumbGrouped\\n          additionalGroupedContent={\\n            <PageSection variant={PageSectionVariants.light}>\\n              <TextContent>\\n                <Text component=\\\"h1\\\">Main title</Text>\\n                <Text component=\\\"p\\\">\\n                  Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                  of its relative line height of 1.5.\\n                </Text>\\n              </TextContent>\\n            </PageSection>\\n          }\\n          groupProps={{\\n            sticky: 'top'\\n          }}\\n        >\\n          <PageSection>\\n            <Gallery hasGutter>\\n              {Array.apply(0, Array(20)).map((x, i) => (\\n                <GalleryItem key={i}>\\n                  <Card>\\n                    <CardBody>This is a card</CardBody>\\n                  </Card>\\n                </GalleryItem>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n        </Page>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Sticky section group (using PageHeader)\",\n      \"lang\": \"js\",\n      \"isFullscreen\": true\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demo is provided becuase PageHeader and PageHeaderTools are still in use; however, going forward Masthead and Toolbar should be used to make headers rather than PageHeader and PageHeaderTools.\"));\n  },\n  'Sticky section group (alternate syntax and using PageHeader)': function StickySectionGroupAlternateSyntaxAndUsingPageHeader(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      thumbnail: srcImportstickysectiongroupalternatesyntaxandusingpageheader,\n      \"code\": \"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageHeader,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  PageGroup,\\n  PageBreadcrumb,\\n  PageNavigation,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  PageHeaderTools,\\n  PageHeaderToolsGroup,\\n  PageHeaderToolsItem\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGroupedAlt extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      activeItem: 0\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\\n\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n    const headerTools = (\\n      <PageHeaderTools>\\n        <PageHeaderToolsGroup\\n          visibility={{\\n            default: 'hidden',\\n            lg: 'visible'\\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\\n        >\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n              <CogIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n              <QuestionCircleIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <PageHeaderToolsGroup>\\n          <PageHeaderToolsItem\\n            visibility={{\\n              lg: 'hidden'\\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onKebabDropdownSelect}\\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n              isOpen={isKebabDropdownOpen}\\n              dropdownItems={kebabDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem\\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\\n              dropdownItems={userDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <Avatar src={imgAvatar} alt=\\\"Avatar image\\\" />\\n      </PageHeaderTools>\\n    );\\n\\n    const Header = (\\n      <PageHeader logo={<Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />} headerTools={headerTools} showNavToggle />\\n    );\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    return (\\n      <React.Fragment>\\n        <Page header={Header} isManagedSidebar skipToContent={PageSkipToContent} mainContainerId={pageId}>\\n          <PageGroup sticky=\\\"top\\\">\\n            <PageNavigation isWidthLimited>\\n              <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n                <NavList>\\n                  <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n                    System panel\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n                    Policy\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n                    Authentication\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n                    Network services\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n                    Server\\n                  </NavItem>\\n                </NavList>\\n              </Nav>\\n            </PageNavigation>\\n            <PageBreadcrumb>\\n              <Breadcrumb>\\n                <BreadcrumbItem>Section home</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\" isActive>\\n                  Section landing\\n                </BreadcrumbItem>\\n              </Breadcrumb>\\n            </PageBreadcrumb>\\n            <PageSection variant={PageSectionVariants.light}>\\n              <TextContent>\\n                <Text component=\\\"h1\\\">Main title</Text>\\n                <Text component=\\\"p\\\">\\n                  Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                  of its relative line height of 1.5.\\n                </Text>\\n              </TextContent>\\n            </PageSection>{' '}\\n          </PageGroup>\\n          <PageSection>\\n            <Gallery hasGutter>\\n              {Array.apply(0, Array(20)).map((x, i) => (\\n                <GalleryItem key={i}>\\n                  <Card>\\n                    <CardBody>This is a card</CardBody>\\n                  </Card>\\n                </GalleryItem>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n        </Page>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Sticky section group (alternate syntax and using PageHeader)\",\n      \"lang\": \"js\",\n      \"isFullscreen\": true\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"Please see \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"#sticky-section-group-using-pageheader\"\n    }, \"this\"), \" note regarding PageHeader.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"ul\", {\n    \"className\": \"ws-ul\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"All but the last example set the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"isManagedSidebar\"), \" prop on the Page component to have the sidebar automatically close for smaller screen widths. You can also manually control this behavior by not adding the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"isManagedSidebar\"), \" prop and instead:\"), /*#__PURE__*/React.createElement(\"ol\", {\n    \"className\": \"ws-ol\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"Add an onNavToggle callback to PageHeader\"), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"Pass a boolean into the isNavOpen prop to PageSidebar\")), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"The last example demonstrates this.\")), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"To make the page take up the full height, it is recommended to set the height of all ancestor elements up to the page component to \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"100%\")))), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"layouts\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Layouts\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"This demonstrates a variety of navigation patterns in the context of a full page layout. These can be used as a basis for choosing the most appropriate page template for your application.\"), React.createElement(pageData.examples[\"Sticky section group\"]), React.createElement(pageData.examples[\"Sticky section group (using PageHeader)\"]), React.createElement(pageData.examples[\"Sticky section group (alternate syntax and using PageHeader)\"]));\n};\n\nComponent.displayName = 'ComponentsPageReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","css","BellIcon","CogIcon","HelpIcon","QuestionCircleIcon","imgBrand","imgAvatar","BarsIcon","AttentionBellIcon","LightbulbIcon","srcImportdefaultnav","srcImportexpandablenav","srcImportgroupednav","srcImporthorizontalnav","srcImportlegacylightnav","srcImportmanualnav","srcImportstickysectiongroupalternatesyntaxandusingpageheader","srcImportstickysectiongroupalternatesyntax","srcImportstickysectiongroupusingpageheader","srcImportstickysectiongroup","srcImporttertiarynav","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/page/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { css } from '@patternfly/react-styles';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\nimport imgAvatar from '@patternfly/react-core/src/components/Avatar/examples/avatarImg.svg';\nimport BarsIcon from '@patternfly/react-icons/dist/esm/icons/bars-icon';\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\nimport LightbulbIcon from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\nimport srcImportdefaultnav from './react-demos/default-nav.png';\nimport srcImportexpandablenav from './react-demos/expandable-nav.png';\nimport srcImportgroupednav from './react-demos/grouped-nav.png';\nimport srcImporthorizontalnav from './react-demos/horizontal-nav.png';\nimport srcImportlegacylightnav from './react-demos/legacylight-nav.png';\nimport srcImportmanualnav from './react-demos/manual-nav.png';\nimport srcImportstickysectiongroupalternatesyntaxandusingpageheader from './react-demos/sticky-section-group-alternate-syntax-and-using-pageheader.png';\nimport srcImportstickysectiongroupalternatesyntax from './react-demos/sticky-section-group-alternate-syntax.png';\nimport srcImportstickysectiongroupusingpageheader from './react-demos/sticky-section-group-using-pageheader.png';\nimport srcImportstickysectiongroup from './react-demos/sticky-section-group.png';\nimport srcImporttertiarynav from './react-demos/tertiary-nav.png';\nconst pageData = {\n  \"id\": \"Page\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/page/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Page/Page.md\",\n  \"fullscreenExamples\": [\n    \"Sticky section group\",\n    \"Sticky section group (using PageHeader)\",\n    \"Sticky section group (alternate syntax and using PageHeader)\"\n  ]\n};\npageData.liveContext = {\n  css,\n  BellIcon,\n  CogIcon,\n  HelpIcon,\n  QuestionCircleIcon,\n  imgBrand,\n  imgAvatar,\n  BarsIcon,\n  AttentionBellIcon,\n  LightbulbIcon\n};\npageData.examples = {\n  'Sticky section group': props => \n    <Example {...pageData} {...props} thumbnail={srcImportstickysectiongroup} {...{\"code\":\"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Checkbox,\\n  Divider,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Masthead,\\n  MastheadBrand,\\n  MastheadContent,\\n  MastheadMain,\\n  MastheadToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  PageToggleButton,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  Toolbar,\\n  ToolbarContent,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  Drawer,\\n  DrawerPanelContent,\\n  DrawerContent,\\n  DrawerContentBody,\\n  DrawerHead,\\n  DrawerActions,\\n  DrawerCloseButton,\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport AttentionBellIcon from '@patternfly/react-icons/dist/esm/icons/attention-bell-icon';\\nimport LightbulbIcon from '@patternfly/react-icons/dist/esm/icons/lightbulb-icon';\\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGrouped extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      isFullKebabDropdownOpen: false,\\n      activeItem: 0,\\n      isDrawerExpanded: false\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n\\n    this.onFullKebabToggle = isFullKebabDropdownOpen => {\\n      this.setState({\\n        isFullKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onFullKebabSelect = () => {\\n      this.setState({\\n        isFullKebabDropdownOpen: !this.state.isFullKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onDrawerToggle = () => {\\n      const isDrawerExpanded = !this.state.isDrawerExpanded;\\n      this.setState({\\n        isDrawerExpanded\\n      });\\n    };\\n\\n    this.onDrawerClose = () => {\\n      this.setState({\\n        isDrawerExpanded: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem, isFullKebabDropdownOpen, isDrawerExpanded } = this.state;\\n\\n    const PageNav = (\\n      <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n        <NavList>\\n          <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n            System panel\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n            Policy\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n            Authentication\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n            Network services\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n            Server\\n          </NavItem>\\n        </NavList>\\n      </Nav>\\n    );\\n\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n\\n    const fullKebabItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>,\\n      <Divider key=\\\"divider\\\" />,\\n      <DropdownItem key=\\\"kebab-1\\\">\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"kebab-2\\\">\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n\\n    const headerToolbar = (\\n      <Toolbar id=\\\"toolbar\\\" isFullHeight isStatic>\\n        <ToolbarContent>\\n          <ToolbarGroup\\n            variant=\\\"icon-button-group\\\"\\n            alignment={{ default: 'alignRight' }}\\n            spacer={{ default: 'spacerNone', md: 'spacerMd' }}\\n          >\\n            <ToolbarItem>\\n              <Button aria-label=\\\"Toggle drawer\\\" variant={ButtonVariant.plain} onClick={this.onDrawerToggle}>\\n                <LightbulbIcon color={isDrawerExpanded ? 'yellow' : 'currentColor'} />\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarItem>\\n              <Button aria-label=\\\"Notifications\\\" variant={ButtonVariant.plain}>\\n                <AttentionBellIcon />\\n              </Button>\\n            </ToolbarItem>\\n            <ToolbarGroup variant=\\\"icon-button-group\\\" visibility={{ default: 'hidden', lg: 'visible' }}>\\n              <ToolbarItem>\\n                <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n                  <CogIcon />\\n                </Button>\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n                  <QuestionCircleIcon />\\n                </Button>\\n              </ToolbarItem>\\n            </ToolbarGroup>\\n            <ToolbarItem visibility={{ default: 'hidden', md: 'visible', lg: 'hidden' }}>\\n              <Dropdown\\n                isPlain\\n                position=\\\"right\\\"\\n                onSelect={this.onKebabDropdownSelect}\\n                toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n                isOpen={isKebabDropdownOpen}\\n                dropdownItems={kebabDropdownItems}\\n              />\\n            </ToolbarItem>\\n            <ToolbarItem visibility={{ default: 'visible', md: 'hidden', lg: 'hidden', xl: 'hidden', '2xl': 'hidden' }}>\\n              <Dropdown\\n                isPlain\\n                position=\\\"right\\\"\\n                onSelect={this.onFullKebabSelect}\\n                toggle={<KebabToggle onToggle={this.onFullKebabToggle} />}\\n                isOpen={isFullKebabDropdownOpen}\\n                dropdownItems={fullKebabItems}\\n              />\\n            </ToolbarItem>\\n          </ToolbarGroup>\\n          <ToolbarItem visibility={{ default: 'hidden', md: 'visible' }}>\\n            <Dropdown\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={\\n                <DropdownToggle icon={<Avatar src={imgAvatar} alt=\\\"Avatar\\\" />} onToggle={this.onDropdownToggle}>\\n                  John Smith\\n                </DropdownToggle>\\n              }\\n              dropdownItems={userDropdownItems}\\n            />\\n          </ToolbarItem>\\n        </ToolbarContent>\\n      </Toolbar>\\n    );\\n\\n    const Header = (\\n      <Masthead>\\n        <MastheadToggle>\\n          <PageToggleButton variant=\\\"plain\\\" aria-label=\\\"Global navigation\\\">\\n            <BarsIcon />\\n          </PageToggleButton>\\n        </MastheadToggle>\\n        <MastheadMain>\\n          <MastheadBrand>\\n            <Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />\\n          </MastheadBrand>\\n        </MastheadMain>\\n        <MastheadContent>{headerToolbar}</MastheadContent>\\n      </Masthead>\\n    );\\n\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    const PageBreadcrumb = (\\n      <Breadcrumb>\\n        <BreadcrumbItem>Section home</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\" isActive>\\n          Section landing\\n        </BreadcrumbItem>\\n      </Breadcrumb>\\n    );\\n\\n    const panelContent = (\\n      <DrawerPanelContent isResizable>\\n        <DrawerHead>\\n          <span tabIndex={isDrawerExpanded ? 0 : -1}>\\n            drawer-panel\\n          </span>\\n          <DrawerActions>\\n            <DrawerCloseButton onClick={this.onDrawerClose} />\\n          </DrawerActions>\\n        </DrawerHead>\\n      </DrawerPanelContent>\\n    );\\n\\n    const Sidebar = <PageSidebar nav=\\\"Navigation\\\" />;\\n\\n    return (\\n      <Drawer isExpanded={isDrawerExpanded} isInline onExpand={this.onExpand}>\\n        <DrawerContent panelContent={panelContent}>\\n          <DrawerContentBody>\\n            <Page\\n              header={Header}\\n              breadcrumb={PageBreadcrumb}\\n              sidebar={Sidebar}\\n              tertiaryNav={PageNav}\\n              isManagedSidebar\\n              isTertiaryNavWidthLimited\\n              isBreadcrumbWidthLimited\\n              skipToContent={PageSkipToContent}\\n              mainContainerId={pageId}\\n              isTertiaryNavGrouped\\n              isBreadcrumbGrouped\\n              additionalGroupedContent={\\n                <PageSection variant={PageSectionVariants.light}>\\n                  <TextContent>\\n                    <Text component=\\\"h1\\\">Main title</Text>\\n                    <Text component=\\\"p\\\">\\n                      Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                      of its relative line height of 1.5.\\n                    </Text>\\n                  </TextContent>\\n                </PageSection>\\n              }\\n              groupProps={{\\n                sticky: 'top'\\n              }}\\n            >\\n              <PageSection>\\n                <Gallery hasGutter>\\n                  {Array.apply(0, Array(20)).map((x, i) => (\\n                    <GalleryItem key={i}>\\n                      <Card>\\n                        <CardBody>This is a card</CardBody>\\n                      </Card>\\n                    </GalleryItem>\\n                  ))}\\n                </Gallery>\\n              </PageSection>\\n            </Page>\\n          </DrawerContentBody>\\n        </DrawerContent>\\n      </Drawer>\\n    );\\n  }\\n}\",\"title\":\"Sticky section group\",\"lang\":\"js\",\"isFullscreen\":true}}>\n      \n    </Example>,\n  'Sticky section group (using PageHeader)': props => \n    <Example {...pageData} {...props} thumbnail={srcImportstickysectiongroupusingpageheader} {...{\"code\":\"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageHeader,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  PageHeaderTools,\\n  PageHeaderToolsGroup,\\n  PageHeaderToolsItem\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGrouped extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      activeItem: 0\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\\n\\n    const PageNav = (\\n      <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n        <NavList>\\n          <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n            System panel\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n            Policy\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n            Authentication\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n            Network services\\n          </NavItem>\\n          <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n            Server\\n          </NavItem>\\n        </NavList>\\n      </Nav>\\n    );\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n    const headerTools = (\\n      <PageHeaderTools>\\n        <PageHeaderToolsGroup\\n          visibility={{\\n            default: 'hidden',\\n            lg: 'visible'\\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\\n        >\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n              <CogIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n              <QuestionCircleIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <PageHeaderToolsGroup>\\n          <PageHeaderToolsItem\\n            visibility={{\\n              lg: 'hidden'\\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onKebabDropdownSelect}\\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n              isOpen={isKebabDropdownOpen}\\n              dropdownItems={kebabDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem\\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\\n              dropdownItems={userDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <Avatar src={imgAvatar} alt=\\\"Avatar image\\\" />\\n      </PageHeaderTools>\\n    );\\n\\n    const Header = (\\n      <PageHeader logo={<Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />} headerTools={headerTools} showNavToggle />\\n    );\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    const PageBreadcrumb = (\\n      <Breadcrumb>\\n        <BreadcrumbItem>Section home</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n        <BreadcrumbItem to=\\\"#\\\" isActive>\\n          Section landing\\n        </BreadcrumbItem>\\n      </Breadcrumb>\\n    );\\n\\n    return (\\n      <React.Fragment>\\n        <Page\\n          header={Header}\\n          breadcrumb={PageBreadcrumb}\\n          tertiaryNav={PageNav}\\n          isManagedSidebar\\n          isTertiaryNavWidthLimited\\n          isBreadcrumbWidthLimited\\n          skipToContent={PageSkipToContent}\\n          mainContainerId={pageId}\\n          isTertiaryNavGrouped\\n          isBreadcrumbGrouped\\n          additionalGroupedContent={\\n            <PageSection variant={PageSectionVariants.light}>\\n              <TextContent>\\n                <Text component=\\\"h1\\\">Main title</Text>\\n                <Text component=\\\"p\\\">\\n                  Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                  of its relative line height of 1.5.\\n                </Text>\\n              </TextContent>\\n            </PageSection>\\n          }\\n          groupProps={{\\n            sticky: 'top'\\n          }}\\n        >\\n          <PageSection>\\n            <Gallery hasGutter>\\n              {Array.apply(0, Array(20)).map((x, i) => (\\n                <GalleryItem key={i}>\\n                  <Card>\\n                    <CardBody>This is a card</CardBody>\\n                  </Card>\\n                </GalleryItem>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n        </Page>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Sticky section group (using PageHeader)\",\"lang\":\"js\",\"isFullscreen\":true}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demo is provided becuase PageHeader and PageHeaderTools are still in use; however, going forward Masthead and Toolbar should be used to make headers rather than PageHeader and PageHeaderTools.`}\n      </p>\n    </Example>,\n  'Sticky section group (alternate syntax and using PageHeader)': props => \n    <Example {...pageData} {...props} thumbnail={srcImportstickysectiongroupalternatesyntaxandusingpageheader} {...{\"code\":\"import React from 'react';\\nimport {\\n  Avatar,\\n  Brand,\\n  Breadcrumb,\\n  BreadcrumbItem,\\n  Button,\\n  ButtonVariant,\\n  Card,\\n  CardBody,\\n  Dropdown,\\n  DropdownGroup,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  Gallery,\\n  GalleryItem,\\n  KebabToggle,\\n  Nav,\\n  NavItem,\\n  NavList,\\n  Page,\\n  PageHeader,\\n  PageSection,\\n  PageSectionVariants,\\n  PageSidebar,\\n  PageGroup,\\n  PageBreadcrumb,\\n  PageNavigation,\\n  SkipToContent,\\n  TextContent,\\n  Text,\\n  PageHeaderTools,\\n  PageHeaderToolsGroup,\\n  PageHeaderToolsItem\\n} from '@patternfly/react-core';\\nimport { css } from '@patternfly/react-styles';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\nimport CogIcon from '@patternfly/react-icons/dist/esm/icons/cog-icon';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\nimport QuestionCircleIcon from '@patternfly/react-icons/dist/esm/icons/question-circle-icon';\\nimport imgBrand from './imgBrand.svg';\\nimport imgAvatar from './imgAvatar.svg';\\n\\nclass PageLayoutGroupedAlt extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isDropdownOpen: false,\\n      isKebabDropdownOpen: false,\\n      activeItem: 0\\n    };\\n    this.onDropdownToggle = isDropdownOpen => {\\n      this.setState({\\n        isDropdownOpen\\n      });\\n    };\\n\\n    this.onDropdownSelect = event => {\\n      this.setState({\\n        isDropdownOpen: !this.state.isDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownToggle = isKebabDropdownOpen => {\\n      this.setState({\\n        isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onKebabDropdownSelect = event => {\\n      this.setState({\\n        isKebabDropdownOpen: !this.state.isKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onNavSelect = result => {\\n      this.setState({\\n        activeItem: result.itemId\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isDropdownOpen, isKebabDropdownOpen, activeItem } = this.state;\\n\\n    const kebabDropdownItems = [\\n      <DropdownItem>\\n        <CogIcon /> Settings\\n      </DropdownItem>,\\n      <DropdownItem>\\n        <HelpIcon /> Help\\n      </DropdownItem>\\n    ];\\n    const userDropdownItems = [\\n      <DropdownGroup key=\\\"group 2\\\">\\n        <DropdownItem key=\\\"group 2 profile\\\">My profile</DropdownItem>\\n        <DropdownItem key=\\\"group 2 user\\\" component=\\\"button\\\">\\n          User management\\n        </DropdownItem>\\n        <DropdownItem key=\\\"group 2 logout\\\">Logout</DropdownItem>\\n      </DropdownGroup>\\n    ];\\n    const headerTools = (\\n      <PageHeaderTools>\\n        <PageHeaderToolsGroup\\n          visibility={{\\n            default: 'hidden',\\n            lg: 'visible'\\n          }} /** the settings and help icon buttons are only visible on desktop sizes and replaced by a kebab dropdown for other sizes */\\n        >\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Settings actions\\\" variant={ButtonVariant.plain}>\\n              <CogIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem>\\n            <Button aria-label=\\\"Help actions\\\" variant={ButtonVariant.plain}>\\n              <QuestionCircleIcon />\\n            </Button>\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <PageHeaderToolsGroup>\\n          <PageHeaderToolsItem\\n            visibility={{\\n              lg: 'hidden'\\n            }} /** this kebab dropdown replaces the icon buttons and is hidden for desktop sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onKebabDropdownSelect}\\n              toggle={<KebabToggle onToggle={this.onKebabDropdownToggle} />}\\n              isOpen={isKebabDropdownOpen}\\n              dropdownItems={kebabDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n          <PageHeaderToolsItem\\n            visibility={{ default: 'hidden', md: 'visible' }} /** this user dropdown is hidden on mobile sizes */\\n          >\\n            <Dropdown\\n              isPlain\\n              position=\\\"right\\\"\\n              onSelect={this.onDropdownSelect}\\n              isOpen={isDropdownOpen}\\n              toggle={<DropdownToggle onToggle={this.onDropdownToggle}>John Smith</DropdownToggle>}\\n              dropdownItems={userDropdownItems}\\n            />\\n          </PageHeaderToolsItem>\\n        </PageHeaderToolsGroup>\\n        <Avatar src={imgAvatar} alt=\\\"Avatar image\\\" />\\n      </PageHeaderTools>\\n    );\\n\\n    const Header = (\\n      <PageHeader logo={<Brand src={imgBrand} alt=\\\"Patternfly Logo\\\" />} headerTools={headerTools} showNavToggle />\\n    );\\n    const pageId = 'main-content-page-layout-tertiary-nav';\\n    const PageSkipToContent = <SkipToContent href={`#${pageId}`}>Skip to content</SkipToContent>;\\n\\n    return (\\n      <React.Fragment>\\n        <Page header={Header} isManagedSidebar skipToContent={PageSkipToContent} mainContainerId={pageId}>\\n          <PageGroup sticky=\\\"top\\\">\\n            <PageNavigation isWidthLimited>\\n              <Nav variant=\\\"tertiary\\\" onSelect={this.onNavSelect} aria-label=\\\"Nav\\\">\\n                <NavList>\\n                  <NavItem href=\\\"#\\\" itemId={0} isActive={activeItem === 0}>\\n                    System panel\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={1} isActive={activeItem === 1}>\\n                    Policy\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={2} isActive={activeItem === 2}>\\n                    Authentication\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={3} isActive={activeItem === 3}>\\n                    Network services\\n                  </NavItem>\\n                  <NavItem href=\\\"#\\\" itemId={4} isActive={activeItem === 4}>\\n                    Server\\n                  </NavItem>\\n                </NavList>\\n              </Nav>\\n            </PageNavigation>\\n            <PageBreadcrumb>\\n              <Breadcrumb>\\n                <BreadcrumbItem>Section home</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\">Section title</BreadcrumbItem>\\n                <BreadcrumbItem to=\\\"#\\\" isActive>\\n                  Section landing\\n                </BreadcrumbItem>\\n              </Breadcrumb>\\n            </PageBreadcrumb>\\n            <PageSection variant={PageSectionVariants.light}>\\n              <TextContent>\\n                <Text component=\\\"h1\\\">Main title</Text>\\n                <Text component=\\\"p\\\">\\n                  Body text should be Overpass Regular at 16px. It should have leading of 24px because <br />\\n                  of its relative line height of 1.5.\\n                </Text>\\n              </TextContent>\\n            </PageSection>{' '}\\n          </PageGroup>\\n          <PageSection>\\n            <Gallery hasGutter>\\n              {Array.apply(0, Array(20)).map((x, i) => (\\n                <GalleryItem key={i}>\\n                  <Card>\\n                    <CardBody>This is a card</CardBody>\\n                  </Card>\\n                </GalleryItem>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n        </Page>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Sticky section group (alternate syntax and using PageHeader)\",\"lang\":\"js\",\"isFullscreen\":true}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`Please see `}\n                <a href=\"#sticky-section-group-using-pageheader\">{`this`}</a>\n        {` note regarding PageHeader.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <ul {...{\"className\":\"ws-ul\"}}>\n      <li {...{\"className\":\"ws-li\"}}>\n        <p {...{\"className\":\"ws-p\"}}>\n          {`All but the last example set the `}\n          <code {...{\"className\":\"ws-code\"}}>\n            {`isManagedSidebar`}\n          </code>\n          {` prop on the Page component to have the sidebar automatically close for smaller screen widths. You can also manually control this behavior by not adding the `}\n          <code {...{\"className\":\"ws-code\"}}>\n            {`isManagedSidebar`}\n          </code>\n          {` prop and instead:`}\n        </p>\n        <ol {...{\"className\":\"ws-ol\"}}>\n          <li {...{\"className\":\"ws-li\"}}>\n            {`Add an onNavToggle callback to PageHeader`}\n          </li>\n          <li {...{\"className\":\"ws-li\"}}>\n            {`Pass a boolean into the isNavOpen prop to PageSidebar`}\n          </li>\n        </ol>\n        <p {...{\"className\":\"ws-p\"}}>\n          {`The last example demonstrates this.`}\n        </p>\n      </li>\n      <li {...{\"className\":\"ws-li\"}}>\n        <p {...{\"className\":\"ws-p\"}}>\n          {`To make the page take up the full height, it is recommended to set the height of all ancestor elements up to the page component to `}\n          <code {...{\"className\":\"ws-code\"}}>\n            {`100%`}\n          </code>\n        </p>\n      </li>\n    </ul>\n    <AutoLinkHeader {...{\"id\":\"layouts\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Layouts`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`This demonstrates a variety of navigation patterns in the context of a full page layout. These can be used as a basis for choosing the most appropriate page template for your application.`}\n    </p>\n    {React.createElement(pageData.examples[\"Sticky section group\"])}\n    {React.createElement(pageData.examples[\"Sticky section group (using PageHeader)\"])}\n    {React.createElement(pageData.examples[\"Sticky section group (alternate syntax and using PageHeader)\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsPageReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,OAAP,MAAoB,iDAApB;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,kBAAP,MAA+B,6DAA/B;AACA,OAAOC,QAAP,MAAqB,2DAArB;AACA,OAAOC,SAAP,MAAsB,qEAAtB;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,iBAAP,MAA8B,4DAA9B;AACA,OAAOC,aAAP,MAA0B,uDAA1B;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,OAAOC,mBAAP,MAAgC,+BAAhC;AACA,OAAOC,sBAAP,MAAmC,kCAAnC;AACA,OAAOC,uBAAP,MAAoC,mCAApC;AACA,OAAOC,kBAAP,MAA+B,8BAA/B;AACA,OAAOC,4DAAP,MAAyE,8EAAzE;AACA,OAAOC,0CAAP,MAAuD,yDAAvD;AACA,OAAOC,0CAAP,MAAuD,yDAAvD;AACA,OAAOC,2BAAP,MAAwC,wCAAxC;AACA,OAAOC,oBAAP,MAAiC,gCAAjC;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,MADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,8BAJO;EAKf,cAAc,mHALC;EAMf,sBAAsB,CACpB,sBADoB,EAEpB,yCAFoB,EAGpB,8DAHoB;AANP,CAAjB;AAYAA,QAAQ,CAACC,WAAT,GAAuB;EACrBtB,GAAG,EAAHA,GADqB;EAErBC,QAAQ,EAARA,QAFqB;EAGrBC,OAAO,EAAPA,OAHqB;EAIrBC,QAAQ,EAARA,QAJqB;EAKrBC,kBAAkB,EAAlBA,kBALqB;EAMrBC,QAAQ,EAARA,QANqB;EAOrBC,SAAS,EAATA,SAPqB;EAQrBC,QAAQ,EAARA,QARqB;EASrBC,iBAAiB,EAAjBA,iBATqB;EAUrBC,aAAa,EAAbA;AAVqB,CAAvB;AAYAY,QAAQ,CAACE,QAAT,GAAoB;EAClB,wBAAwB,4BAAAC,KAAK;IAAA,oBAC3B,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAkC,SAAS,EAAEL,2BAA7C;MAA+E,QAAO,41VAAtF;MAAm7V,SAAQ,sBAA37V;MAAk9V,QAAO,IAAz9V;MAA89V,gBAAe;IAA7+V,GAD2B;EAAA,CADX;EAKlB,2CAA2C,2CAAAK,KAAK;IAAA,oBAC9C,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAkC,SAAS,EAAEN,0CAA7C;MAA8F,QAAO,4oOAArG;MAAkvO,SAAQ,yCAA1vO;MAAoyO,QAAO,IAA3yO;MAAgzO,gBAAe;IAA/zO,iBAEE;MAAQ,aAAY;IAApB,2MAFF,CAD8C;EAAA,CAL9B;EAYlB,gEAAgE,6DAAAM,KAAK;IAAA,oBACnE,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAkC,SAAS,EAAER,4DAA7C;MAAgH,QAAO,qqOAAvH;MAA6xO,SAAQ,8DAAryO;MAAo2O,QAAO,IAA32O;MAAg3O,gBAAe;IAA/3O,iBAEE;MAAQ,aAAY;IAApB,+BAEU;MAAG,IAAI,EAAC;IAAR,UAFV,gCAFF,CADmE;EAAA;AAZnD,CAApB;;AAuBA,IAAMS,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE;IAAS,aAAY;EAArB,gBACE;IAAS,aAAY;EAArB,gBACE;IAAQ,aAAY;EAApB,qDAEE;IAAW,aAAY;EAAvB,sBAFF,gLAME;IAAW,aAAY;EAAvB,sBANF,uBADF,eAYE;IAAS,aAAY;EAArB,gBACE;IAAS,aAAY;EAArB,+CADF,eAIE;IAAS,aAAY;EAArB,2DAJF,CAZF,eAoBE;IAAQ,aAAY;EAApB,yCApBF,CADF,eAyBE;IAAS,aAAY;EAArB,gBACE;IAAQ,aAAY;EAApB,uJAEE;IAAW,aAAY;EAAvB,UAFF,CADF,CAzBF,CADF,eAmCE,oBAAC,cAAD;IAAqB,MAAK,SAA1B;IAAoC,QAAO,IAA3C;IAAgD,aAAY;EAA5D,aAnCF,eAsCE;IAAQ,aAAY;EAApB,iMAtCF,EAyCG9B,KAAK,CAAC+B,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,sBAAlB,CAApB,CAzCH,EA0CG5B,KAAK,CAAC+B,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,yCAAlB,CAApB,CA1CH,EA2CG5B,KAAK,CAAC+B,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,8DAAlB,CAApB,CA3CH,CADgB;AAAA,CAAlB;;AA+CAE,SAAS,CAACE,WAAV,GAAwB,8BAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}