{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport srcImportbasic from './react/basic.png';\nimport srcImportgrouped from './react/grouped.png';\nvar pageData = {\n  \"id\": \"Notification drawer\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/notification-drawer/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NotificationDrawer/examples/NotificationDrawer.md\",\n  \"propComponents\": [{\n    \"name\": \"NotificationDrawer\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the notification drawer\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the notification drawer\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerBody\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the body of the notification drawer\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the notification drawer body\",\n      \"defaultValue\": \"''\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerHeader\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the drawer\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes for notification drawer header.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"closeButtonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Adds custom accessible text to the notification drawer close button.\",\n      \"defaultValue\": \"'Close'\"\n    }, {\n      \"name\": \"count\",\n      \"type\": \"number\",\n      \"description\": \"Notification drawer heading count\"\n    }, {\n      \"name\": \"customText\",\n      \"type\": \"string\",\n      \"description\": \"Notification drawer heading custom text which can be used instead of providing count/unreadText\"\n    }, {\n      \"name\": \"onClose\",\n      \"type\": \"() => void\",\n      \"description\": \"Callback for when close button is clicked\"\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string\",\n      \"description\": \"Notification drawer heading title\",\n      \"defaultValue\": \"'Notifications'\"\n    }, {\n      \"name\": \"unreadText\",\n      \"type\": \"string\",\n      \"description\": \"Notification drawer heading unread text used in combination with a count\",\n      \"defaultValue\": \"'unread'\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerGroup\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the group\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the group\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"count\",\n      \"type\": \"number\",\n      \"description\": \"Notification drawer group count\",\n      \"required\": true\n    }, {\n      \"name\": \"isExpanded\",\n      \"type\": \"boolean\",\n      \"description\": \"Adds styling to the group to indicate expanded state\",\n      \"required\": true\n    }, {\n      \"name\": \"isRead\",\n      \"type\": \"boolean\",\n      \"description\": \"Adds styling to the group to indicate whether it has been read\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onExpand\",\n      \"type\": \"(event: any, value: boolean) => void\",\n      \"description\": \"Callback for when group button is clicked to expand\",\n      \"defaultValue\": \"(event: any, expanded: boolean) => undefined as any\"\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string | React.ReactNode\",\n      \"description\": \"Notification drawer group title\",\n      \"required\": true\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n    }, {\n      \"name\": \"truncateTitle\",\n      \"type\": \"number\",\n      \"description\": \"Truncate title to number of lines\",\n      \"defaultValue\": \"0\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerGroupList\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the notification drawer list body\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the notification drawer list body\",\n      \"defaultValue\": \"''\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerList\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the notification drawer list body\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the notification drawer list body\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"isHidden\",\n      \"type\": \"boolean\",\n      \"description\": \"Adds styling to the notification drawer list to indicate expand/hide state\",\n      \"defaultValue\": \"false\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerListItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the list item\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the list item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"isHoverable\",\n      \"type\": \"boolean\",\n      \"description\": \"Modifies the list item to include hover styles on :hover\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"isRead\",\n      \"type\": \"boolean\",\n      \"description\": \"Adds styling to the list item to indicate it has been read\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: any) => void\",\n      \"description\": \"Callback for when a list item is clicked\",\n      \"defaultValue\": \"(event: React.MouseEvent) => undefined as any\"\n    }, {\n      \"name\": \"tabIndex\",\n      \"type\": \"number\",\n      \"description\": \"Tab index for the list item\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"variant\",\n      \"type\": \"'default' | 'success' | 'danger' | 'warning' | 'info'\",\n      \"description\": \"Variant indicates the severity level\",\n      \"defaultValue\": \"'default'\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerListItemBody\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the list item body\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the list item body\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"timestamp\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"List item timestamp\"\n    }]\n  }, {\n    \"name\": \"NotificationDrawerListItemHeader\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Actions rendered inside the notification drawer list item header\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes for notification drawer list item header.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"icon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Add custom icon for notification drawer list item header\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"srTitle\",\n      \"type\": \"string\",\n      \"description\": \"Notification drawer list item header screen reader title\"\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string\",\n      \"description\": \"Notification drawer list item title\",\n      \"required\": true\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n    }, {\n      \"name\": \"truncateTitle\",\n      \"type\": \"number\",\n      \"description\": \"Truncate title to number of lines\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"variant\",\n      \"type\": \"'success' | 'danger' | 'warning' | 'info' | 'default'\",\n      \"description\": \"Variant indicates the severity level\",\n      \"defaultValue\": \"'default'\"\n    }]\n  }],\n  \"beta\": true,\n  \"cssPrefix\": [\"pf-c-notification-drawer\"],\n  \"examples\": [\"Basic\", \"Groups\", \"Lightweight\"]\n};\npageData.liveContext = {\n  SearchIcon: SearchIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      thumbnail: srcImportbasic,\n      \"code\": \"import React from 'react';\\nimport {\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  DropdownDirection,\\n  DropdownSeparator,\\n  KebabToggle,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\n\\nclass BasicNotificationDrawer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: new Array(6).fill(false),\\n      isDrawerOpen: true\\n    };\\n    this.onDrawerClose = () => {\\n      this.setState({\\n        isDrawerOpen: false\\n      });\\n    };\\n    this.onToggle = index => isOpen => {\\n      newState = [...this.state.isOpen.slice(0, index), isOpen, ...this.state.isOpen.slice(index + 1)];\\n      this.setState({ isOpen: newState });\\n    };\\n    this.onSelect = event => {\\n      this.setState({ isOpen: new Array(6).fill(false) });\\n    };\\n  }\\n\\n  render() {\\n    const [isOpen0, isOpen1, isOpen2, isOpen3, isOpen4, isOpen5, isOpen6] = this.state.isOpen;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled link\\n      </DropdownItem>\\n    ];\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader count={3} onClose={this.onDrawerClose}>\\n          <Dropdown\\n            onSelect={this.onSelect}\\n            toggle={<KebabToggle onToggle={this.onToggle(0)} id=\\\"toggle-id-0\\\" />}\\n            isOpen={isOpen0}\\n            isPlain\\n            dropdownItems={dropdownItems}\\n            id=\\\"notification-0\\\"\\n            position={DropdownPosition.right}\\n          />\\n        </NotificationDrawerHeader>\\n        <NotificationDrawerBody>\\n          <NotificationDrawerList>\\n            <NotificationDrawerListItem variant=\\\"info\\\">\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"info\\\"\\n                title=\\\"Unread info notification title\\\"\\n                srTitle=\\\"Info notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(1)} id=\\\"toggle-id-1\\\" />}\\n                  isOpen={isOpen1}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-1\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                This is an info notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"danger\\\">\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"danger\\\"\\n                title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                srTitle=\\\"Danger notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(2)} id=\\\"toggle-id-2\\\" />}\\n                  isOpen={isOpen2}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-2\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                This is a danger notification description. This is a long description to show how the title will wrap if\\n                it is long and wraps to multiple lines.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"danger\\\">\\n              <NotificationDrawerListItemHeader\\n                truncateTitle={1}\\n                variant=\\\"danger\\\"\\n                title=\\\"Unread danger notification title. This is a long title to show how the title will be truncated if it is long and will be shown in a single line.\\\"\\n                srTitle=\\\"Danger notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(3)} id=\\\"toggle-id-3\\\" />}\\n                  isOpen={isOpen3}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-3\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                This is a danger notification description. This is a long description to show how the title will wrap if\\n                it is long and wraps to multiple lines.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"warning\\\"\\n                title=\\\"Read warning notification title\\\"\\n                srTitle=\\\"Warning notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(4)} id=\\\"toggle-id-4\\\" />}\\n                  isOpen={isOpen4}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-4\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                This is a warning notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"success\\\"\\n                title=\\\"Read success notification title\\\"\\n                srTitle=\\\"Success notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  direction={DropdownDirection.up}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(5)} id=\\\"toggle-id-5\\\" />}\\n                  isOpen={isOpen5}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-5\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                This is a success notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem isRead>\\n              <NotificationDrawerListItemHeader title=\\\"Read (default) notification title\\\" srTitle=\\\"notification:\\\">\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(6)} id=\\\"toggle-id-6\\\" />}\\n                  isOpen={isOpen6}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-6\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"35 minutes ago\\\">\\n                This is a default notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n          </NotificationDrawerList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Groups': function Groups(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Button,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  DropdownDirection,\\n  DropdownSeparator,\\n  EmptyState,\\n  EmptyStateBody,\\n  EmptyStateIcon,\\n  EmptyStatePrimary,\\n  KebabToggle,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerGroup,\\n  NotificationDrawerGroupList,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\\n\\nclass GroupNotificationDrawer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpenMap: null,\\n      firstGroupExpanded: false,\\n      secondGroupExpanded: true,\\n      thirdGroupExpanded: false\\n    };\\n    this.onToggle = (id, isOpen) => {\\n      this.setState({\\n        isOpenMap: { [id]: isOpen }\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpenMap: null\\n      });\\n    };\\n    this.toggleFirstDrawer = (event, value) => {\\n      this.setState({\\n        firstGroupExpanded: value\\n      });\\n    };\\n    this.toggleSecondDrawer = (event, value) => {\\n      this.setState({\\n        secondGroupExpanded: value\\n      });\\n    };\\n    this.toggleThirdDrawer = (event, value) => {\\n      this.setState({\\n        thirdGroupExpanded: value\\n      });\\n    };\\n  }\\n  render() {\\n    const { isOpenMap, firstGroupExpanded, secondGroupExpanded, thirdGroupExpanded } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled link\\n      </DropdownItem>\\n    ];\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader count={4}>\\n          <Dropdown\\n            onSelect={this.onSelect}\\n            toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-0', isOpen)} id=\\\"toggle-id-0\\\" />}\\n            isOpen={isOpenMap && isOpenMap['toggle-id-0']}\\n            isPlain\\n            dropdownItems={dropdownItems}\\n            id=\\\"notification-0\\\"\\n            position={DropdownPosition.right}\\n          />\\n        </NotificationDrawerHeader>\\n        <NotificationDrawerBody>\\n          <NotificationDrawerGroupList>\\n            <NotificationDrawerGroup\\n              title=\\\"First notification group\\\"\\n              isExpanded={firstGroupExpanded}\\n              count={2}\\n              onExpand={this.toggleFirstDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!firstGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Unread info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-5', isOpen)} id=\\\"toggle-id-5\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-5']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-5\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-6', isOpen)} id=\\\"toggle-id-6\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-6']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-6\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Read warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-7', isOpen)} id=\\\"toggle-id-7\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-7']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-7\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Read success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      direction={DropdownDirection.up}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-8', isOpen)} id=\\\"toggle-id-8\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-8']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-8\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Second notification group\\\"\\n              isExpanded={secondGroupExpanded}\\n              count={2}\\n              onExpand={this.toggleSecondDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!secondGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Unread info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-9', isOpen)} id=\\\"toggle-id-9\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-9']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-9\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-10', isOpen)} id=\\\"toggle-id-10\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-10']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-10\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Read warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-11', isOpen)} id=\\\"toggle-id-11\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-11']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-11\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Read success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      direction={DropdownDirection.up}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-12', isOpen)} id=\\\"toggle-id-12\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-12']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-12\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Third notification group. This is a long title to show how the title will be truncated if it is long and will be shown in a single line.\\\"\\n              isExpanded={thirdGroupExpanded}\\n              count={0}\\n              onExpand={this.toggleThirdDrawer}\\n              truncateTitle={1}\\n            >\\n              <NotificationDrawerList isHidden={!thirdGroupExpanded}>\\n                <EmptyState variant={EmptyStateVariant.full}>\\n                  <EmptyStateIcon icon={SearchIcon} />\\n                  <Title headingLevel=\\\"h2\\\" size=\\\"lg\\\">\\n                    No alerts found\\n                  </Title>\\n                  <EmptyStateBody>\\n                    There are currently no critical alerts firing. There may be firing alerts of other severities or\\n                    silenced critical alerts however.\\n                  </EmptyStateBody>\\n                  <EmptyStatePrimary>\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </EmptyStatePrimary>\\n                </EmptyState>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n          </NotificationDrawerGroupList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\n      \"title\": \"Groups\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Lightweight': function Lightweight(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Button,\\n  EmptyState,\\n  EmptyStateBody,\\n  EmptyStateIcon,\\n  EmptyStatePrimary,\\n  EmptyStateVariant,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerGroup,\\n  NotificationDrawerGroupList,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\\n\\nclass LightweightNotificationDrawerDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      firstGroupExpanded: false,\\n      secondGroupExpanded: true,\\n      thirdGroupExpanded: false\\n    };\\n\\n    this.onFocus = id => {\\n      if (id) {\\n        const element = document.getElementById(id);\\n        element.focus();\\n      }\\n    };\\n\\n    this.toggleFirstDrawer = (event, value) => {\\n      this.setState({\\n        firstGroupExpanded: value\\n      });\\n    };\\n\\n    this.toggleSecondDrawer = (event, value) => {\\n      this.setState({\\n        secondGroupExpanded: value\\n      });\\n    };\\n\\n    this.toggleThirdDrawer = (event, value) => {\\n      this.setState({\\n        thirdGroupExpanded: value\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { firstGroupExpanded, secondGroupExpanded, thirdGroupExpanded } = this.state;\\n\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader customText=\\\"2 unread alerts\\\" />\\n        <NotificationDrawerBody>\\n          <NotificationDrawerGroupList>\\n            <NotificationDrawerGroup\\n              title=\\\"First notification group\\\"\\n              isExpanded={firstGroupExpanded}\\n              count={4}\\n              isRead\\n              onExpand={this.toggleFirstDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!firstGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Second notification group\\\"\\n              isExpanded={secondGroupExpanded}\\n              count={4}\\n              isRead\\n              onExpand={this.toggleSecondDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!secondGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Info notification title w/action\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Third notification group\\\"\\n              isExpanded={thirdGroupExpanded}\\n              count={0}\\n              isRead\\n              onExpand={this.toggleThirdDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!thirdGroupExpanded}>\\n                <EmptyState variant={EmptyStateVariant.full}>\\n                  <EmptyStateIcon icon={SearchIcon} />\\n                  <Title headingLevel=\\\"h2\\\" size=\\\"lg\\\">\\n                    No alerts found\\n                  </Title>\\n                  <EmptyStateBody>\\n                    There are currently no critical alerts firing. There may be firing alerts of other severities or\\n                    silenced critical alerts however.\\n                  </EmptyStateBody>\\n                  <EmptyStatePrimary>\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </EmptyStatePrimary>\\n                </EmptyState>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n          </NotificationDrawerGroupList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\n      \"title\": \"Lightweight\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Groups\"]), React.createElement(pageData.examples[\"Lightweight\"]));\n};\n\nComponent.displayName = 'ComponentsNotificationDrawerReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","SearchIcon","srcImportbasic","srcImportgrouped","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/notification-drawer/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\nimport srcImportbasic from './react/basic.png';\nimport srcImportgrouped from './react/grouped.png';\nconst pageData = {\n  \"id\": \"Notification drawer\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/notification-drawer/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NotificationDrawer/examples/NotificationDrawer.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"NotificationDrawer\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the notification drawer\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the notification drawer\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerBody\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the body of the notification drawer\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the notification drawer body\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerHeader\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the drawer\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes for notification drawer header.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"closeButtonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Adds custom accessible text to the notification drawer close button.\",\n          \"defaultValue\": \"'Close'\"\n        },\n        {\n          \"name\": \"count\",\n          \"type\": \"number\",\n          \"description\": \"Notification drawer heading count\"\n        },\n        {\n          \"name\": \"customText\",\n          \"type\": \"string\",\n          \"description\": \"Notification drawer heading custom text which can be used instead of providing count/unreadText\"\n        },\n        {\n          \"name\": \"onClose\",\n          \"type\": \"() => void\",\n          \"description\": \"Callback for when close button is clicked\"\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string\",\n          \"description\": \"Notification drawer heading title\",\n          \"defaultValue\": \"'Notifications'\"\n        },\n        {\n          \"name\": \"unreadText\",\n          \"type\": \"string\",\n          \"description\": \"Notification drawer heading unread text used in combination with a count\",\n          \"defaultValue\": \"'unread'\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerGroup\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the group\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the group\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"count\",\n          \"type\": \"number\",\n          \"description\": \"Notification drawer group count\",\n          \"required\": true\n        },\n        {\n          \"name\": \"isExpanded\",\n          \"type\": \"boolean\",\n          \"description\": \"Adds styling to the group to indicate expanded state\",\n          \"required\": true\n        },\n        {\n          \"name\": \"isRead\",\n          \"type\": \"boolean\",\n          \"description\": \"Adds styling to the group to indicate whether it has been read\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onExpand\",\n          \"type\": \"(event: any, value: boolean) => void\",\n          \"description\": \"Callback for when group button is clicked to expand\",\n          \"defaultValue\": \"(event: any, expanded: boolean) => undefined as any\"\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string | React.ReactNode\",\n          \"description\": \"Notification drawer group title\",\n          \"required\": true\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n        },\n        {\n          \"name\": \"truncateTitle\",\n          \"type\": \"number\",\n          \"description\": \"Truncate title to number of lines\",\n          \"defaultValue\": \"0\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerGroupList\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the notification drawer list body\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the notification drawer list body\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerList\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the notification drawer list body\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the notification drawer list body\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"isHidden\",\n          \"type\": \"boolean\",\n          \"description\": \"Adds styling to the notification drawer list to indicate expand/hide state\",\n          \"defaultValue\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerListItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the list item\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the list item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"isHoverable\",\n          \"type\": \"boolean\",\n          \"description\": \"Modifies the list item to include hover styles on :hover\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"isRead\",\n          \"type\": \"boolean\",\n          \"description\": \"Adds styling to the list item to indicate it has been read\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: any) => void\",\n          \"description\": \"Callback for when a list item is clicked\",\n          \"defaultValue\": \"(event: React.MouseEvent) => undefined as any\"\n        },\n        {\n          \"name\": \"tabIndex\",\n          \"type\": \"number\",\n          \"description\": \"Tab index for the list item\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"variant\",\n          \"type\": \"'default' | 'success' | 'danger' | 'warning' | 'info'\",\n          \"description\": \"Variant indicates the severity level\",\n          \"defaultValue\": \"'default'\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerListItemBody\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the list item body\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the list item body\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"timestamp\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"List item timestamp\"\n        }\n      ]\n    },\n    {\n      \"name\": \"NotificationDrawerListItemHeader\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Actions rendered inside the notification drawer list item header\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes for notification drawer list item header.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"icon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Add custom icon for notification drawer list item header\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"srTitle\",\n          \"type\": \"string\",\n          \"description\": \"Notification drawer list item header screen reader title\"\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string\",\n          \"description\": \"Notification drawer list item title\",\n          \"required\": true\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n        },\n        {\n          \"name\": \"truncateTitle\",\n          \"type\": \"number\",\n          \"description\": \"Truncate title to number of lines\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"variant\",\n          \"type\": \"'success' | 'danger' | 'warning' | 'info' | 'default'\",\n          \"description\": \"Variant indicates the severity level\",\n          \"defaultValue\": \"'default'\"\n        }\n      ]\n    }\n  ],\n  \"beta\": true,\n  \"cssPrefix\": [\n    \"pf-c-notification-drawer\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Groups\",\n    \"Lightweight\"\n  ]\n};\npageData.liveContext = {\n  SearchIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} thumbnail={srcImportbasic} {...{\"code\":\"import React from 'react';\\nimport {\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  DropdownDirection,\\n  DropdownSeparator,\\n  KebabToggle,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\n\\nclass BasicNotificationDrawer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: new Array(6).fill(false),\\n      isDrawerOpen: true\\n    };\\n    this.onDrawerClose = () => {\\n      this.setState({\\n        isDrawerOpen: false\\n      });\\n    };\\n    this.onToggle = index => isOpen => {\\n      newState = [...this.state.isOpen.slice(0, index), isOpen, ...this.state.isOpen.slice(index + 1)];\\n      this.setState({ isOpen: newState });\\n    };\\n    this.onSelect = event => {\\n      this.setState({ isOpen: new Array(6).fill(false) });\\n    };\\n  }\\n\\n  render() {\\n    const [isOpen0, isOpen1, isOpen2, isOpen3, isOpen4, isOpen5, isOpen6] = this.state.isOpen;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled link\\n      </DropdownItem>\\n    ];\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader count={3} onClose={this.onDrawerClose}>\\n          <Dropdown\\n            onSelect={this.onSelect}\\n            toggle={<KebabToggle onToggle={this.onToggle(0)} id=\\\"toggle-id-0\\\" />}\\n            isOpen={isOpen0}\\n            isPlain\\n            dropdownItems={dropdownItems}\\n            id=\\\"notification-0\\\"\\n            position={DropdownPosition.right}\\n          />\\n        </NotificationDrawerHeader>\\n        <NotificationDrawerBody>\\n          <NotificationDrawerList>\\n            <NotificationDrawerListItem variant=\\\"info\\\">\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"info\\\"\\n                title=\\\"Unread info notification title\\\"\\n                srTitle=\\\"Info notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(1)} id=\\\"toggle-id-1\\\" />}\\n                  isOpen={isOpen1}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-1\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                This is an info notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"danger\\\">\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"danger\\\"\\n                title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                srTitle=\\\"Danger notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(2)} id=\\\"toggle-id-2\\\" />}\\n                  isOpen={isOpen2}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-2\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                This is a danger notification description. This is a long description to show how the title will wrap if\\n                it is long and wraps to multiple lines.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"danger\\\">\\n              <NotificationDrawerListItemHeader\\n                truncateTitle={1}\\n                variant=\\\"danger\\\"\\n                title=\\\"Unread danger notification title. This is a long title to show how the title will be truncated if it is long and will be shown in a single line.\\\"\\n                srTitle=\\\"Danger notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(3)} id=\\\"toggle-id-3\\\" />}\\n                  isOpen={isOpen3}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-3\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                This is a danger notification description. This is a long description to show how the title will wrap if\\n                it is long and wraps to multiple lines.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"warning\\\"\\n                title=\\\"Read warning notification title\\\"\\n                srTitle=\\\"Warning notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(4)} id=\\\"toggle-id-4\\\" />}\\n                  isOpen={isOpen4}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-4\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                This is a warning notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n              <NotificationDrawerListItemHeader\\n                variant=\\\"success\\\"\\n                title=\\\"Read success notification title\\\"\\n                srTitle=\\\"Success notification:\\\"\\n              >\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  direction={DropdownDirection.up}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(5)} id=\\\"toggle-id-5\\\" />}\\n                  isOpen={isOpen5}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-5\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                This is a success notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n            <NotificationDrawerListItem isRead>\\n              <NotificationDrawerListItemHeader title=\\\"Read (default) notification title\\\" srTitle=\\\"notification:\\\">\\n                <Dropdown\\n                  position={DropdownPosition.right}\\n                  onSelect={this.onSelect}\\n                  toggle={<KebabToggle onToggle={this.onToggle(6)} id=\\\"toggle-id-6\\\" />}\\n                  isOpen={isOpen6}\\n                  isPlain\\n                  dropdownItems={dropdownItems}\\n                  id=\\\"notification-6\\\"\\n                />\\n              </NotificationDrawerListItemHeader>\\n              <NotificationDrawerListItemBody timestamp=\\\"35 minutes ago\\\">\\n                This is a default notification description.\\n              </NotificationDrawerListItemBody>\\n            </NotificationDrawerListItem>\\n          </NotificationDrawerList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Groups': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Button,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  DropdownDirection,\\n  DropdownSeparator,\\n  EmptyState,\\n  EmptyStateBody,\\n  EmptyStateIcon,\\n  EmptyStatePrimary,\\n  KebabToggle,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerGroup,\\n  NotificationDrawerGroupList,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\\n\\nclass GroupNotificationDrawer extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpenMap: null,\\n      firstGroupExpanded: false,\\n      secondGroupExpanded: true,\\n      thirdGroupExpanded: false\\n    };\\n    this.onToggle = (id, isOpen) => {\\n      this.setState({\\n        isOpenMap: { [id]: isOpen }\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpenMap: null\\n      });\\n    };\\n    this.toggleFirstDrawer = (event, value) => {\\n      this.setState({\\n        firstGroupExpanded: value\\n      });\\n    };\\n    this.toggleSecondDrawer = (event, value) => {\\n      this.setState({\\n        secondGroupExpanded: value\\n      });\\n    };\\n    this.toggleThirdDrawer = (event, value) => {\\n      this.setState({\\n        thirdGroupExpanded: value\\n      });\\n    };\\n  }\\n  render() {\\n    const { isOpenMap, firstGroupExpanded, secondGroupExpanded, thirdGroupExpanded } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled link\\n      </DropdownItem>\\n    ];\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader count={4}>\\n          <Dropdown\\n            onSelect={this.onSelect}\\n            toggle={<KebabToggle onToggle={isOpen => this.onToggle('toggle-id-0', isOpen)} id=\\\"toggle-id-0\\\" />}\\n            isOpen={isOpenMap && isOpenMap['toggle-id-0']}\\n            isPlain\\n            dropdownItems={dropdownItems}\\n            id=\\\"notification-0\\\"\\n            position={DropdownPosition.right}\\n          />\\n        </NotificationDrawerHeader>\\n        <NotificationDrawerBody>\\n          <NotificationDrawerGroupList>\\n            <NotificationDrawerGroup\\n              title=\\\"First notification group\\\"\\n              isExpanded={firstGroupExpanded}\\n              count={2}\\n              onExpand={this.toggleFirstDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!firstGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Unread info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-5', isOpen)} id=\\\"toggle-id-5\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-5']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-5\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-6', isOpen)} id=\\\"toggle-id-6\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-6']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-6\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Read warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-7', isOpen)} id=\\\"toggle-id-7\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-7']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-7\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Read success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      direction={DropdownDirection.up}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-8', isOpen)} id=\\\"toggle-id-8\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-8']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-8\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Second notification group\\\"\\n              isExpanded={secondGroupExpanded}\\n              count={2}\\n              onExpand={this.toggleSecondDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!secondGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Unread info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-9', isOpen)} id=\\\"toggle-id-9\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-9']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-9\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Unread danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-10', isOpen)} id=\\\"toggle-id-10\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-10']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-10\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Read warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-11', isOpen)} id=\\\"toggle-id-11\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-11']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-11\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\" isRead>\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Read success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  >\\n                    <Dropdown\\n                      position={DropdownPosition.right}\\n                      direction={DropdownDirection.up}\\n                      onSelect={this.onSelect}\\n                      toggle={\\n                        <KebabToggle onToggle={isOpen => this.onToggle('toggle-id-12', isOpen)} id=\\\"toggle-id-12\\\" />\\n                      }\\n                      isOpen={isOpenMap && isOpenMap['toggle-id-12']}\\n                      isPlain\\n                      dropdownItems={dropdownItems}\\n                      id=\\\"notification-12\\\"\\n                    />\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Third notification group. This is a long title to show how the title will be truncated if it is long and will be shown in a single line.\\\"\\n              isExpanded={thirdGroupExpanded}\\n              count={0}\\n              onExpand={this.toggleThirdDrawer}\\n              truncateTitle={1}\\n            >\\n              <NotificationDrawerList isHidden={!thirdGroupExpanded}>\\n                <EmptyState variant={EmptyStateVariant.full}>\\n                  <EmptyStateIcon icon={SearchIcon} />\\n                  <Title headingLevel=\\\"h2\\\" size=\\\"lg\\\">\\n                    No alerts found\\n                  </Title>\\n                  <EmptyStateBody>\\n                    There are currently no critical alerts firing. There may be firing alerts of other severities or\\n                    silenced critical alerts however.\\n                  </EmptyStateBody>\\n                  <EmptyStatePrimary>\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </EmptyStatePrimary>\\n                </EmptyState>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n          </NotificationDrawerGroupList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\"title\":\"Groups\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Lightweight': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Button,\\n  EmptyState,\\n  EmptyStateBody,\\n  EmptyStateIcon,\\n  EmptyStatePrimary,\\n  EmptyStateVariant,\\n  NotificationDrawer,\\n  NotificationDrawerBody,\\n  NotificationDrawerHeader,\\n  NotificationDrawerGroup,\\n  NotificationDrawerGroupList,\\n  NotificationDrawerList,\\n  NotificationDrawerListItem,\\n  NotificationDrawerListItemBody,\\n  NotificationDrawerListItemHeader,\\n  Title\\n} from '@patternfly/react-core';\\nimport SearchIcon from '@patternfly/react-icons/dist/esm/icons/search-icon';\\n\\nclass LightweightNotificationDrawerDemo extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      firstGroupExpanded: false,\\n      secondGroupExpanded: true,\\n      thirdGroupExpanded: false\\n    };\\n\\n    this.onFocus = id => {\\n      if (id) {\\n        const element = document.getElementById(id);\\n        element.focus();\\n      }\\n    };\\n\\n    this.toggleFirstDrawer = (event, value) => {\\n      this.setState({\\n        firstGroupExpanded: value\\n      });\\n    };\\n\\n    this.toggleSecondDrawer = (event, value) => {\\n      this.setState({\\n        secondGroupExpanded: value\\n      });\\n    };\\n\\n    this.toggleThirdDrawer = (event, value) => {\\n      this.setState({\\n        thirdGroupExpanded: value\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { firstGroupExpanded, secondGroupExpanded, thirdGroupExpanded } = this.state;\\n\\n    return (\\n      <NotificationDrawer>\\n        <NotificationDrawerHeader customText=\\\"2 unread alerts\\\" />\\n        <NotificationDrawerBody>\\n          <NotificationDrawerGroupList>\\n            <NotificationDrawerGroup\\n              title=\\\"First notification group\\\"\\n              isExpanded={firstGroupExpanded}\\n              count={4}\\n              isRead\\n              onExpand={this.toggleFirstDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!firstGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Info notification title\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Second notification group\\\"\\n              isExpanded={secondGroupExpanded}\\n              count={4}\\n              isRead\\n              onExpand={this.toggleSecondDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!secondGroupExpanded}>\\n                <NotificationDrawerListItem variant=\\\"info\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"info\\\"\\n                    title=\\\"Info notification title w/action\\\"\\n                    srTitle=\\\"Info notification:\\\"\\n                  >\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </NotificationDrawerListItemHeader>\\n                  <NotificationDrawerListItemBody timestamp=\\\"5 minutes ago\\\">\\n                    This is an info notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"danger\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"danger\\\"\\n                    title=\\\"Danger notification title. This is a long title to show how the title will wrap if it is long and wraps to multiple lines.\\\"\\n                    srTitle=\\\"Danger notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"10 minutes ago\\\">\\n                    This is a danger notification description. This is a long description to show how the title will\\n                    wrap if it is long and wraps to multiple lines.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"warning\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"warning\\\"\\n                    title=\\\"Warning notification title\\\"\\n                    srTitle=\\\"Warning notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"20 minutes ago\\\">\\n                    This is a warning notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n                <NotificationDrawerListItem variant=\\\"success\\\">\\n                  <NotificationDrawerListItemHeader\\n                    variant=\\\"success\\\"\\n                    title=\\\"Success notification title\\\"\\n                    srTitle=\\\"Success notification:\\\"\\n                  />\\n                  <NotificationDrawerListItemBody timestamp=\\\"30 minutes ago\\\">\\n                    This is a success notification description.\\n                  </NotificationDrawerListItemBody>\\n                </NotificationDrawerListItem>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n            <NotificationDrawerGroup\\n              title=\\\"Third notification group\\\"\\n              isExpanded={thirdGroupExpanded}\\n              count={0}\\n              isRead\\n              onExpand={this.toggleThirdDrawer}\\n            >\\n              <NotificationDrawerList isHidden={!thirdGroupExpanded}>\\n                <EmptyState variant={EmptyStateVariant.full}>\\n                  <EmptyStateIcon icon={SearchIcon} />\\n                  <Title headingLevel=\\\"h2\\\" size=\\\"lg\\\">\\n                    No alerts found\\n                  </Title>\\n                  <EmptyStateBody>\\n                    There are currently no critical alerts firing. There may be firing alerts of other severities or\\n                    silenced critical alerts however.\\n                  </EmptyStateBody>\\n                  <EmptyStatePrimary>\\n                    <Button variant=\\\"link\\\">Action</Button>\\n                  </EmptyStatePrimary>\\n                </EmptyState>\\n              </NotificationDrawerList>\\n            </NotificationDrawerGroup>\\n          </NotificationDrawerGroupList>\\n        </NotificationDrawerBody>\\n      </NotificationDrawer>\\n    );\\n  }\\n}\",\"title\":\"Lightweight\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Groups\"])}\n    {React.createElement(pageData.examples[\"Lightweight\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsNotificationDrawerReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}