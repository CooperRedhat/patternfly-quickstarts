{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\nvar pageData = {\n  \"id\": \"Code block\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/code-block/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/CodeBlock/examples/CodeBlock.md\",\n  \"propComponents\": [{\n    \"name\": \"CodeBlock\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"actions\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Actions in the code block header. Should be wrapped with CodeBlockAction.\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the code block\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes passed to the code block wrapper\"\n    }]\n  }, {\n    \"name\": \"CodeBlockAction\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the code block action\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes passed to the code block action\"\n    }]\n  }, {\n    \"name\": \"CodeBlockCode\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Code rendered inside the code block\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes passed to the code block pre wrapper\"\n    }, {\n      \"name\": \"codeClassName\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes passed to the code block code\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-code-block\"],\n  \"examples\": [\"Basic\", \"Expandable\"]\n};\npageData.liveContext = {\n  CopyIcon: CopyIcon,\n  PlayIcon: PlayIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { CodeBlock, CodeBlockAction, CodeBlockCode, ClipboardCopyButton, Button } from '@patternfly/react-core';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\n\\nexport const BasicCodeBlock: React.FunctionComponent = () => {\\n  const [copied, setCopied] = React.useState(false);\\n\\n  const clipboardCopyFunc = (event, text) => {\\n    const clipboard = event.currentTarget.parentElement;\\n    const el = document.createElement('textarea');\\n    el.value = text.toString();\\n    clipboard.appendChild(el);\\n    el.select();\\n    document.execCommand('copy');\\n    clipboard.removeChild(el);\\n  };\\n\\n  const onClick = (event, text) => {\\n    clipboardCopyFunc(event, text);\\n    setCopied(true);\\n  };\\n\\n  const code = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo0oooo00ooo\\nspec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const actions = (\\n    <React.Fragment>\\n      <CodeBlockAction>\\n        <ClipboardCopyButton\\n          id=\\\"copy-button\\\"\\n          textId=\\\"code-content\\\"\\n          aria-label=\\\"Copy to clipboard\\\"\\n          onClick={e => onClick(e, code)}\\n          exitDelay={600}\\n          maxWidth=\\\"110px\\\"\\n          variant=\\\"plain\\\"\\n        >\\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\\n        </ClipboardCopyButton>\\n      </CodeBlockAction>\\n      <CodeBlockAction>\\n        <Button variant=\\\"plain\\\" aria-label=\\\"Play icon\\\">\\n          <PlayIcon />\\n        </Button>\\n      </CodeBlockAction>\\n    </React.Fragment>\\n  );\\n\\n  return (\\n    <CodeBlock actions={actions}>\\n      <CodeBlockCode id=\\\"code-content\\\">{code}</CodeBlockCode>\\n    </CodeBlock>\\n  );\\n};\\n\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Expandable': function Expandable(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  CodeBlock,\\n  CodeBlockAction,\\n  CodeBlockCode,\\n  ClipboardCopyButton,\\n  ExpandableSection,\\n  ExpandableSectionToggle,\\n  Button\\n} from '@patternfly/react-core';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\n\\nexport const ExpandableCodeBlock: React.FunctionComponent = () => {\\n  const [isExpanded, setIsExpanded] = React.useState(false);\\n  const [copied, setCopied] = React.useState(false);\\n\\n  const onToggle = isExpanded => {\\n    setIsExpanded(isExpanded);\\n  };\\n\\n  const clipboardCopyFunc = (event, text) => {\\n    const clipboard = event.currentTarget.parentElement;\\n    const el = document.createElement('textarea');\\n    el.value = text.toString();\\n    clipboard.appendChild(el);\\n    el.select();\\n    document.execCommand('copy');\\n    clipboard.removeChild(el);\\n  };\\n\\n  const onClick = (event, text) => {\\n    clipboardCopyFunc(event, text);\\n    setCopied(true);\\n  };\\n\\n  const copyBlock = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo\\nspec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const code = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo`;\\n  const expandedCode = `spec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const actions = (\\n    <React.Fragment>\\n      <CodeBlockAction>\\n        <ClipboardCopyButton\\n          id=\\\"copy-button\\\"\\n          textId=\\\"code-content\\\"\\n          aria-label=\\\"Copy to clipboard\\\"\\n          onClick={e => onClick(e, copyBlock)}\\n          exitDelay={600}\\n          maxWidth=\\\"110px\\\"\\n          variant=\\\"plain\\\"\\n        >\\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\\n        </ClipboardCopyButton>\\n      </CodeBlockAction>\\n      <CodeBlockAction>\\n        <Button variant=\\\"plain\\\" aria-label=\\\"Play icon\\\">\\n          <PlayIcon />\\n        </Button>\\n      </CodeBlockAction>\\n    </React.Fragment>\\n  );\\n\\n  return (\\n    <CodeBlock actions={actions}>\\n      <CodeBlockCode>\\n        {code}\\n        <ExpandableSection isExpanded={isExpanded} isDetached contentId=\\\"code-block-expand\\\">\\n          {expandedCode}\\n        </ExpandableSection>\\n      </CodeBlockCode>\\n      <ExpandableSectionToggle isExpanded={isExpanded} onToggle={onToggle} contentId=\\\"code-block-expand\\\" direction=\\\"up\\\">\\n        {isExpanded ? 'Show Less' : 'Show More'}\\n      </ExpandableSectionToggle>\\n    </CodeBlock>\\n  );\\n};\\n\",\n      \"title\": \"Expandable\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Expandable\"]));\n};\n\nComponent.displayName = 'ComponentsCodeBlockReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","CopyIcon","PlayIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/code-block/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\nconst pageData = {\n  \"id\": \"Code block\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/code-block/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/CodeBlock/examples/CodeBlock.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"CodeBlock\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"actions\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Actions in the code block header. Should be wrapped with CodeBlockAction.\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the code block\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes passed to the code block wrapper\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeBlockAction\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the code block action\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes passed to the code block action\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CodeBlockCode\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Code rendered inside the code block\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes passed to the code block pre wrapper\"\n        },\n        {\n          \"name\": \"codeClassName\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes passed to the code block code\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-code-block\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Expandable\"\n  ]\n};\npageData.liveContext = {\n  CopyIcon,\n  PlayIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { CodeBlock, CodeBlockAction, CodeBlockCode, ClipboardCopyButton, Button } from '@patternfly/react-core';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\n\\nexport const BasicCodeBlock: React.FunctionComponent = () => {\\n  const [copied, setCopied] = React.useState(false);\\n\\n  const clipboardCopyFunc = (event, text) => {\\n    const clipboard = event.currentTarget.parentElement;\\n    const el = document.createElement('textarea');\\n    el.value = text.toString();\\n    clipboard.appendChild(el);\\n    el.select();\\n    document.execCommand('copy');\\n    clipboard.removeChild(el);\\n  };\\n\\n  const onClick = (event, text) => {\\n    clipboardCopyFunc(event, text);\\n    setCopied(true);\\n  };\\n\\n  const code = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo0oooo00ooo\\nspec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const actions = (\\n    <React.Fragment>\\n      <CodeBlockAction>\\n        <ClipboardCopyButton\\n          id=\\\"copy-button\\\"\\n          textId=\\\"code-content\\\"\\n          aria-label=\\\"Copy to clipboard\\\"\\n          onClick={e => onClick(e, code)}\\n          exitDelay={600}\\n          maxWidth=\\\"110px\\\"\\n          variant=\\\"plain\\\"\\n        >\\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\\n        </ClipboardCopyButton>\\n      </CodeBlockAction>\\n      <CodeBlockAction>\\n        <Button variant=\\\"plain\\\" aria-label=\\\"Play icon\\\">\\n          <PlayIcon />\\n        </Button>\\n      </CodeBlockAction>\\n    </React.Fragment>\\n  );\\n\\n  return (\\n    <CodeBlock actions={actions}>\\n      <CodeBlockCode id=\\\"code-content\\\">{code}</CodeBlockCode>\\n    </CodeBlock>\\n  );\\n};\\n\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Expandable': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  CodeBlock,\\n  CodeBlockAction,\\n  CodeBlockCode,\\n  ClipboardCopyButton,\\n  ExpandableSection,\\n  ExpandableSectionToggle,\\n  Button\\n} from '@patternfly/react-core';\\nimport PlayIcon from '@patternfly/react-icons/dist/esm/icons/play-icon';\\n\\nexport const ExpandableCodeBlock: React.FunctionComponent = () => {\\n  const [isExpanded, setIsExpanded] = React.useState(false);\\n  const [copied, setCopied] = React.useState(false);\\n\\n  const onToggle = isExpanded => {\\n    setIsExpanded(isExpanded);\\n  };\\n\\n  const clipboardCopyFunc = (event, text) => {\\n    const clipboard = event.currentTarget.parentElement;\\n    const el = document.createElement('textarea');\\n    el.value = text.toString();\\n    clipboard.appendChild(el);\\n    el.select();\\n    document.execCommand('copy');\\n    clipboard.removeChild(el);\\n  };\\n\\n  const onClick = (event, text) => {\\n    clipboardCopyFunc(event, text);\\n    setCopied(true);\\n  };\\n\\n  const copyBlock = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo\\nspec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const code = `apiVersion: helm.openshift.io/v1beta1/\\nkind: HelmChartRepository\\nmetadata:\\nname: azure-sample-repo`;\\n  const expandedCode = `spec:\\nconnectionConfig:\\nurl: https://raw.githubusercontent.com/Azure-Samples/helm-charts/master/docs`;\\n\\n  const actions = (\\n    <React.Fragment>\\n      <CodeBlockAction>\\n        <ClipboardCopyButton\\n          id=\\\"copy-button\\\"\\n          textId=\\\"code-content\\\"\\n          aria-label=\\\"Copy to clipboard\\\"\\n          onClick={e => onClick(e, copyBlock)}\\n          exitDelay={600}\\n          maxWidth=\\\"110px\\\"\\n          variant=\\\"plain\\\"\\n        >\\n          {copied ? 'Successfully copied to clipboard!' : 'Copy to clipboard'}\\n        </ClipboardCopyButton>\\n      </CodeBlockAction>\\n      <CodeBlockAction>\\n        <Button variant=\\\"plain\\\" aria-label=\\\"Play icon\\\">\\n          <PlayIcon />\\n        </Button>\\n      </CodeBlockAction>\\n    </React.Fragment>\\n  );\\n\\n  return (\\n    <CodeBlock actions={actions}>\\n      <CodeBlockCode>\\n        {code}\\n        <ExpandableSection isExpanded={isExpanded} isDetached contentId=\\\"code-block-expand\\\">\\n          {expandedCode}\\n        </ExpandableSection>\\n      </CodeBlockCode>\\n      <ExpandableSectionToggle isExpanded={isExpanded} onToggle={onToggle} contentId=\\\"code-block-expand\\\" direction=\\\"up\\\">\\n        {isExpanded ? 'Show Less' : 'Show More'}\\n      </ExpandableSectionToggle>\\n    </CodeBlock>\\n  );\\n};\\n\",\"title\":\"Expandable\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Expandable\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsCodeBlockReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,YADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,8BAJO;EAKf,cAAc,2IALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,WADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,SADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,2EAHjB;MAIE,gBAAgB;IAJlB,CADO,EAOP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,wCAHjB;MAIE,gBAAgB;IAJlB,CAPO,EAaP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAbO;EAHX,CADgB,EAwBhB;IACE,QAAQ,iBADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,+CAHjB;MAIE,gBAAgB;IAJlB,CADO,EAOP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAPO;EAHX,CAxBgB,EAyChB;IACE,QAAQ,eADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,qCAHjB;MAIE,gBAAgB;IAJlB,CADO,EAOP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAPO,EAYP;MACE,QAAQ,eADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAZO;EAHX,CAzCgB,CANH;EAsEf,aAAa,CACX,iBADW,CAtEE;EAyEf,YAAY,CACV,OADU,EAEV,YAFU;AAzEG,CAAjB;AA8EAA,QAAQ,CAACC,WAAT,GAAuB;EACrBH,QAAQ,EAARA,QADqB;EAErBC,QAAQ,EAARA;AAFqB,CAAvB;AAIAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,ixDAA9C;MAAg0D,SAAQ,OAAx0D;MAAg1D,QAAO;IAAv1D,GADY;EAAA,CADI;EAKlB,cAAc,oBAAAA,KAAK;IAAA,oBACjB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,ukFAA9C;MAAsnF,SAAQ,YAA9nF;MAA2oF,QAAO;IAAlpF,GADiB;EAAA;AALD,CAApB;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cADF,EAIGX,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,OAAlB,CAApB,CAJH,EAKGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,YAAlB,CAApB,CALH,CADgB;AAAA,CAAlB;;AASAE,SAAS,CAACE,WAAV,GAAwB,8BAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}