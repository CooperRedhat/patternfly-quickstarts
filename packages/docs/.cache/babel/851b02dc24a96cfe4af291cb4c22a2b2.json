{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nvar pageData = {\n  \"id\": \"Password generator\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/password-generator/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/PasswordGenerator.md\",\n  \"examples\": [\"Provide a generated password\"]\n};\npageData.liveContext = {\n  RedoIcon: RedoIcon,\n  EyeIcon: EyeIcon,\n  EyeSlashIcon: EyeSlashIcon\n};\npageData.examples = {\n  'Provide a generated password': function ProvideAGeneratedPassword(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  InputGroup,\\n  TextInput,\\n  Button,\\n  Popper,\\n  Menu,\\n  MenuContent,\\n  MenuList,\\n  MenuItem,\\n  MenuItemAction\\n} from '@patternfly/react-core';\\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\\n\\nconst PasswordGenerator: React.FunctionComponent = () => {\\n  const generatePassword = () => {\\n    const length = 12;\\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@%()_-=+';\\n    let retVal = '';\\n    for (var i = 0, n = charset.length; i < length; ++i) {\\n      retVal += charset.charAt(Math.floor(Math.random() * n));\\n    }\\n    return retVal;\\n  };\\n  const [password, setPassword] = React.useState<string>('');\\n  const [generatedPassword, setGeneratedPassword] = React.useState<string>(generatePassword());\\n  const [isAutocompleteOpen, setIsAutocompleteOpen] = React.useState<boolean>(false);\\n  const [passwordHidden, setPasswordHidden] = React.useState<boolean>(true);\\n  const searchInputRef = React.useRef(null);\\n  const autocompleteRef = React.useRef(null);\\n\\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [isAutocompleteOpen, searchInputRef.current]);\\n\\n  const onChange = (newValue: string) => {\\n    if (searchInputRef && searchInputRef.current && searchInputRef.current.contains(document.activeElement)) {\\n      setIsAutocompleteOpen(true);\\n    } else {\\n      setIsAutocompleteOpen(false);\\n    }\\n    setPassword(newValue);\\n  };\\n\\n  // Whenever an autocomplete option is selected, set the search input value, close the menu, and put the browser\\n  // focus back on the search input\\n  const onSelect = (event: React.MouseEvent<HTMLButtonElement>) => {\\n    event.stopPropagation();\\n    setPassword(generatedPassword);\\n    setIsAutocompleteOpen(false);\\n    searchInputRef.current.focus();\\n  };\\n\\n  const handleMenuKeys = (event: KeyboardEvent | React.KeyboardEvent<any>) => {\\n    if (!(isAutocompleteOpen && searchInputRef.current && searchInputRef.current.contains(event.target))) {\\n      return;\\n    }\\n    // the escape key closes the autocomplete menu and keeps the focus on the search input.\\n    if (event.key === 'Escape') {\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n      // the up and down arrow keys move browser focus into the autocomplete menu\\n    } else if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\\n      const firstElement = autocompleteRef.current.querySelector('li > button:not(:disabled)');\\n      firstElement && firstElement.focus();\\n      event.preventDefault(); // by default, the up and down arrow keys scroll the window\\n    }\\n    // If the autocomplete is open and the browser focus is in the autocomplete menu\\n    // hitting tab will close the autocomplete and put browser focus back on the search input.\\n    else if (autocompleteRef.current.contains(event.target) && event.key === 'Tab') {\\n      event.preventDefault();\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n    }\\n  };\\n\\n  // The autocomplete menu should close if the user clicks outside the menu.\\n  const handleClickOutside = (event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>) => {\\n    if (\\n      isAutocompleteOpen &&\\n      autocompleteRef &&\\n      autocompleteRef.current &&\\n      !searchInputRef.current.contains(event.target)\\n    ) {\\n      setIsAutocompleteOpen(false);\\n    }\\n    if (\\n      !isAutocompleteOpen &&\\n      searchInputRef &&\\n      searchInputRef.current &&\\n      searchInputRef.current.contains(event.target)\\n    ) {\\n      setIsAutocompleteOpen(true);\\n    }\\n  };\\n  const textInput = (\\n    <div ref={searchInputRef} id=\\\"password-input\\\">\\n      <InputGroup>\\n        <TextInput\\n          onFocus={() => {\\n            setIsAutocompleteOpen(true);\\n          }}\\n          isRequired\\n          type={passwordHidden ? 'password' : 'text'}\\n          aria-label=\\\"Password input\\\"\\n          value={password}\\n          onChange={onChange}\\n        />\\n        <Button\\n          variant=\\\"control\\\"\\n          onClick={() => setPasswordHidden(!passwordHidden)}\\n          aria-label={passwordHidden ? 'Show password' : 'Hide password'}\\n        >\\n          {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\\n        </Button>\\n      </InputGroup>\\n    </div>\\n  );\\n  const autocomplete = (\\n    <Menu ref={autocompleteRef} onSelect={onSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          <MenuItem\\n            itemId={0}\\n            actions={\\n              <MenuItemAction\\n                icon={<RedoIcon aria-hidden />}\\n                onClick={e => {\\n                  setGeneratedPassword(generatePassword());\\n                }}\\n                actionId=\\\"redo\\\"\\n                aria-label=\\\"Generate a new suggested password\\\"\\n              />\\n            }\\n          >\\n            Use suggested password: <b>{`${generatedPassword}`}</b>\\n          </MenuItem>\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n\\n  return (\\n    <Popper\\n      trigger={textInput}\\n      popper={autocomplete}\\n      isVisible={isAutocompleteOpen}\\n      enableFlip={false}\\n      // append the autocomplete menu to the search input in the DOM for the sake of the keyboard navigation experience\\n      appendTo={() => document.querySelector('#password-input')}\\n    />\\n  );\\n};\",\n      \"title\": \"Provide a generated password\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Provide a generated password\"]));\n};\n\nComponent.displayName = 'DemosPasswordGeneratorReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","RedoIcon","EyeIcon","EyeSlashIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/demos/password-generator/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\nconst pageData = {\n  \"id\": \"Password generator\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/password-generator/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/PasswordGenerator.md\",\n  \"examples\": [\n    \"Provide a generated password\"\n  ]\n};\npageData.liveContext = {\n  RedoIcon,\n  EyeIcon,\n  EyeSlashIcon\n};\npageData.examples = {\n  'Provide a generated password': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  InputGroup,\\n  TextInput,\\n  Button,\\n  Popper,\\n  Menu,\\n  MenuContent,\\n  MenuList,\\n  MenuItem,\\n  MenuItemAction\\n} from '@patternfly/react-core';\\nimport RedoIcon from '@patternfly/react-icons/dist/esm/icons/redo-icon';\\nimport EyeIcon from '@patternfly/react-icons/dist/esm/icons/eye-icon';\\nimport EyeSlashIcon from '@patternfly/react-icons/dist/esm/icons/eye-slash-icon';\\n\\nconst PasswordGenerator: React.FunctionComponent = () => {\\n  const generatePassword = () => {\\n    const length = 12;\\n    const charset = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@%()_-=+';\\n    let retVal = '';\\n    for (var i = 0, n = charset.length; i < length; ++i) {\\n      retVal += charset.charAt(Math.floor(Math.random() * n));\\n    }\\n    return retVal;\\n  };\\n  const [password, setPassword] = React.useState<string>('');\\n  const [generatedPassword, setGeneratedPassword] = React.useState<string>(generatePassword());\\n  const [isAutocompleteOpen, setIsAutocompleteOpen] = React.useState<boolean>(false);\\n  const [passwordHidden, setPasswordHidden] = React.useState<boolean>(true);\\n  const searchInputRef = React.useRef(null);\\n  const autocompleteRef = React.useRef(null);\\n\\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [isAutocompleteOpen, searchInputRef.current]);\\n\\n  const onChange = (newValue: string) => {\\n    if (searchInputRef && searchInputRef.current && searchInputRef.current.contains(document.activeElement)) {\\n      setIsAutocompleteOpen(true);\\n    } else {\\n      setIsAutocompleteOpen(false);\\n    }\\n    setPassword(newValue);\\n  };\\n\\n  // Whenever an autocomplete option is selected, set the search input value, close the menu, and put the browser\\n  // focus back on the search input\\n  const onSelect = (event: React.MouseEvent<HTMLButtonElement>) => {\\n    event.stopPropagation();\\n    setPassword(generatedPassword);\\n    setIsAutocompleteOpen(false);\\n    searchInputRef.current.focus();\\n  };\\n\\n  const handleMenuKeys = (event: KeyboardEvent | React.KeyboardEvent<any>) => {\\n    if (!(isAutocompleteOpen && searchInputRef.current && searchInputRef.current.contains(event.target))) {\\n      return;\\n    }\\n    // the escape key closes the autocomplete menu and keeps the focus on the search input.\\n    if (event.key === 'Escape') {\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n      // the up and down arrow keys move browser focus into the autocomplete menu\\n    } else if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\\n      const firstElement = autocompleteRef.current.querySelector('li > button:not(:disabled)');\\n      firstElement && firstElement.focus();\\n      event.preventDefault(); // by default, the up and down arrow keys scroll the window\\n    }\\n    // If the autocomplete is open and the browser focus is in the autocomplete menu\\n    // hitting tab will close the autocomplete and put browser focus back on the search input.\\n    else if (autocompleteRef.current.contains(event.target) && event.key === 'Tab') {\\n      event.preventDefault();\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n    }\\n  };\\n\\n  // The autocomplete menu should close if the user clicks outside the menu.\\n  const handleClickOutside = (event: MouseEvent | TouchEvent | KeyboardEvent | React.KeyboardEvent<any> | React.MouseEvent<HTMLButtonElement>) => {\\n    if (\\n      isAutocompleteOpen &&\\n      autocompleteRef &&\\n      autocompleteRef.current &&\\n      !searchInputRef.current.contains(event.target)\\n    ) {\\n      setIsAutocompleteOpen(false);\\n    }\\n    if (\\n      !isAutocompleteOpen &&\\n      searchInputRef &&\\n      searchInputRef.current &&\\n      searchInputRef.current.contains(event.target)\\n    ) {\\n      setIsAutocompleteOpen(true);\\n    }\\n  };\\n  const textInput = (\\n    <div ref={searchInputRef} id=\\\"password-input\\\">\\n      <InputGroup>\\n        <TextInput\\n          onFocus={() => {\\n            setIsAutocompleteOpen(true);\\n          }}\\n          isRequired\\n          type={passwordHidden ? 'password' : 'text'}\\n          aria-label=\\\"Password input\\\"\\n          value={password}\\n          onChange={onChange}\\n        />\\n        <Button\\n          variant=\\\"control\\\"\\n          onClick={() => setPasswordHidden(!passwordHidden)}\\n          aria-label={passwordHidden ? 'Show password' : 'Hide password'}\\n        >\\n          {passwordHidden ? <EyeIcon /> : <EyeSlashIcon />}\\n        </Button>\\n      </InputGroup>\\n    </div>\\n  );\\n  const autocomplete = (\\n    <Menu ref={autocompleteRef} onSelect={onSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          <MenuItem\\n            itemId={0}\\n            actions={\\n              <MenuItemAction\\n                icon={<RedoIcon aria-hidden />}\\n                onClick={e => {\\n                  setGeneratedPassword(generatePassword());\\n                }}\\n                actionId=\\\"redo\\\"\\n                aria-label=\\\"Generate a new suggested password\\\"\\n              />\\n            }\\n          >\\n            Use suggested password: <b>{`${generatedPassword}`}</b>\\n          </MenuItem>\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n\\n  return (\\n    <Popper\\n      trigger={textInput}\\n      popper={autocomplete}\\n      isVisible={isAutocompleteOpen}\\n      enableFlip={false}\\n      // append the autocomplete menu to the search input in the DOM for the sake of the keyboard navigation experience\\n      appendTo={() => document.querySelector('#password-input')}\\n    />\\n  );\\n};\",\"title\":\"Provide a generated password\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Provide a generated password\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'DemosPasswordGeneratorReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAOC,OAAP,MAAoB,iDAApB;AACA,OAAOC,YAAP,MAAyB,uDAAzB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,oBADS;EAEf,WAAW,OAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,uCAJO;EAKf,cAAc,2HALC;EAMf,YAAY,CACV,8BADU;AANG,CAAjB;AAUAA,QAAQ,CAACC,WAAT,GAAuB;EACrBJ,QAAQ,EAARA,QADqB;EAErBC,OAAO,EAAPA,OAFqB;EAGrBC,YAAY,EAAZA;AAHqB,CAAvB;AAKAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,gCAAgC,mCAAAC,KAAK;IAAA,oBACnC,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,ssLAA9C;MAAqvL,SAAQ,8BAA7vL;MAA4xL,QAAO;IAAnyL,GADmC;EAAA;AADnB,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGZ,KAAK,CAACa,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,8BAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,sCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}