{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { SearchInput } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nvar pageData = {\n  \"id\": \"Search input\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/search-input/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/SearchInput/examples/SearchInput.md\",\n  \"propComponents\": [{\n    \"name\": \"SearchInput\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"advancedSearchDelimiter\",\n      \"type\": \"string\",\n      \"description\": \"Delimiter in the query string for pairing attributes with search values.\\nRequired whenever attributes are passed as props\"\n    }, {\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"An accessible label for the search input\"\n    }, {\n      \"name\": \"attributes\",\n      \"type\": \"string[] | SearchAttribute[]\",\n      \"description\": \"Array of attribute values used for dynamically generated advanced search\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the banner\"\n    }, {\n      \"name\": \"formAdditionalItems\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"\"\n    }, {\n      \"name\": \"hasWordsAttrLabel\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Attribute label for strings unassociated with one of the provided listed attributes\"\n    }, {\n      \"name\": \"hint\",\n      \"type\": \"string\",\n      \"description\": \"A suggestion for autocompleting\"\n    }, {\n      \"name\": \"isAdvancedSearchOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"A flag for controlling the open state of a custom advanced search implementation\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if search input is disabled\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n      \"description\": \"A callback for when the input value changes\"\n    }, {\n      \"name\": \"onClear\",\n      \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n      \"description\": \"A callback for when the user clicks the clear button\"\n    }, {\n      \"name\": \"onNextClick\",\n      \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n      \"description\": \"Function called when user clicks to navigate to next result\"\n    }, {\n      \"name\": \"onPreviousClick\",\n      \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n      \"description\": \"Function called when user clicks to navigate to previous result\"\n    }, {\n      \"name\": \"onSearch\",\n      \"type\": \"(\\n  value: string,\\n  event: React.SyntheticEvent<HTMLButtonElement>,\\n  attrValueMap: { [key: string]: string }\\n) => void\",\n      \"description\": \"A callback for when the search button clicked changes\"\n    }, {\n      \"name\": \"onToggleAdvancedSearch\",\n      \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void\",\n      \"description\": \"A callback for when the open advanced search button is clicked\"\n    }, {\n      \"name\": \"openMenuButtonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Label for the button which opens the advanced search form menu\"\n    }, {\n      \"name\": \"placeholder\",\n      \"type\": \"string\",\n      \"description\": \"placeholder text of the search input\"\n    }, {\n      \"name\": \"resetButtonLabel\",\n      \"type\": \"string\",\n      \"description\": \"Label for the buttons which reset the advanced search form and clear the search input\"\n    }, {\n      \"name\": \"resultsCount\",\n      \"type\": \"number | string\",\n      \"description\": \"The number of search results returned. Either a total number of results,\\nor a string representing the current result over the total number of results. i.e. \\\"1 / 5\\\"\"\n    }, {\n      \"name\": \"submitSearchButtonLabel\",\n      \"type\": \"string\",\n      \"description\": \"Label for the buttons which called the onSearch event handler\"\n    }, {\n      \"name\": \"value\",\n      \"type\": \"string\",\n      \"description\": \"Value of the search input\"\n    }]\n  }, {\n    \"name\": \"SearchAttribute\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"attr\",\n      \"type\": \"string\",\n      \"description\": \"The search attribute's value to be provided in the search input's query string.\\nIt should have no spaces and be unique for every attribute\",\n      \"required\": true\n    }, {\n      \"name\": \"display\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"The search attribute's display name. It is used to label the field in the advanced search menu\",\n      \"required\": true\n    }]\n  }],\n  \"beta\": true,\n  \"cssPrefix\": [\"pf-c-search-input\"],\n  \"examples\": [\"Basic\", \"Match with result count\", \"Match with navigable options\", \"With submit button\", \"Focus search input using ref\", \"Advanced\"]\n};\npageData.liveContext = {\n  SearchInput: SearchInput,\n  ExternalLinkSquareAltIcon: ExternalLinkSquareAltIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass BasicSearchInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={evt => this.onChange('', evt)}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Match with result count': function MatchWithResultCount(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass SearchInputWithResultCount extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      resultsCount: 0\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value,\\n        resultsCount: 3\\n      });\\n    };\\n\\n    this.onClear = event => {\\n      this.setState({\\n        value: '',\\n        resultsCount: 0\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={this.onClear}\\n        resultsCount={this.state.resultsCount}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Match with result count\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Match with navigable options': function MatchWithNavigableOptions(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass SearchInputWithNavigableOptions extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      resultsCount: 0,\\n      currentResult: 1\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value,\\n        resultsCount: 3\\n      });\\n    };\\n\\n    this.onClear = event => {\\n      this.setState({\\n        value: '',\\n        resultsCount: 0,\\n        currentResult: 1\\n      });\\n    };\\n\\n    this.onNext = event => {\\n      this.setState(prevState => {\\n        const newCurrentResult = prevState.currentResult + 1;\\n        return {\\n          currentResult: newCurrentResult <= prevState.resultsCount ? newCurrentResult : prevState.resultsCount\\n        };\\n      });\\n    };\\n\\n    this.onPrevious = event => {\\n      this.setState(prevState => {\\n        const newCurrentResult = prevState.currentResult - 1;\\n        return {\\n          currentResult: newCurrentResult > 0 ? newCurrentResult : 1\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={this.onClear}\\n        resultsCount={`${this.state.currentResult} / ${this.state.resultsCount}`}\\n        onNextClick={this.onNext}\\n        onPreviousClick={this.onPrevious}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Match with navigable options\",\n      \"lang\": \"js\"\n    }));\n  },\n  'With submit button': function WithSubmitButton(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nSubmitButtonSearchInput = () => {\\n  const [value, setValue] = React.useState('');\\n\\n  return (\\n    <SearchInput\\n      placeholder='Find by name'\\n      value={value}\\n      onChange={setValue}\\n      onSearch={setValue}\\n      onClear={() => setValue('')}\\n    />\\n  );\\n}\",\n      \"title\": \"With submit button\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Focus search input using ref': function FocusSearchInputUsingRef(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { SearchInput, Button } from '@patternfly/react-core';\\n\\nTextInputSelectAll = () => {\\n  const [value, setValue] = React.useState('');\\n  const ref = React.useRef(null);\\n  return (\\n    <React.Fragment>\\n      <SearchInput ref={ref} value={value} onChange={setValue} onClear={() => setValue('')} />\\n      <Button onClick={() => ref.current && ref.current.focus()}>Focus on the search input</Button>\\n    </React.Fragment>\\n  );\\n};\",\n      \"title\": \"Focus search input using ref\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Advanced': function Advanced(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Checkbox, FormGroup, SearchInput } from '@patternfly/react-core';\\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-square-alt-icon';\\n\\nAdvancedSearchInput = () => {\\n  const [value, setValue] = React.useState('username:player firstname:john');\\n  const [useEqualsAsDelimiter, setUseEqualsAsDelimiter] = React.useState(false);\\n  const [useCustomFooter, setUseCustomFooter] = React.useState(false);\\n\\n  const toggleDelimiter = checked => {\\n    const newValue = value.replace(/:|=/g, checked ? '=' : ':');\\n    setUseEqualsAsDelimiter(checked);\\n    setValue(newValue);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox\\n        label=\\\"Use equal sign as search attribute delimiter\\\"\\n        isChecked={useEqualsAsDelimiter}\\n        onChange={toggleDelimiter}\\n        aria-label=\\\"change delimiter checkbox\\\"\\n        id=\\\"toggle-delimiter\\\"\\n        name=\\\"toggle-delimiter\\\"\\n      />\\n      <Checkbox\\n        label=\\\"Add custom footer element after the attributes in the menu\\\"\\n        isChecked={useCustomFooter}\\n        onChange={value => setUseCustomFooter(value)}\\n        aria-label=\\\"change use custom footer checkbox\\\"\\n        id=\\\"toggle-custom-footer\\\"\\n        name=\\\"toggle-custom-footer\\\"\\n      />\\n      <br />\\n      <SearchInput\\n        attributes={[\\n          { attr: 'username', display: 'Username' },\\n          { attr: 'firstname', display: 'First name' }\\n        ]}\\n        advancedSearchDelimiter={useEqualsAsDelimiter ? '=' : ':'}\\n        value={value}\\n        onChange={setValue}\\n        onSearch={setValue}\\n        onClear={() => setValue('')}\\n        formAdditionalItems={\\n          useCustomFooter ? (\\n            <FormGroup>\\n              <Button variant=\\\"link\\\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\\\"right\\\">\\n                Link\\n              </Button>\\n            </FormGroup>\\n          ) : null\\n        }\\n      />\\n    </>\\n  );\\n};\",\n      \"title\": \"Advanced\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"The search input component can be used to dynamically build a one to one attribute-value advanced search.\\nUsing the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"attributes\"), \" prop alongside the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"advancedSearchDelimiter\"), \" will expose this functionality, as demonstrated in\\nthe following example. The search input component can also be used as a composable component and paired with a Popper\\nor other elements to build a completely custom advanced search form. This feature is demonstrated\\nin the search input's \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"/components/search-input/react-demos\"\n    }, \"react demos\"), \".\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Match with result count\"]), React.createElement(pageData.examples[\"Match with navigable options\"]), React.createElement(pageData.examples[\"With submit button\"]), React.createElement(pageData.examples[\"Focus search input using ref\"]), React.createElement(pageData.examples[\"Advanced\"]));\n};\n\nComponent.displayName = 'ComponentsSearchInputReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","SearchInput","ExternalLinkSquareAltIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/search-input/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { SearchInput } from '@patternfly/react-core';\nimport { ExternalLinkSquareAltIcon } from '@patternfly/react-icons';\nconst pageData = {\n  \"id\": \"Search input\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/search-input/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/SearchInput/examples/SearchInput.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"SearchInput\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"advancedSearchDelimiter\",\n          \"type\": \"string\",\n          \"description\": \"Delimiter in the query string for pairing attributes with search values.\\nRequired whenever attributes are passed as props\"\n        },\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"An accessible label for the search input\"\n        },\n        {\n          \"name\": \"attributes\",\n          \"type\": \"string[] | SearchAttribute[]\",\n          \"description\": \"Array of attribute values used for dynamically generated advanced search\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the banner\"\n        },\n        {\n          \"name\": \"formAdditionalItems\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"\"\n        },\n        {\n          \"name\": \"hasWordsAttrLabel\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Attribute label for strings unassociated with one of the provided listed attributes\"\n        },\n        {\n          \"name\": \"hint\",\n          \"type\": \"string\",\n          \"description\": \"A suggestion for autocompleting\"\n        },\n        {\n          \"name\": \"isAdvancedSearchOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"A flag for controlling the open state of a custom advanced search implementation\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if search input is disabled\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n          \"description\": \"A callback for when the input value changes\"\n        },\n        {\n          \"name\": \"onClear\",\n          \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n          \"description\": \"A callback for when the user clicks the clear button\"\n        },\n        {\n          \"name\": \"onNextClick\",\n          \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n          \"description\": \"Function called when user clicks to navigate to next result\"\n        },\n        {\n          \"name\": \"onPreviousClick\",\n          \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>) => void\",\n          \"description\": \"Function called when user clicks to navigate to previous result\"\n        },\n        {\n          \"name\": \"onSearch\",\n          \"type\": \"(\\n  value: string,\\n  event: React.SyntheticEvent<HTMLButtonElement>,\\n  attrValueMap: { [key: string]: string }\\n) => void\",\n          \"description\": \"A callback for when the search button clicked changes\"\n        },\n        {\n          \"name\": \"onToggleAdvancedSearch\",\n          \"type\": \"(event: React.SyntheticEvent<HTMLButtonElement>, isOpen?: boolean) => void\",\n          \"description\": \"A callback for when the open advanced search button is clicked\"\n        },\n        {\n          \"name\": \"openMenuButtonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Label for the button which opens the advanced search form menu\"\n        },\n        {\n          \"name\": \"placeholder\",\n          \"type\": \"string\",\n          \"description\": \"placeholder text of the search input\"\n        },\n        {\n          \"name\": \"resetButtonLabel\",\n          \"type\": \"string\",\n          \"description\": \"Label for the buttons which reset the advanced search form and clear the search input\"\n        },\n        {\n          \"name\": \"resultsCount\",\n          \"type\": \"number | string\",\n          \"description\": \"The number of search results returned. Either a total number of results,\\nor a string representing the current result over the total number of results. i.e. \\\"1 / 5\\\"\"\n        },\n        {\n          \"name\": \"submitSearchButtonLabel\",\n          \"type\": \"string\",\n          \"description\": \"Label for the buttons which called the onSearch event handler\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"string\",\n          \"description\": \"Value of the search input\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SearchAttribute\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"attr\",\n          \"type\": \"string\",\n          \"description\": \"The search attribute's value to be provided in the search input's query string.\\nIt should have no spaces and be unique for every attribute\",\n          \"required\": true\n        },\n        {\n          \"name\": \"display\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"The search attribute's display name. It is used to label the field in the advanced search menu\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"beta\": true,\n  \"cssPrefix\": [\n    \"pf-c-search-input\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Match with result count\",\n    \"Match with navigable options\",\n    \"With submit button\",\n    \"Focus search input using ref\",\n    \"Advanced\"\n  ]\n};\npageData.liveContext = {\n  SearchInput,\n  ExternalLinkSquareAltIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass BasicSearchInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={evt => this.onChange('', evt)}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Match with result count': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass SearchInputWithResultCount extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      resultsCount: 0\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value,\\n        resultsCount: 3\\n      });\\n    };\\n\\n    this.onClear = event => {\\n      this.setState({\\n        value: '',\\n        resultsCount: 0\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={this.onClear}\\n        resultsCount={this.state.resultsCount}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Match with result count\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Match with navigable options': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nclass SearchInputWithNavigableOptions extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      resultsCount: 0,\\n      currentResult: 1\\n    };\\n\\n    this.onChange = (value, event) => {\\n      this.setState({\\n        value: value,\\n        resultsCount: 3\\n      });\\n    };\\n\\n    this.onClear = event => {\\n      this.setState({\\n        value: '',\\n        resultsCount: 0,\\n        currentResult: 1\\n      });\\n    };\\n\\n    this.onNext = event => {\\n      this.setState(prevState => {\\n        const newCurrentResult = prevState.currentResult + 1;\\n        return {\\n          currentResult: newCurrentResult <= prevState.resultsCount ? newCurrentResult : prevState.resultsCount\\n        };\\n      });\\n    };\\n\\n    this.onPrevious = event => {\\n      this.setState(prevState => {\\n        const newCurrentResult = prevState.currentResult - 1;\\n        return {\\n          currentResult: newCurrentResult > 0 ? newCurrentResult : 1\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <SearchInput\\n        placeholder=\\\"Find by name\\\"\\n        value={this.state.value}\\n        onChange={this.onChange}\\n        onClear={this.onClear}\\n        resultsCount={`${this.state.currentResult} / ${this.state.resultsCount}`}\\n        onNextClick={this.onNext}\\n        onPreviousClick={this.onPrevious}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Match with navigable options\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'With submit button': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { SearchInput } from '@patternfly/react-core';\\n\\nSubmitButtonSearchInput = () => {\\n  const [value, setValue] = React.useState('');\\n\\n  return (\\n    <SearchInput\\n      placeholder='Find by name'\\n      value={value}\\n      onChange={setValue}\\n      onSearch={setValue}\\n      onClear={() => setValue('')}\\n    />\\n  );\\n}\",\"title\":\"With submit button\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Focus search input using ref': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { SearchInput, Button } from '@patternfly/react-core';\\n\\nTextInputSelectAll = () => {\\n  const [value, setValue] = React.useState('');\\n  const ref = React.useRef(null);\\n  return (\\n    <React.Fragment>\\n      <SearchInput ref={ref} value={value} onChange={setValue} onClear={() => setValue('')} />\\n      <Button onClick={() => ref.current && ref.current.focus()}>Focus on the search input</Button>\\n    </React.Fragment>\\n  );\\n};\",\"title\":\"Focus search input using ref\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Advanced': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Checkbox, FormGroup, SearchInput } from '@patternfly/react-core';\\nimport ExternalLinkSquareAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-square-alt-icon';\\n\\nAdvancedSearchInput = () => {\\n  const [value, setValue] = React.useState('username:player firstname:john');\\n  const [useEqualsAsDelimiter, setUseEqualsAsDelimiter] = React.useState(false);\\n  const [useCustomFooter, setUseCustomFooter] = React.useState(false);\\n\\n  const toggleDelimiter = checked => {\\n    const newValue = value.replace(/:|=/g, checked ? '=' : ':');\\n    setUseEqualsAsDelimiter(checked);\\n    setValue(newValue);\\n  };\\n\\n  return (\\n    <>\\n      <Checkbox\\n        label=\\\"Use equal sign as search attribute delimiter\\\"\\n        isChecked={useEqualsAsDelimiter}\\n        onChange={toggleDelimiter}\\n        aria-label=\\\"change delimiter checkbox\\\"\\n        id=\\\"toggle-delimiter\\\"\\n        name=\\\"toggle-delimiter\\\"\\n      />\\n      <Checkbox\\n        label=\\\"Add custom footer element after the attributes in the menu\\\"\\n        isChecked={useCustomFooter}\\n        onChange={value => setUseCustomFooter(value)}\\n        aria-label=\\\"change use custom footer checkbox\\\"\\n        id=\\\"toggle-custom-footer\\\"\\n        name=\\\"toggle-custom-footer\\\"\\n      />\\n      <br />\\n      <SearchInput\\n        attributes={[\\n          { attr: 'username', display: 'Username' },\\n          { attr: 'firstname', display: 'First name' }\\n        ]}\\n        advancedSearchDelimiter={useEqualsAsDelimiter ? '=' : ':'}\\n        value={value}\\n        onChange={setValue}\\n        onSearch={setValue}\\n        onClear={() => setValue('')}\\n        formAdditionalItems={\\n          useCustomFooter ? (\\n            <FormGroup>\\n              <Button variant=\\\"link\\\" isInline icon={<ExternalLinkSquareAltIcon />} iconPosition=\\\"right\\\">\\n                Link\\n              </Button>\\n            </FormGroup>\\n          ) : null\\n        }\\n      />\\n    </>\\n  );\\n};\",\"title\":\"Advanced\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`The search input component can be used to dynamically build a one to one attribute-value advanced search.\nUsing the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`attributes`}\n        </code>\n        {` prop alongside the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`advancedSearchDelimiter`}\n        </code>\n        {` will expose this functionality, as demonstrated in\nthe following example. The search input component can also be used as a composable component and paired with a Popper\nor other elements to build a completely custom advanced search form. This feature is demonstrated\nin the search input's `}\n                <a href=\"/components/search-input/react-demos\">{`react demos`}</a>\n        {`.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Match with result count\"])}\n    {React.createElement(pageData.examples[\"Match with navigable options\"])}\n    {React.createElement(pageData.examples[\"With submit button\"])}\n    {React.createElement(pageData.examples[\"Focus search input using ref\"])}\n    {React.createElement(pageData.examples[\"Advanced\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsSearchInputReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}