{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Chip\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/chip/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Chip/examples/Chip.md\",\n  \"propComponents\": [{\n    \"name\": \"Chip\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the chip text\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the chip item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"closeBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria Label for close button\",\n      \"defaultValue\": \"'close'\"\n    }, {\n      \"name\": \"component\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip.\",\n      \"defaultValue\": \"'div'\"\n    }, {\n      \"name\": \"isOverflowChip\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the chip is an overflow chip\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isReadOnly\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if chip is read only\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Function that is called when clicking on the chip close button\",\n      \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if text is longer\",\n      \"defaultValue\": \"'top'\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-chip\"],\n  \"examples\": [\"Default\"]\n};\npageData.examples = {\n  'Default': function Default(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Badge, Chip } from '@patternfly/react-core';\\n\\nexport const ChipDefault: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState({\\n    chip: {\\n      name: 'Chip 1'\\n    },\\n    longchip: {\\n      name: 'Really long chip that goes on and on'\\n    },\\n    badgechip: {\\n      name: 'Chip',\\n      isRead: true,\\n      count: 7\\n    },\\n    readonlychip: {\\n      name: 'Read-only chip'\\n    },\\n    overflowchip: {\\n      name: 'Overflow chip'\\n    }\\n  });\\n\\n  const deleteItem = (id: string) => {\\n    setChips({ ...chips, [id]: null });\\n  };\\n\\n  const { chip, longchip, badgechip, readonlychip, overflowchip } = chips;\\n  return (\\n    <React.Fragment>\\n      {chip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip1\\\" onClick={() => deleteItem('chip')}>\\n            {chip.name}\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      {longchip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip2\\\" onClick={() => deleteItem('longchip')}>\\n            {longchip.name}\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      {badgechip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip3\\\" onClick={() => deleteItem('badgechip')}>\\n            {badgechip.name}\\n            <Badge isRead={badgechip.isRead}>{badgechip.count}</Badge>\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      <Chip key=\\\"chip4\\\" onClick={() => deleteItem('readonlychip')} isReadOnly>\\n        {readonlychip.name}\\n      </Chip>\\n      <br /> <br />\\n      {overflowchip && (\\n        <Chip key=\\\"chip5\\\" component=\\\"button\\\" onClick={() => deleteItem('overflowchip')} isOverflowChip>\\n          {overflowchip.name}\\n        </Chip>\\n      )}\\n    </React.Fragment>\\n  );\\n};\\n\",\n      \"title\": \"Default\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Default\"]));\n};\n\nComponent.displayName = 'ComponentsChipReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/chip/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Chip\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/chip/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Chip/examples/Chip.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Chip\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the chip text\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the chip item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"closeBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria Label for close button\",\n          \"defaultValue\": \"'close'\"\n        },\n        {\n          \"name\": \"component\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip.\",\n          \"defaultValue\": \"'div'\"\n        },\n        {\n          \"name\": \"isOverflowChip\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the chip is an overflow chip\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isReadOnly\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if chip is read only\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Function that is called when clicking on the chip close button\",\n          \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if text is longer\",\n          \"defaultValue\": \"'top'\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-chip\"\n  ],\n  \"examples\": [\n    \"Default\"\n  ]\n};\npageData.examples = {\n  'Default': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Badge, Chip } from '@patternfly/react-core';\\n\\nexport const ChipDefault: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState({\\n    chip: {\\n      name: 'Chip 1'\\n    },\\n    longchip: {\\n      name: 'Really long chip that goes on and on'\\n    },\\n    badgechip: {\\n      name: 'Chip',\\n      isRead: true,\\n      count: 7\\n    },\\n    readonlychip: {\\n      name: 'Read-only chip'\\n    },\\n    overflowchip: {\\n      name: 'Overflow chip'\\n    }\\n  });\\n\\n  const deleteItem = (id: string) => {\\n    setChips({ ...chips, [id]: null });\\n  };\\n\\n  const { chip, longchip, badgechip, readonlychip, overflowchip } = chips;\\n  return (\\n    <React.Fragment>\\n      {chip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip1\\\" onClick={() => deleteItem('chip')}>\\n            {chip.name}\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      {longchip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip2\\\" onClick={() => deleteItem('longchip')}>\\n            {longchip.name}\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      {badgechip && (\\n        <React.Fragment>\\n          <Chip key=\\\"chip3\\\" onClick={() => deleteItem('badgechip')}>\\n            {badgechip.name}\\n            <Badge isRead={badgechip.isRead}>{badgechip.count}</Badge>\\n          </Chip>\\n          <br /> <br />\\n        </React.Fragment>\\n      )}\\n      <Chip key=\\\"chip4\\\" onClick={() => deleteItem('readonlychip')} isReadOnly>\\n        {readonlychip.name}\\n      </Chip>\\n      <br /> <br />\\n      {overflowchip && (\\n        <Chip key=\\\"chip5\\\" component=\\\"button\\\" onClick={() => deleteItem('overflowchip')} isOverflowChip>\\n          {overflowchip.name}\\n        </Chip>\\n      )}\\n    </React.Fragment>\\n  );\\n};\\n\",\"title\":\"Default\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Default\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsChipReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AAEA,IAAMC,QAAQ,GAAG;EACf,MAAM,MADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,wBAJO;EAKf,cAAc,iIALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,MADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe,2CAHjB;MAIE,gBAAgB;IAJlB,CANO,EAYP;MACE,QAAQ,mBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,6BAHjB;MAIE,gBAAgB;IAJlB,CAZO,EAkBP;MACE,QAAQ,WADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,4HAHjB;MAIE,gBAAgB;IAJlB,CAlBO,EAwBP;MACE,QAAQ,gBADV;MAEE,QAAQ,SAFV;MAGE,eAAe,iDAHjB;MAIE,gBAAgB;IAJlB,CAxBO,EA8BP;MACE,QAAQ,YADV;MAEE,QAAQ,SAFV;MAGE,eAAe,sCAHjB;MAIE,gBAAgB;IAJlB,CA9BO,EAoCP;MACE,QAAQ,SADV;MAEE,QAAQ,mCAFV;MAGE,eAAe,gEAHjB;MAIE,gBAAgB;IAJlB,CApCO,EA0CP;MACE,QAAQ,iBADV;MAEE,QAAQ,mMAFV;MAGE,eAAe,8DAHjB;MAIE,gBAAgB;IAJlB,CA1CO;EAHX,CADgB,CANH;EA6Df,aAAa,CACX,WADW,CA7DE;EAgEf,YAAY,CACV,SADU;AAhEG,CAAjB;AAoEAA,QAAQ,CAACC,QAAT,GAAoB;EAClB,WAAW,iBAAAC,KAAK;IAAA,oBACd,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,qzDAA9C;MAAo2D,SAAQ,SAA52D;MAAs3D,QAAO;IAA73D,GADc;EAAA;AADE,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cADF,EAIGR,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,SAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,yBAAxB;AACAF,SAAS,CAACH,QAAV,GAAqBA,QAArB;AAEA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}