{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { Link } from '@reach/router';\nimport pfLogoSm from '../../../../node_modules/@patternfly/react-core/src/components/ApplicationLauncher/examples/./pf-logo-small.svg';\nvar pageData = {\n  \"id\": \"Application launcher\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/application-launcher/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ApplicationLauncher/examples/ApplicationLauncher.md\",\n  \"propComponents\": [{\n    \"name\": \"ApplicationLauncher\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Adds accessible text to the button. Required for plain buttons\",\n      \"defaultValue\": \"'Application launcher'\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional element css classes\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"direction\",\n      \"type\": \"DropdownDirection | 'up' | 'down'\",\n      \"description\": \"Display menu above or below dropdown toggle\",\n      \"defaultValue\": \"DropdownDirection.down\"\n    }, {\n      \"name\": \"favorites\",\n      \"type\": \"string[]\",\n      \"description\": \"ID list of favorited ApplicationLauncherItems\",\n      \"defaultValue\": \"[]\"\n    }, {\n      \"name\": \"favoritesLabel\",\n      \"type\": \"string\",\n      \"description\": \"Label for the favorites group\",\n      \"defaultValue\": \"'Favorites'\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Render Application launcher toggle as disabled icon\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isGrouped\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if application launcher has groups\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"open bool\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"items\",\n      \"type\": \"React.ReactNode[]\",\n      \"description\": \"Array of application launcher items\"\n    }, {\n      \"name\": \"menuAppendTo\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"'inline'\"\n    }, {\n      \"name\": \"onFavorite\",\n      \"type\": \"(itemId: string, isFavorite: boolean) => void\",\n      \"description\": \"Enables favorites. Callback called when an ApplicationLauncherItem's favorite button is clicked\"\n    }, {\n      \"name\": \"onSearch\",\n      \"type\": \"(textInput: string) => void\",\n      \"description\": \"Enables search. Callback called when text input is entered into search box\"\n    }, {\n      \"name\": \"onSelect\",\n      \"type\": \"(event: any) => void\",\n      \"description\": \"Function callback called when user selects item\",\n      \"defaultValue\": \"(_event: any): any => undefined\"\n    }, {\n      \"name\": \"onToggle\",\n      \"type\": \"(value: boolean) => void\",\n      \"description\": \"Callback called when application launcher toggle is clicked\",\n      \"defaultValue\": \"(_value: boolean): any => undefined\"\n    }, {\n      \"name\": \"position\",\n      \"type\": \"DropdownPosition | 'right' | 'left'\",\n      \"description\": \"Indicates where menu will be alligned horizontally\",\n      \"defaultValue\": \"DropdownPosition.left\"\n    }, {\n      \"name\": \"searchNoResultsText\",\n      \"type\": \"string\",\n      \"description\": \"Text for search input when no results are found\",\n      \"defaultValue\": \"'No results found'\"\n    }, {\n      \"name\": \"searchPlaceholderText\",\n      \"type\": \"string\",\n      \"description\": \"Placeholder text for search input\",\n      \"defaultValue\": \"'Filter by name...'\"\n    }, {\n      \"name\": \"searchProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional properties for search input\"\n    }, {\n      \"name\": \"toggleIcon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Toggle Icon, optional to override the icon used for the toggle\",\n      \"defaultValue\": \"<ThIcon />\"\n    }, {\n      \"name\": \"toggleId\",\n      \"type\": \"string\",\n      \"description\": \"ID of toggle\"\n    }]\n  }, {\n    \"name\": \"ApplicationLauncherItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"ariaIsFavoriteLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label text for favoritable button when favorited\",\n      \"defaultValue\": \"'starred'\"\n    }, {\n      \"name\": \"ariaIsNotFavoriteLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label text for favoritable button when not favorited\",\n      \"defaultValue\": \"'not starred'\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"component\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"A ReactElement to render, or a string to use as the component tag.\\nExample: component={<Link to=\\\"/components/alert/\\\">Alert</Link>}\\nExample: component=\\\"button\\\"\",\n      \"defaultValue\": \"'a'\"\n    }, {\n      \"name\": \"customChild\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"\"\n    }, {\n      \"name\": \"enterTriggersArrowDown\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if hitting enter triggers an arrow down key press. Automatically passed to favorites list items.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"icon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Icon rendered before the text\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"ID of the item. Required for tracking favorites.\"\n    }, {\n      \"name\": \"isExternal\",\n      \"type\": \"boolean\",\n      \"description\": \"If clicking on the item should open the page in a separate window\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isFavorite\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the item is favorited\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"tooltip\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Tooltip to display when hovered over the item\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"tooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional tooltip props forwarded to the Tooltip component\",\n      \"defaultValue\": \"null\"\n    }]\n  }, {\n    \"name\": \"ApplicationLauncherContent\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Main content to be rendered\",\n      \"required\": true\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-app-launcher\"],\n  \"examples\": [\"Basic\", \"Router link\", \"Disabled\", \"Aligned right\", \"Aligned top\", \"With tooltip\", \"With sections and icons\", \"With favorites and search\", \"With custom icon\", \"Basic with menu appended to document body\"]\n};\npageData.liveContext = {\n  HelpIcon: HelpIcon,\n  Link: Link,\n  pfLogoSm: pfLogoSm\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherBasic: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Router link': function RouterLink(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Link } from '@reach/router';\\nimport { ApplicationLauncher, ApplicationLauncherItem, ApplicationLauncherContent } from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon: JSX.Element = <img src={pfLogoSm} />;\\n\\nconst linkStyle: React.CSSProperties = {\\n  color: 'var(--pf-c-app-launcher__menu-item--Color)',\\n  textDecoration: 'none'\\n};\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem\\n    key=\\\"router1\\\"\\n    component={\\n      <Link to=\\\"/\\\" style={linkStyle}>\\n        @reach/router Link\\n      </Link>\\n    }\\n  />,\\n  <ApplicationLauncherItem\\n    key=\\\"router2\\\"\\n    isExternal\\n    icon={icon}\\n    component={\\n      <Link to=\\\"/\\\" style={linkStyle}>\\n        <ApplicationLauncherContent>@reach/router Link with icon</ApplicationLauncherContent>\\n      </Link>\\n    }\\n  />,\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherRouterLink: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\n      \"title\": \"Router link\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Disabled': function Disabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherDisabled: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} isDisabled />\\n  );\\n};\\n\",\n      \"title\": \"Disabled\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Aligned right': function AlignedRight(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem, DropdownPosition } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherAlignRight: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      position={DropdownPosition.right}\\n      style={{ marginLeft: 'calc(100% - 46px)' }}\\n    />\\n  );\\n};\\n\",\n      \"title\": \"Aligned right\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Aligned top': function AlignedTop(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem, DropdownDirection } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherAlignTop: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      direction={DropdownDirection.up}\\n    />\\n  );\\n};\\n\",\n      \"title\": \"Aligned top\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With tooltip': function WithTooltip(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1b\\\" href=\\\"#\\\" tooltip={<div>Launch Application 1</div>}>\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem\\n    key=\\\"application_2b\\\"\\n    component=\\\"button\\\"\\n    tooltip={<div>Launch Application 2</div>}\\n    tooltipProps={{ position: 'right' }}\\n    onClick={() => alert('Clicked item 2')}\\n  >\\n    Application 2 (onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem\\n    key=\\\"application_3b\\\"\\n    component=\\\"button\\\"\\n    tooltip={<div>Launch Application 3</div>}\\n    tooltipProps={{ position: 'bottom' }}\\n    onClick={() => alert('Clicked item 3')}\\n  >\\n    Application 3 (onClick)\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherTooltip: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\n      \"title\": \"With tooltip\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With sections and icons': function WithSectionsAndIcons(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  ApplicationLauncher,\\n  ApplicationLauncherItem,\\n  ApplicationLauncherGroup,\\n  ApplicationLauncherSeparator\\n} from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon = <img src={pfLogoSm} />;\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherGroup key=\\\"group 1c\\\">\\n    <ApplicationLauncherItem key=\\\"group 1a\\\" icon={icon}>\\n      Item without group title\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 2\\\" key=\\\"group 2c\\\">\\n    <ApplicationLauncherItem key=\\\"group 2a\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 2 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 2b\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 2 anchor link\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 3\\\" key=\\\"group 3c\\\">\\n    <ApplicationLauncherItem key=\\\"group 3a\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 3 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 3b\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 3 anchor link\\n    </ApplicationLauncherItem>\\n  </ApplicationLauncherGroup>\\n];\\n\\nexport const ApplicationLauncherSectionsAndIcons: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} isGrouped />\\n  );\\n};\\n\",\n      \"title\": \"With sections and icons\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With favorites and search': function WithFavoritesAndSearch(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  ApplicationLauncher,\\n  ApplicationLauncherItem,\\n  ApplicationLauncherGroup,\\n  ApplicationLauncherSeparator\\n} from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon: JSX.Element = <img src={pfLogoSm} />;\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherGroup key=\\\"group 1c\\\">\\n    <ApplicationLauncherItem key=\\\"group 1a\\\" id=\\\"item-1\\\" icon={icon}>\\n      Item without group title\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 2\\\" key=\\\"group 2c\\\">\\n    <ApplicationLauncherItem key=\\\"group 2a\\\" id=\\\"item-2\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 2 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 2b\\\" id=\\\"item-3\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 2 anchor link\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 3\\\" key=\\\"group 3c\\\">\\n    <ApplicationLauncherItem key=\\\"group 3a\\\" id=\\\"item-4\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 3 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 3b\\\" id=\\\"item-5\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 3 anchor link\\n    </ApplicationLauncherItem>\\n  </ApplicationLauncherGroup>\\n];\\n\\nexport const ApplicationLauncherFavoritesAndSearch: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [favorites, setFavorites] = React.useState<string[]>([]);\\n  const [filteredItems, setFilteredItems] = React.useState<React.ReactNode[]>(null);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n\\n  const onFavorite = (itemId: string, isFavorite: boolean) => {\\n    let updatedFavorites: string[] = [...favorites, itemId];\\n\\n    if (isFavorite) {\\n      updatedFavorites = favorites.filter(id => id !== itemId);\\n    }\\n\\n    setFavorites(updatedFavorites);\\n  };\\n\\n  const onSearch = (textInput: string) => {\\n    if (textInput === '') {\\n      setFilteredItems(null);\\n    } else {\\n      const filteredGroups = appLauncherItems\\n        .map((group: React.ReactElement) => {\\n          const filteredGroup = React.cloneElement(group, {\\n            children: group.props.children.filter((item: React.ReactElement) => {\\n              if (item.type === ApplicationLauncherSeparator) {\\n                return item;\\n              }\\n\\n              return item.props.children.toLowerCase().includes(textInput.toLowerCase());\\n            })\\n          });\\n\\n          if (\\n            filteredGroup.props.children.length > 0 &&\\n            filteredGroup.props.children[0].type !== ApplicationLauncherSeparator\\n          ) {\\n            return filteredGroup;\\n          }\\n        })\\n        .filter(newGroup => newGroup);\\n\\n      if (filteredGroups.length > 0) {\\n        let lastGroup = filteredGroups.pop();\\n\\n        lastGroup = React.cloneElement(lastGroup, {\\n          children: lastGroup.props.children.filter(item => item.type !== ApplicationLauncherSeparator)\\n        });\\n\\n        filteredGroups.push(lastGroup);\\n      }\\n\\n      setFilteredItems(filteredGroups);\\n    }\\n  };\\n\\n  return (\\n    <ApplicationLauncher\\n      onToggle={onToggle}\\n      onFavorite={onFavorite}\\n      onSearch={onSearch}\\n      isOpen={isOpen}\\n      items={filteredItems || appLauncherItems}\\n      favorites={favorites}\\n      isGrouped\\n    />\\n  );\\n};\\n\",\n      \"title\": \"With favorites and search\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With custom icon': function WithCustomIcon(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherCustomIcon: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      toggleIcon={<HelpIcon />}\\n    />\\n  );\\n};\\n\",\n      \"title\": \"With custom icon\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Basic with menu appended to document body': function BasicWithMenuAppendedToDocumentBody(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherDocumentBody: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      menuAppendTo={() => document.body}\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n    />\\n  );\\n};\\n\",\n      \"title\": \"Basic with menu appended to document body\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Note: Application launcher is built on Dropdown, for extended API go to \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"/documentation/react/components/dropdown\"\n  }, \"Dropdown\"), \" documentation.\\nTo add a tooltip, use the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"tooltip\"), \" prop and optionally add more tooltip props by using \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"tooltipProps\"), \". For more tooltip information go to \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"/documentation/react/components/tooltip\"\n  }, \"Tooltip\"), \".\"), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Router link\"]), React.createElement(pageData.examples[\"Disabled\"]), React.createElement(pageData.examples[\"Aligned right\"]), React.createElement(pageData.examples[\"Aligned top\"]), React.createElement(pageData.examples[\"With tooltip\"]), React.createElement(pageData.examples[\"With sections and icons\"]), React.createElement(pageData.examples[\"With favorites and search\"]), React.createElement(pageData.examples[\"With custom icon\"]), React.createElement(pageData.examples[\"Basic with menu appended to document body\"]));\n};\n\nComponent.displayName = 'ComponentsApplicationLauncherReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","HelpIcon","pfLogoSm","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/application-launcher/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\nimport { Link } from '@reach/router';\nimport pfLogoSm from '../../../../node_modules/@patternfly/react-core/src/components/ApplicationLauncher/examples/./pf-logo-small.svg';\nconst pageData = {\n  \"id\": \"Application launcher\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/application-launcher/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ApplicationLauncher/examples/ApplicationLauncher.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"ApplicationLauncher\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Adds accessible text to the button. Required for plain buttons\",\n          \"defaultValue\": \"'Application launcher'\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional element css classes\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"direction\",\n          \"type\": \"DropdownDirection | 'up' | 'down'\",\n          \"description\": \"Display menu above or below dropdown toggle\",\n          \"defaultValue\": \"DropdownDirection.down\"\n        },\n        {\n          \"name\": \"favorites\",\n          \"type\": \"string[]\",\n          \"description\": \"ID list of favorited ApplicationLauncherItems\",\n          \"defaultValue\": \"[]\"\n        },\n        {\n          \"name\": \"favoritesLabel\",\n          \"type\": \"string\",\n          \"description\": \"Label for the favorites group\",\n          \"defaultValue\": \"'Favorites'\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Render Application launcher toggle as disabled icon\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isGrouped\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if application launcher has groups\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"open bool\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"items\",\n          \"type\": \"React.ReactNode[]\",\n          \"description\": \"Array of application launcher items\"\n        },\n        {\n          \"name\": \"menuAppendTo\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"'inline'\"\n        },\n        {\n          \"name\": \"onFavorite\",\n          \"type\": \"(itemId: string, isFavorite: boolean) => void\",\n          \"description\": \"Enables favorites. Callback called when an ApplicationLauncherItem's favorite button is clicked\"\n        },\n        {\n          \"name\": \"onSearch\",\n          \"type\": \"(textInput: string) => void\",\n          \"description\": \"Enables search. Callback called when text input is entered into search box\"\n        },\n        {\n          \"name\": \"onSelect\",\n          \"type\": \"(event: any) => void\",\n          \"description\": \"Function callback called when user selects item\",\n          \"defaultValue\": \"(_event: any): any => undefined\"\n        },\n        {\n          \"name\": \"onToggle\",\n          \"type\": \"(value: boolean) => void\",\n          \"description\": \"Callback called when application launcher toggle is clicked\",\n          \"defaultValue\": \"(_value: boolean): any => undefined\"\n        },\n        {\n          \"name\": \"position\",\n          \"type\": \"DropdownPosition | 'right' | 'left'\",\n          \"description\": \"Indicates where menu will be alligned horizontally\",\n          \"defaultValue\": \"DropdownPosition.left\"\n        },\n        {\n          \"name\": \"searchNoResultsText\",\n          \"type\": \"string\",\n          \"description\": \"Text for search input when no results are found\",\n          \"defaultValue\": \"'No results found'\"\n        },\n        {\n          \"name\": \"searchPlaceholderText\",\n          \"type\": \"string\",\n          \"description\": \"Placeholder text for search input\",\n          \"defaultValue\": \"'Filter by name...'\"\n        },\n        {\n          \"name\": \"searchProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional properties for search input\"\n        },\n        {\n          \"name\": \"toggleIcon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Toggle Icon, optional to override the icon used for the toggle\",\n          \"defaultValue\": \"<ThIcon />\"\n        },\n        {\n          \"name\": \"toggleId\",\n          \"type\": \"string\",\n          \"description\": \"ID of toggle\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ApplicationLauncherItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"ariaIsFavoriteLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label text for favoritable button when favorited\",\n          \"defaultValue\": \"'starred'\"\n        },\n        {\n          \"name\": \"ariaIsNotFavoriteLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label text for favoritable button when not favorited\",\n          \"defaultValue\": \"'not starred'\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"component\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"A ReactElement to render, or a string to use as the component tag.\\nExample: component={<Link to=\\\"/components/alert/\\\">Alert</Link>}\\nExample: component=\\\"button\\\"\",\n          \"defaultValue\": \"'a'\"\n        },\n        {\n          \"name\": \"customChild\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"\"\n        },\n        {\n          \"name\": \"enterTriggersArrowDown\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if hitting enter triggers an arrow down key press. Automatically passed to favorites list items.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"icon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Icon rendered before the text\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"ID of the item. Required for tracking favorites.\"\n        },\n        {\n          \"name\": \"isExternal\",\n          \"type\": \"boolean\",\n          \"description\": \"If clicking on the item should open the page in a separate window\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isFavorite\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the item is favorited\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"tooltip\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Tooltip to display when hovered over the item\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"tooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional tooltip props forwarded to the Tooltip component\",\n          \"defaultValue\": \"null\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ApplicationLauncherContent\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Main content to be rendered\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-app-launcher\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Router link\",\n    \"Disabled\",\n    \"Aligned right\",\n    \"Aligned top\",\n    \"With tooltip\",\n    \"With sections and icons\",\n    \"With favorites and search\",\n    \"With custom icon\",\n    \"Basic with menu appended to document body\"\n  ]\n};\npageData.liveContext = {\n  HelpIcon,\n  Link,\n  pfLogoSm\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherBasic: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Router link': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Link } from '@reach/router';\\nimport { ApplicationLauncher, ApplicationLauncherItem, ApplicationLauncherContent } from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon: JSX.Element = <img src={pfLogoSm} />;\\n\\nconst linkStyle: React.CSSProperties = {\\n  color: 'var(--pf-c-app-launcher__menu-item--Color)',\\n  textDecoration: 'none'\\n};\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem\\n    key=\\\"router1\\\"\\n    component={\\n      <Link to=\\\"/\\\" style={linkStyle}>\\n        @reach/router Link\\n      </Link>\\n    }\\n  />,\\n  <ApplicationLauncherItem\\n    key=\\\"router2\\\"\\n    isExternal\\n    icon={icon}\\n    component={\\n      <Link to=\\\"/\\\" style={linkStyle}>\\n        <ApplicationLauncherContent>@reach/router Link with icon</ApplicationLauncherContent>\\n      </Link>\\n    }\\n  />,\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherRouterLink: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\"title\":\"Router link\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherDisabled: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} isDisabled />\\n  );\\n};\\n\",\"title\":\"Disabled\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Aligned right': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem, DropdownPosition } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherAlignRight: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      position={DropdownPosition.right}\\n      style={{ marginLeft: 'calc(100% - 46px)' }}\\n    />\\n  );\\n};\\n\",\"title\":\"Aligned right\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Aligned top': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem, DropdownDirection } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherAlignTop: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      direction={DropdownDirection.up}\\n    />\\n  );\\n};\\n\",\"title\":\"Aligned top\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With tooltip': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1b\\\" href=\\\"#\\\" tooltip={<div>Launch Application 1</div>}>\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem\\n    key=\\\"application_2b\\\"\\n    component=\\\"button\\\"\\n    tooltip={<div>Launch Application 2</div>}\\n    tooltipProps={{ position: 'right' }}\\n    onClick={() => alert('Clicked item 2')}\\n  >\\n    Application 2 (onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem\\n    key=\\\"application_3b\\\"\\n    component=\\\"button\\\"\\n    tooltip={<div>Launch Application 3</div>}\\n    tooltipProps={{ position: 'bottom' }}\\n    onClick={() => alert('Clicked item 3')}\\n  >\\n    Application 3 (onClick)\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherTooltip: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} />;\\n};\\n\",\"title\":\"With tooltip\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With sections and icons': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  ApplicationLauncher,\\n  ApplicationLauncherItem,\\n  ApplicationLauncherGroup,\\n  ApplicationLauncherSeparator\\n} from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon = <img src={pfLogoSm} />;\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherGroup key=\\\"group 1c\\\">\\n    <ApplicationLauncherItem key=\\\"group 1a\\\" icon={icon}>\\n      Item without group title\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 2\\\" key=\\\"group 2c\\\">\\n    <ApplicationLauncherItem key=\\\"group 2a\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 2 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 2b\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 2 anchor link\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 3\\\" key=\\\"group 3c\\\">\\n    <ApplicationLauncherItem key=\\\"group 3a\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 3 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 3b\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 3 anchor link\\n    </ApplicationLauncherItem>\\n  </ApplicationLauncherGroup>\\n];\\n\\nexport const ApplicationLauncherSectionsAndIcons: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher onSelect={onSelect} onToggle={onToggle} isOpen={isOpen} items={appLauncherItems} isGrouped />\\n  );\\n};\\n\",\"title\":\"With sections and icons\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With favorites and search': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  ApplicationLauncher,\\n  ApplicationLauncherItem,\\n  ApplicationLauncherGroup,\\n  ApplicationLauncherSeparator\\n} from '@patternfly/react-core';\\nimport pfLogoSm from './pf-logo-small.svg';\\n\\nconst icon: JSX.Element = <img src={pfLogoSm} />;\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherGroup key=\\\"group 1c\\\">\\n    <ApplicationLauncherItem key=\\\"group 1a\\\" id=\\\"item-1\\\" icon={icon}>\\n      Item without group title\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 2\\\" key=\\\"group 2c\\\">\\n    <ApplicationLauncherItem key=\\\"group 2a\\\" id=\\\"item-2\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 2 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 2b\\\" id=\\\"item-3\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 2 anchor link\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherSeparator key=\\\"separator\\\" />\\n  </ApplicationLauncherGroup>,\\n  <ApplicationLauncherGroup label=\\\"Group 3\\\" key=\\\"group 3c\\\">\\n    <ApplicationLauncherItem key=\\\"group 3a\\\" id=\\\"item-4\\\" isExternal icon={icon} component=\\\"button\\\">\\n      Group 3 button\\n    </ApplicationLauncherItem>\\n    <ApplicationLauncherItem key=\\\"group 3b\\\" id=\\\"item-5\\\" isExternal href=\\\"#\\\" icon={icon}>\\n      Group 3 anchor link\\n    </ApplicationLauncherItem>\\n  </ApplicationLauncherGroup>\\n];\\n\\nexport const ApplicationLauncherFavoritesAndSearch: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n  const [favorites, setFavorites] = React.useState<string[]>([]);\\n  const [filteredItems, setFilteredItems] = React.useState<React.ReactNode[]>(null);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n\\n  const onFavorite = (itemId: string, isFavorite: boolean) => {\\n    let updatedFavorites: string[] = [...favorites, itemId];\\n\\n    if (isFavorite) {\\n      updatedFavorites = favorites.filter(id => id !== itemId);\\n    }\\n\\n    setFavorites(updatedFavorites);\\n  };\\n\\n  const onSearch = (textInput: string) => {\\n    if (textInput === '') {\\n      setFilteredItems(null);\\n    } else {\\n      const filteredGroups = appLauncherItems\\n        .map((group: React.ReactElement) => {\\n          const filteredGroup = React.cloneElement(group, {\\n            children: group.props.children.filter((item: React.ReactElement) => {\\n              if (item.type === ApplicationLauncherSeparator) {\\n                return item;\\n              }\\n\\n              return item.props.children.toLowerCase().includes(textInput.toLowerCase());\\n            })\\n          });\\n\\n          if (\\n            filteredGroup.props.children.length > 0 &&\\n            filteredGroup.props.children[0].type !== ApplicationLauncherSeparator\\n          ) {\\n            return filteredGroup;\\n          }\\n        })\\n        .filter(newGroup => newGroup);\\n\\n      if (filteredGroups.length > 0) {\\n        let lastGroup = filteredGroups.pop();\\n\\n        lastGroup = React.cloneElement(lastGroup, {\\n          children: lastGroup.props.children.filter(item => item.type !== ApplicationLauncherSeparator)\\n        });\\n\\n        filteredGroups.push(lastGroup);\\n      }\\n\\n      setFilteredItems(filteredGroups);\\n    }\\n  };\\n\\n  return (\\n    <ApplicationLauncher\\n      onToggle={onToggle}\\n      onFavorite={onFavorite}\\n      onSearch={onSearch}\\n      isOpen={isOpen}\\n      items={filteredItems || appLauncherItems}\\n      favorites={favorites}\\n      isGrouped\\n    />\\n  );\\n};\\n\",\"title\":\"With favorites and search\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With custom icon': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\nimport HelpIcon from '@patternfly/react-icons/dist/esm/icons/help-icon';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherCustomIcon: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n      toggleIcon={<HelpIcon />}\\n    />\\n  );\\n};\\n\",\"title\":\"With custom icon\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Basic with menu appended to document body': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ApplicationLauncher, ApplicationLauncherItem } from '@patternfly/react-core';\\n\\nconst appLauncherItems: React.ReactElement[] = [\\n  <ApplicationLauncherItem key=\\\"application_1a\\\" href=\\\"#\\\">\\n    Application 1 (anchor link)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"application_2a\\\" component=\\\"button\\\" onClick={() => alert('Clicked item 2')}>\\n    Application 2 (button with onClick)\\n  </ApplicationLauncherItem>,\\n  <ApplicationLauncherItem key=\\\"disabled_application_4a\\\" isDisabled>\\n    Unavailable application\\n  </ApplicationLauncherItem>\\n];\\n\\nexport const ApplicationLauncherDocumentBody: React.FunctionComponent = () => {\\n  const [isOpen, setIsOpen] = React.useState(false);\\n\\n  const onToggle = (isOpen: boolean) => setIsOpen(isOpen);\\n  const onSelect = (_event: any) => setIsOpen(prevIsOpen => !prevIsOpen);\\n\\n  return (\\n    <ApplicationLauncher\\n      menuAppendTo={() => document.body}\\n      onSelect={onSelect}\\n      onToggle={onToggle}\\n      isOpen={isOpen}\\n      items={appLauncherItems}\\n    />\\n  );\\n};\\n\",\"title\":\"Basic with menu appended to document body\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Note: Application launcher is built on Dropdown, for extended API go to `}\n      <PatternflyThemeLink {...{\"to\":\"/documentation/react/components/dropdown\"}}>\n        {`Dropdown`}\n      </PatternflyThemeLink>\n      {` documentation.\nTo add a tooltip, use the `}\n      <code {...{\"className\":\"ws-code\"}}>\n        {`tooltip`}\n      </code>\n      {` prop and optionally add more tooltip props by using `}\n      <code {...{\"className\":\"ws-code\"}}>\n        {`tooltipProps`}\n      </code>\n      {`. For more tooltip information go to `}\n      <PatternflyThemeLink {...{\"to\":\"/documentation/react/components/tooltip\"}}>\n        {`Tooltip`}\n      </PatternflyThemeLink>\n      {`.`}\n    </p>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Router link\"])}\n    {React.createElement(pageData.examples[\"Disabled\"])}\n    {React.createElement(pageData.examples[\"Aligned right\"])}\n    {React.createElement(pageData.examples[\"Aligned top\"])}\n    {React.createElement(pageData.examples[\"With tooltip\"])}\n    {React.createElement(pageData.examples[\"With sections and icons\"])}\n    {React.createElement(pageData.examples[\"With favorites and search\"])}\n    {React.createElement(pageData.examples[\"With custom icon\"])}\n    {React.createElement(pageData.examples[\"Basic with menu appended to document body\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsApplicationLauncherReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,SAASF,IAAT,QAAqB,eAArB;AACA,OAAOG,QAAP,MAAqB,iHAArB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,sBADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,wCAJO;EAKf,cAAc,+JALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,qBADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,YADV;MAEE,QAAQ,QAFV;MAGE,eAAe,gEAHjB;MAIE,gBAAgB;IAJlB,CADO,EAOP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe,gCAHjB;MAIE,gBAAgB;IAJlB,CAPO,EAaP;MACE,QAAQ,WADV;MAEE,QAAQ,mCAFV;MAGE,eAAe,6CAHjB;MAIE,gBAAgB;IAJlB,CAbO,EAmBP;MACE,QAAQ,WADV;MAEE,QAAQ,UAFV;MAGE,eAAe,+CAHjB;MAIE,gBAAgB;IAJlB,CAnBO,EAyBP;MACE,QAAQ,gBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,+BAHjB;MAIE,gBAAgB;IAJlB,CAzBO,EA+BP;MACE,QAAQ,YADV;MAEE,QAAQ,SAFV;MAGE,eAAe,qDAHjB;MAIE,gBAAgB;IAJlB,CA/BO,EAqCP;MACE,QAAQ,WADV;MAEE,QAAQ,SAFV;MAGE,eAAe,qDAHjB;MAIE,gBAAgB;IAJlB,CArCO,EA2CP;MACE,QAAQ,QADV;MAEE,QAAQ,SAFV;MAGE,eAAe,WAHjB;MAIE,gBAAgB;IAJlB,CA3CO,EAiDP;MACE,QAAQ,OADV;MAEE,QAAQ,mBAFV;MAGE,eAAe;IAHjB,CAjDO,EAsDP;MACE,QAAQ,cADV;MAEE,QAAQ,cAFV;MAGE,gBAAgB;IAHlB,CAtDO,EA2DP;MACE,QAAQ,YADV;MAEE,QAAQ,+CAFV;MAGE,eAAe;IAHjB,CA3DO,EAgEP;MACE,QAAQ,UADV;MAEE,QAAQ,6BAFV;MAGE,eAAe;IAHjB,CAhEO,EAqEP;MACE,QAAQ,UADV;MAEE,QAAQ,sBAFV;MAGE,eAAe,iDAHjB;MAIE,gBAAgB;IAJlB,CArEO,EA2EP;MACE,QAAQ,UADV;MAEE,QAAQ,0BAFV;MAGE,eAAe,6DAHjB;MAIE,gBAAgB;IAJlB,CA3EO,EAiFP;MACE,QAAQ,UADV;MAEE,QAAQ,qCAFV;MAGE,eAAe,oDAHjB;MAIE,gBAAgB;IAJlB,CAjFO,EAuFP;MACE,QAAQ,qBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,iDAHjB;MAIE,gBAAgB;IAJlB,CAvFO,EA6FP;MACE,QAAQ,uBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,mCAHjB;MAIE,gBAAgB;IAJlB,CA7FO,EAmGP;MACE,QAAQ,aADV;MAEE,QAAQ,KAFV;MAGE,eAAe;IAHjB,CAnGO,EAwGP;MACE,QAAQ,YADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,gEAHjB;MAIE,gBAAgB;IAJlB,CAxGO,EA8GP;MACE,QAAQ,UADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CA9GO;EAHX,CADgB,EAyHhB;IACE,QAAQ,yBADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,qBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,uDAHjB;MAIE,gBAAgB;IAJlB,CADO,EAOP;MACE,QAAQ,wBADV;MAEE,QAAQ,QAFV;MAGE,eAAe,2DAHjB;MAIE,gBAAgB;IAJlB,CAPO,EAaP;MACE,QAAQ,WADV;MAEE,QAAQ,cAFV;MAGE,gBAAgB;IAHlB,CAbO,EAkBP;MACE,QAAQ,WADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,sKAHjB;MAIE,gBAAgB;IAJlB,CAlBO,EAwBP;MACE,QAAQ,aADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CAxBO,EA6BP;MACE,QAAQ,wBADV;MAEE,QAAQ,SAFV;MAGE,eAAe,kHAHjB;MAIE,gBAAgB;IAJlB,CA7BO,EAmCP;MACE,QAAQ,MADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,+BAHjB;MAIE,gBAAgB;IAJlB,CAnCO,EAyCP;MACE,QAAQ,IADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAzCO,EA8CP;MACE,QAAQ,YADV;MAEE,QAAQ,SAFV;MAGE,eAAe,mEAHjB;MAIE,gBAAgB;IAJlB,CA9CO,EAoDP;MACE,QAAQ,YADV;MAEE,QAAQ,SAFV;MAGE,eAAe,0CAHjB;MAIE,gBAAgB;IAJlB,CApDO,EA0DP;MACE,QAAQ,SADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,+CAHjB;MAIE,gBAAgB;IAJlB,CA1DO,EAgEP;MACE,QAAQ,cADV;MAEE,QAAQ,KAFV;MAGE,eAAe,6DAHjB;MAIE,gBAAgB;IAJlB,CAhEO;EAHX,CAzHgB,EAoMhB;IACE,QAAQ,4BADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,6BAHjB;MAIE,YAAY;IAJd,CADO;EAHX,CApMgB,CANH;EAuNf,aAAa,CACX,mBADW,CAvNE;EA0Nf,YAAY,CACV,OADU,EAEV,aAFU,EAGV,UAHU,EAIV,eAJU,EAKV,aALU,EAMV,cANU,EAOV,yBAPU,EAQV,2BARU,EASV,kBATU,EAUV,2CAVU;AA1NG,CAAjB;AAuOAA,QAAQ,CAACC,WAAT,GAAuB;EACrBH,QAAQ,EAARA,QADqB;EAErBF,IAAI,EAAJA,IAFqB;EAGrBG,QAAQ,EAARA;AAHqB,CAAvB;AAKAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,8+BAA9C;MAA6hC,SAAQ,OAAriC;MAA6iC,QAAO;IAApjC,GADY;EAAA,CADI;EAKlB,eAAe,oBAAAA,KAAK;IAAA,oBAClB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,ssDAA9C;MAAqvD,SAAQ,aAA7vD;MAA2wD,QAAO;IAAlxD,GADkB;EAAA,CALF;EASlB,YAAY,kBAAAA,KAAK;IAAA,oBACf,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,wgCAA9C;MAAujC,SAAQ,UAA/jC;MAA0kC,QAAO;IAAjlC,GADe;EAAA,CATC;EAalB,iBAAiB,sBAAAA,KAAK;IAAA,oBACpB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,8oCAA9C;MAA6rC,SAAQ,eAArsC;MAAqtC,QAAO;IAA5tC,GADoB;EAAA,CAbJ;EAiBlB,eAAe,oBAAAA,KAAK;IAAA,oBAClB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,ylCAA9C;MAAwoC,SAAQ,aAAhpC;MAA8pC,QAAO;IAArqC,GADkB;EAAA,CAjBF;EAqBlB,gBAAgB,qBAAAA,KAAK;IAAA,oBACnB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,gxCAA9C;MAA+zC,SAAQ,cAAv0C;MAAs1C,QAAO;IAA71C,GADmB;EAAA,CArBH;EAyBlB,2BAA2B,8BAAAA,KAAK;IAAA,oBAC9B,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,wyDAA9C;MAAu1D,SAAQ,yBAA/1D;MAAy3D,QAAO;IAAh4D,GAD8B;EAAA,CAzBd;EA6BlB,6BAA6B,gCAAAA,KAAK;IAAA,oBAChC,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,oiHAA9C;MAAmlH,SAAQ,2BAA3lH;MAAunH,QAAO;IAA9nH,GADgC;EAAA,CA7BhB;EAiClB,oBAAoB,wBAAAA,KAAK;IAAA,oBACvB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,2oCAA9C;MAA0rC,SAAQ,kBAAlsC;MAAqtC,QAAO;IAA5tC,GADuB;EAAA,CAjCP;EAqClB,6CAA6C,6CAAAA,KAAK;IAAA,oBAChD,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,4kCAA9C;MAA2nC,SAAQ,2CAAnoC;MAA+qC,QAAO;IAAtrC,GADgD;EAAA;AArChC,CAApB;;AA2CA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE;IAAQ,aAAY;EAApB,4FAEE,oBAAC,mBAAD;IAA0B,MAAK;EAA/B,cAFF,8DAOE;IAAW,aAAY;EAAvB,aAPF,wEAWE;IAAW,aAAY;EAAvB,kBAXF,wDAeE,oBAAC,mBAAD;IAA0B,MAAK;EAA/B,aAfF,MADF,eAqBE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cArBF,EAwBGX,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,OAAlB,CAApB,CAxBH,EAyBGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,aAAlB,CAApB,CAzBH,EA0BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,UAAlB,CAApB,CA1BH,EA2BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,eAAlB,CAApB,CA3BH,EA4BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,aAAlB,CAApB,CA5BH,EA6BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,cAAlB,CAApB,CA7BH,EA8BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,yBAAlB,CAApB,CA9BH,EA+BGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,2BAAlB,CAApB,CA/BH,EAgCGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,kBAAlB,CAApB,CAhCH,EAiCGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,2CAAlB,CAApB,CAjCH,CADgB;AAAA,CAAlB;;AAqCAE,SAAS,CAACE,WAAV,GAAwB,wCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}