{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Hint\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/hint/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Hint/examples/Hint.md\",\n  \"propComponents\": [{\n    \"name\": \"Hint\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"actions\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Actions of the hint.\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the hint.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the hint.\"\n    }]\n  }, {\n    \"name\": \"HintTitle\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the hint title.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the hint title.\"\n    }]\n  }, {\n    \"name\": \"HintBody\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the hint body.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the hint body.\"\n    }]\n  }, {\n    \"name\": \"HintFooter\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the hint footer.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the hint footer.\"\n    }]\n  }],\n  \"examples\": [\"Basic with title\", \"Basic without title\"]\n};\npageData.examples = {\n  'Basic with title': function BasicWithTitle(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Hint,\\n  HintTitle,\\n  HintBody,\\n  HintFooter,\\n  Button,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownDirection,\\n  KebabToggle\\n} from '@patternfly/react-core';\\n\\nclass BasicHint extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    const actions = (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<KebabToggle onToggle={this.onToggle} id=\\\"hint-kebab-toggle\\\" />}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n        position=\\\"right\\\"\\n        isPlain\\n      />\\n    );\\n    return (\\n      <Hint actions={actions}>\\n        <HintTitle>Do more with Find it Fix it capabilities</HintTitle>\\n        <HintBody>\\n          Upgrade to Red Hat Smart Management to remediate all your systems across regions and geographies.\\n        </HintBody>\\n        <HintFooter>\\n          <Button variant=\\\"link\\\" isInline>\\n            Try it for 90 days\\n          </Button>\\n        </HintFooter>\\n      </Hint>\\n    );\\n  }\\n}\",\n      \"title\": \"Basic with title\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Basic without title': function BasicWithoutTitle(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Hint,\\n  HintBody,\\n  HintFooter,\\n  Button,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownDirection,\\n  KebabToggle\\n} from '@patternfly/react-core';\\n\\nclass BasicHint extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    const actions = (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<KebabToggle onToggle={this.onToggle} id=\\\"hint-notitle-kebab-toggle\\\" />}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n        position=\\\"right\\\"\\n        isPlain\\n      />\\n    );\\n    return (\\n      <React.Fragment>\\n        <Hint>\\n          <HintBody>\\n            Welcome to the new documentation experience.\\n            <Button variant=\\\"link\\\" isInline>\\n              Learn more about the improved features.\\n            </Button>\\n          </HintBody>\\n        </Hint>\\n        <br />\\n        <Hint actions={actions}>\\n          <HintBody>\\n            Upgrade to Red Hat Smart Management to remediate all your systems across regions and geographies.\\n          </HintBody>\\n          <HintFooter>\\n            <Button variant=\\\"link\\\" isInline>\\n              Try it for 90 days\\n            </Button>\\n          </HintFooter>\\n        </Hint>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Basic without title\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic with title\"]), React.createElement(pageData.examples[\"Basic without title\"]));\n};\n\nComponent.displayName = 'ComponentsHintReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/hint/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Hint\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/hint/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Hint/examples/Hint.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Hint\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"actions\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Actions of the hint.\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the hint.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the hint.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HintTitle\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the hint title.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the hint title.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HintBody\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the hint body.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the hint body.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"HintFooter\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the hint footer.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the hint footer.\"\n        }\n      ]\n    }\n  ],\n  \"examples\": [\n    \"Basic with title\",\n    \"Basic without title\"\n  ]\n};\npageData.examples = {\n  'Basic with title': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Hint,\\n  HintTitle,\\n  HintBody,\\n  HintFooter,\\n  Button,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownDirection,\\n  KebabToggle\\n} from '@patternfly/react-core';\\n\\nclass BasicHint extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    const actions = (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<KebabToggle onToggle={this.onToggle} id=\\\"hint-kebab-toggle\\\" />}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n        position=\\\"right\\\"\\n        isPlain\\n      />\\n    );\\n    return (\\n      <Hint actions={actions}>\\n        <HintTitle>Do more with Find it Fix it capabilities</HintTitle>\\n        <HintBody>\\n          Upgrade to Red Hat Smart Management to remediate all your systems across regions and geographies.\\n        </HintBody>\\n        <HintFooter>\\n          <Button variant=\\\"link\\\" isInline>\\n            Try it for 90 days\\n          </Button>\\n        </HintFooter>\\n      </Hint>\\n    );\\n  }\\n}\",\"title\":\"Basic with title\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Basic without title': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Hint,\\n  HintBody,\\n  HintFooter,\\n  Button,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownDirection,\\n  KebabToggle\\n} from '@patternfly/react-core';\\n\\nclass BasicHint extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.onToggle = isOpen => {\\n      this.setState({\\n        isOpen\\n      });\\n    };\\n    this.onSelect = event => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n    const actions = (\\n      <Dropdown\\n        onSelect={this.onSelect}\\n        toggle={<KebabToggle onToggle={this.onToggle} id=\\\"hint-notitle-kebab-toggle\\\" />}\\n        isOpen={isOpen}\\n        dropdownItems={dropdownItems}\\n        position=\\\"right\\\"\\n        isPlain\\n      />\\n    );\\n    return (\\n      <React.Fragment>\\n        <Hint>\\n          <HintBody>\\n            Welcome to the new documentation experience.\\n            <Button variant=\\\"link\\\" isInline>\\n              Learn more about the improved features.\\n            </Button>\\n          </HintBody>\\n        </Hint>\\n        <br />\\n        <Hint actions={actions}>\\n          <HintBody>\\n            Upgrade to Red Hat Smart Management to remediate all your systems across regions and geographies.\\n          </HintBody>\\n          <HintFooter>\\n            <Button variant=\\\"link\\\" isInline>\\n              Try it for 90 days\\n            </Button>\\n          </HintFooter>\\n        </Hint>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Basic without title\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic with title\"])}\n    {React.createElement(pageData.examples[\"Basic without title\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsHintReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AAEA,IAAMC,QAAQ,GAAG;EACf,MAAM,MADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,wBAJO;EAKf,cAAc,iIALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,MADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,SADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CANO,EAWP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAXO;EAHX,CADgB,EAsBhB;IACE,QAAQ,WADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CANO;EAHX,CAtBgB,EAsChB;IACE,QAAQ,UADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CANO;EAHX,CAtCgB,EAsDhB;IACE,QAAQ,YADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CANO;EAHX,CAtDgB,CANH;EA6Ef,YAAY,CACV,kBADU,EAEV,qBAFU;AA7EG,CAAjB;AAkFAA,QAAQ,CAACC,QAAT,GAAoB;EAClB,oBAAoB,wBAAAC,KAAK;IAAA,oBACvB,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,8/DAA9C;MAA6iE,SAAQ,kBAArjE;MAAwkE,QAAO;IAA/kE,GADuB;EAAA,CADP;EAKlB,uBAAuB,2BAAAA,KAAK;IAAA,oBAC1B,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,0wEAA9C;MAAyzE,SAAQ,qBAAj0E;MAAu1E,QAAO;IAA91E,GAD0B;EAAA;AALV,CAApB;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cADF,EAIGR,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,kBAAlB,CAApB,CAJH,EAKGN,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,qBAAlB,CAApB,CALH,CADgB;AAAA,CAAlB;;AASAE,SAAS,CAACE,WAAV,GAAwB,yBAAxB;AACAF,SAAS,CAACH,QAAV,GAAqBA,QAArB;AAEA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}