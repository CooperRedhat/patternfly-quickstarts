{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { LoadingBox, HelpTopicContainer, HelpTopicContext } from '@patternfly/quickstarts';\nimport { helpTopics as exampleHelpTopics } from '../../../../node_modules/bare-qs-docs/src/__docs__/./example-data';\nimport '@patternfly/quickstarts/dist/quickstarts.css';\nvar pageData = {\n  \"id\": \"Quick Starts\",\n  \"section\": \"Extensions\",\n  \"source\": \"In-App-Documentation\",\n  \"slug\": \"/extensions/quick-starts/In-App-Documentation\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/node_modules/bare-qs-docs/src/__docs__/inapp.md\",\n  \"fullscreenExamples\": [\"Basic Example\"]\n};\npageData.liveContext = {\n  LoadingBox: LoadingBox,\n  HelpTopicContainer: HelpTopicContainer,\n  HelpTopicContext: HelpTopicContext,\n  exampleHelpTopics: exampleHelpTopics\n};\npageData.examples = {\n  'Basic Example': function BasicExample(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import './App.css';\\nimport React from 'react';\\nimport { LoadingBox, HelpTopicContainer, HelpTopicContext } from '@patternfly/quickstarts';\\nimport { helpTopics as exampleHelpTopics } from './example-data'\\n\\nconst TinyMockConsole = () => {\\n  const { setActiveHelpTopicByName, helpTopics } = React.useContext(HelpTopicContext);\\n\\n  const handleSetTopic = (name) => {\\n    setActiveHelpTopicByName(name);\\n  }\\n\\n  return (\\n    <Stack hasGutter>\\n      {helpTopics.map(topic => {\\n        return (\\n          <StackItem key={topic.name}>\\n            <a onClick={() => handleSetTopic(topic.name)}>Open Help {topic.title}</a>\\n          </StackItem>\\n        )\\n      })}\\n    </Stack>\\n  )\\n}\\n\\nconst AppHelpTopicDemo = () => {\\n  \\n  const language = localStorage.getItem('bridge/language') || 'en';\\n\\n  const [loading, setLoading] = React.useState(true);\\n  React.useEffect(() => {\\n    const load = async () => {\\n      setLoading(false);\\n    };\\n    setTimeout(() => {\\n      load();\\n    }, 500);\\n  }, []);\\n\\n  const inContextHelpProps = {\\n    helpTopics: exampleHelpTopics,\\n    language,\\n    loading,\\n  };\\n\\n\\n\\n  return (\\n    <React.Suspense fallback={<LoadingBox />}>\\n      <HelpTopicContainer {...inContextHelpProps}>\\n        <TinyMockConsole />\\n      </HelpTopicContainer>\\n    </React.Suspense>\\n  );\\n};\\n\\nexport default AppHelpTopicDemo;\",\n      \"title\": \"Basic Example\",\n      \"lang\": \"js\",\n      \"isFullscreen\": true\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"in-app-documentation\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"In App Documentation\"), React.createElement(pageData.examples[\"Basic Example\"]));\n};\n\nComponent.displayName = 'ExtensionsQuickStartsInAppDocumentationDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","LoadingBox","HelpTopicContainer","HelpTopicContext","helpTopics","exampleHelpTopics","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/extensions/quick-starts/In-App-Documentation.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { LoadingBox, HelpTopicContainer, HelpTopicContext } from '@patternfly/quickstarts';\nimport { helpTopics as exampleHelpTopics } from '../../../../node_modules/bare-qs-docs/src/__docs__/./example-data';\nimport '@patternfly/quickstarts/dist/quickstarts.css';\nconst pageData = {\n  \"id\": \"Quick Starts\",\n  \"section\": \"Extensions\",\n  \"source\": \"In-App-Documentation\",\n  \"slug\": \"/extensions/quick-starts/In-App-Documentation\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/node_modules/bare-qs-docs/src/__docs__/inapp.md\",\n  \"fullscreenExamples\": [\n    \"Basic Example\"\n  ]\n};\npageData.liveContext = {\n  LoadingBox,\n  HelpTopicContainer,\n  HelpTopicContext,\n  exampleHelpTopics\n};\npageData.examples = {\n  'Basic Example': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import './App.css';\\nimport React from 'react';\\nimport { LoadingBox, HelpTopicContainer, HelpTopicContext } from '@patternfly/quickstarts';\\nimport { helpTopics as exampleHelpTopics } from './example-data'\\n\\nconst TinyMockConsole = () => {\\n  const { setActiveHelpTopicByName, helpTopics } = React.useContext(HelpTopicContext);\\n\\n  const handleSetTopic = (name) => {\\n    setActiveHelpTopicByName(name);\\n  }\\n\\n  return (\\n    <Stack hasGutter>\\n      {helpTopics.map(topic => {\\n        return (\\n          <StackItem key={topic.name}>\\n            <a onClick={() => handleSetTopic(topic.name)}>Open Help {topic.title}</a>\\n          </StackItem>\\n        )\\n      })}\\n    </Stack>\\n  )\\n}\\n\\nconst AppHelpTopicDemo = () => {\\n  \\n  const language = localStorage.getItem('bridge/language') || 'en';\\n\\n  const [loading, setLoading] = React.useState(true);\\n  React.useEffect(() => {\\n    const load = async () => {\\n      setLoading(false);\\n    };\\n    setTimeout(() => {\\n      load();\\n    }, 500);\\n  }, []);\\n\\n  const inContextHelpProps = {\\n    helpTopics: exampleHelpTopics,\\n    language,\\n    loading,\\n  };\\n\\n\\n\\n  return (\\n    <React.Suspense fallback={<LoadingBox />}>\\n      <HelpTopicContainer {...inContextHelpProps}>\\n        <TinyMockConsole />\\n      </HelpTopicContainer>\\n    </React.Suspense>\\n  );\\n};\\n\\nexport default AppHelpTopicDemo;\",\"title\":\"Basic Example\",\"lang\":\"js\",\"isFullscreen\":true}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"in-app-documentation\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`In App Documentation`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic Example\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ExtensionsQuickStartsInAppDocumentationDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,SAASC,UAAT,EAAqBC,kBAArB,EAAyCC,gBAAzC,QAAiE,yBAAjE;AACA,SAASC,UAAU,IAAIC,iBAAvB,QAAgD,mEAAhD;AACA,OAAO,8CAAP;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,cADS;EAEf,WAAW,YAFI;EAGf,UAAU,sBAHK;EAIf,QAAQ,+CAJO;EAKf,cAAc,sHALC;EAMf,sBAAsB,CACpB,eADoB;AANP,CAAjB;AAUAA,QAAQ,CAACC,WAAT,GAAuB;EACrBN,UAAU,EAAVA,UADqB;EAErBC,kBAAkB,EAAlBA,kBAFqB;EAGrBC,gBAAgB,EAAhBA,gBAHqB;EAIrBE,iBAAiB,EAAjBA;AAJqB,CAAvB;AAMAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,iBAAiB,sBAAAC,KAAK;IAAA,oBACpB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,01CAA9C;MAAy4C,SAAQ,eAAj5C;MAAi6C,QAAO,IAAx6C;MAA66C,gBAAe;IAA57C,GADoB;EAAA;AADJ,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,sBAA1B;IAAiD,QAAO,IAAxD;IAA6D,aAAY;EAAzE,0BADF,EAIGd,KAAK,CAACe,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,eAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,6CAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}