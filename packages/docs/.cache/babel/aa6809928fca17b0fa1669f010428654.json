{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport OutlinedClockIcon from '@patternfly/react-icons/dist/esm/icons/outlined-clock-icon';\nvar pageData = {\n  \"id\": \"Date and time picker\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/date-and-time-picker/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DateTimePicker.md\",\n  \"beta\": true,\n  \"examples\": [\"Date and time picker\"]\n};\npageData.liveContext = {\n  OutlinedCalendarAltIcon: OutlinedCalendarAltIcon,\n  OutlinedClockIcon: OutlinedClockIcon\n};\npageData.examples = {\n  'Date and time picker': function DateAndTimePicker(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  CalendarMonth,\\n  InputGroup,\\n  TextInput,\\n  Button,\\n  Popover\\n} from '@patternfly/react-core';\\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\\nimport OutlinedClockIcon from '@patternfly/react-icons/dist/esm/icons/outlined-clock-icon';\\n\\nexport const DateTimePicker: React.FunctionComponent = () => {\\n  const [isCalendarOpen, setIsCalendarOpen] = React.useState(false);\\n  const [isTimeOpen, setIsTimeOpen] = React.useState(false);\\n  const [valueDate, setValueDate] = React.useState('MM-DD-YYYY');\\n  const [valueTime, setValueTime] = React.useState('HH:MM');\\n  const times = Array.from(new Array(10), (_, i) => i + 8);\\n  const defaultTime = '0:00';\\n  const dateFormat = (date: Date) =>\\n    date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\\\\//g, '-');\\n\\n  const onToggleCalendar = () => {\\n    setIsCalendarOpen(!isCalendarOpen);\\n    setIsTimeOpen(false);\\n  };\\n\\n  const onToggleTime = (_value: boolean, _event: any) => {\\n    setIsTimeOpen(!isTimeOpen);\\n    setIsCalendarOpen(false);\\n  };\\n\\n  const onSelectCalendar = (newValueDate: Date) => {\\n    const newValue = dateFormat(newValueDate);\\n    setValueDate(newValue);\\n    setIsCalendarOpen(!isCalendarOpen);\\n    // setting default time when it is not picked\\n    if (valueTime === 'HH:MM') {\\n      setValueTime(defaultTime);\\n    }\\n  };\\n\\n  const onSelectTime = (ev: React.SyntheticEvent<HTMLDivElement>) => {\\n    setValueTime(ev.currentTarget.textContent);\\n    setIsTimeOpen(!isTimeOpen);\\n  };\\n\\n  const timeOptions = times.map(time => (\\n    <DropdownItem key={time} component=\\\"button\\\" value={`${time}:00`}>\\n      {`${time}:00`}\\n    </DropdownItem>\\n  ));\\n\\n  const calendar = <CalendarMonth date={new Date(valueDate)} onChange={onSelectCalendar} />;\\n\\n  const time = (\\n    <Dropdown\\n      onSelect={onSelectTime}\\n      toggle={\\n        <DropdownToggle\\n          aria-label=\\\"Toggle the time picker menu\\\"\\n          toggleIndicator={null}\\n          onToggle={onToggleTime}\\n          style={{ padding: '6px 16px' }}\\n        >\\n          <OutlinedClockIcon />\\n        </DropdownToggle>\\n      }\\n      isOpen={isTimeOpen}\\n      dropdownItems={timeOptions}\\n    />\\n  );\\n\\n  const calendarButton = (\\n    <Button variant=\\\"control\\\" aria-label=\\\"Toggle the calendar\\\" onClick={onToggleCalendar}>\\n      <OutlinedCalendarAltIcon />\\n    </Button>\\n  );\\n\\n  return (\\n    <div style={{ width: '300px' }}>\\n      <Popover\\n        position=\\\"bottom\\\"\\n        bodyContent={calendar}\\n        showClose={false}\\n        isVisible={isCalendarOpen}\\n        hasNoPadding\\n        hasAutoWidth\\n      >\\n        <InputGroup>\\n          <TextInput\\n            type=\\\"text\\\"\\n            id=\\\"date-time\\\"\\n            aria-label=\\\"date and time picker demo\\\"\\n            value={valueDate + ' ' + valueTime}\\n            isReadOnly\\n          />\\n          {calendarButton}\\n          {time}\\n        </InputGroup>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\",\n      \"title\": \"Date and time picker\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"In this demo, learn how to use a \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"/components/calendar-month\"\n  }, \"CalendarMonth\"), \" component and a \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"/components/dropdown\"\n  }, \"Dropdown\"), \" component to compose a simple DateTimePicker. The input is read only, meaning that the following example does not cover pasting a copied date and time. Also, you can pick the time only from the predefined options and cannot change it in the input.\"), React.createElement(pageData.examples[\"Date and time picker\"]));\n};\n\nComponent.displayName = 'DemosDateAndTimePickerReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","OutlinedCalendarAltIcon","OutlinedClockIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/demos/date-and-time-picker/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\nimport OutlinedClockIcon from '@patternfly/react-icons/dist/esm/icons/outlined-clock-icon';\nconst pageData = {\n  \"id\": \"Date and time picker\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/date-and-time-picker/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DateTimePicker.md\",\n  \"beta\": true,\n  \"examples\": [\n    \"Date and time picker\"\n  ]\n};\npageData.liveContext = {\n  OutlinedCalendarAltIcon,\n  OutlinedClockIcon\n};\npageData.examples = {\n  'Date and time picker': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  CalendarMonth,\\n  InputGroup,\\n  TextInput,\\n  Button,\\n  Popover\\n} from '@patternfly/react-core';\\nimport OutlinedCalendarAltIcon from '@patternfly/react-icons/dist/esm/icons/outlined-calendar-alt-icon';\\nimport OutlinedClockIcon from '@patternfly/react-icons/dist/esm/icons/outlined-clock-icon';\\n\\nexport const DateTimePicker: React.FunctionComponent = () => {\\n  const [isCalendarOpen, setIsCalendarOpen] = React.useState(false);\\n  const [isTimeOpen, setIsTimeOpen] = React.useState(false);\\n  const [valueDate, setValueDate] = React.useState('MM-DD-YYYY');\\n  const [valueTime, setValueTime] = React.useState('HH:MM');\\n  const times = Array.from(new Array(10), (_, i) => i + 8);\\n  const defaultTime = '0:00';\\n  const dateFormat = (date: Date) =>\\n    date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\\\\//g, '-');\\n\\n  const onToggleCalendar = () => {\\n    setIsCalendarOpen(!isCalendarOpen);\\n    setIsTimeOpen(false);\\n  };\\n\\n  const onToggleTime = (_value: boolean, _event: any) => {\\n    setIsTimeOpen(!isTimeOpen);\\n    setIsCalendarOpen(false);\\n  };\\n\\n  const onSelectCalendar = (newValueDate: Date) => {\\n    const newValue = dateFormat(newValueDate);\\n    setValueDate(newValue);\\n    setIsCalendarOpen(!isCalendarOpen);\\n    // setting default time when it is not picked\\n    if (valueTime === 'HH:MM') {\\n      setValueTime(defaultTime);\\n    }\\n  };\\n\\n  const onSelectTime = (ev: React.SyntheticEvent<HTMLDivElement>) => {\\n    setValueTime(ev.currentTarget.textContent);\\n    setIsTimeOpen(!isTimeOpen);\\n  };\\n\\n  const timeOptions = times.map(time => (\\n    <DropdownItem key={time} component=\\\"button\\\" value={`${time}:00`}>\\n      {`${time}:00`}\\n    </DropdownItem>\\n  ));\\n\\n  const calendar = <CalendarMonth date={new Date(valueDate)} onChange={onSelectCalendar} />;\\n\\n  const time = (\\n    <Dropdown\\n      onSelect={onSelectTime}\\n      toggle={\\n        <DropdownToggle\\n          aria-label=\\\"Toggle the time picker menu\\\"\\n          toggleIndicator={null}\\n          onToggle={onToggleTime}\\n          style={{ padding: '6px 16px' }}\\n        >\\n          <OutlinedClockIcon />\\n        </DropdownToggle>\\n      }\\n      isOpen={isTimeOpen}\\n      dropdownItems={timeOptions}\\n    />\\n  );\\n\\n  const calendarButton = (\\n    <Button variant=\\\"control\\\" aria-label=\\\"Toggle the calendar\\\" onClick={onToggleCalendar}>\\n      <OutlinedCalendarAltIcon />\\n    </Button>\\n  );\\n\\n  return (\\n    <div style={{ width: '300px' }}>\\n      <Popover\\n        position=\\\"bottom\\\"\\n        bodyContent={calendar}\\n        showClose={false}\\n        isVisible={isCalendarOpen}\\n        hasNoPadding\\n        hasAutoWidth\\n      >\\n        <InputGroup>\\n          <TextInput\\n            type=\\\"text\\\"\\n            id=\\\"date-time\\\"\\n            aria-label=\\\"date and time picker demo\\\"\\n            value={valueDate + ' ' + valueTime}\\n            isReadOnly\\n          />\\n          {calendarButton}\\n          {time}\\n        </InputGroup>\\n      </Popover>\\n    </div>\\n  );\\n};\\n\",\"title\":\"Date and time picker\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`In this demo, learn how to use a `}\n      <PatternflyThemeLink {...{\"to\":\"/components/calendar-month\"}}>\n        {`CalendarMonth`}\n      </PatternflyThemeLink>\n      {` component and a `}\n      <PatternflyThemeLink {...{\"to\":\"/components/dropdown\"}}>\n        {`Dropdown`}\n      </PatternflyThemeLink>\n      {` component to compose a simple DateTimePicker. The input is read only, meaning that the following example does not cover pasting a copied date and time. Also, you can pick the time only from the predefined options and cannot change it in the input.`}\n    </p>\n    {React.createElement(pageData.examples[\"Date and time picker\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'DemosDateAndTimePickerReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,uBAAP,MAAoC,mEAApC;AACA,OAAOC,iBAAP,MAA8B,4DAA9B;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,sBADS;EAEf,WAAW,OAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,yCAJO;EAKf,cAAc,wHALC;EAMf,QAAQ,IANO;EAOf,YAAY,CACV,sBADU;AAPG,CAAjB;AAWAA,QAAQ,CAACC,WAAT,GAAuB;EACrBH,uBAAuB,EAAvBA,uBADqB;EAErBC,iBAAiB,EAAjBA;AAFqB,CAAvB;AAIAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,wBAAwB,2BAAAC,KAAK;IAAA,oBAC3B,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,0kGAA9C;MAAynG,SAAQ,sBAAjoG;MAAwpG,QAAO;IAA/pG,GAD2B;EAAA;AADX,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,eAIE;IAAQ,aAAY;EAApB,qDAEE,oBAAC,mBAAD;IAA0B,MAAK;EAA/B,mBAFF,oCAME,oBAAC,mBAAD;IAA0B,MAAK;EAA/B,cANF,6PAJF,EAeGX,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,sBAAlB,CAApB,CAfH,CADgB;AAAA,CAAlB;;AAmBAE,SAAS,CAACE,WAAV,GAAwB,sCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}