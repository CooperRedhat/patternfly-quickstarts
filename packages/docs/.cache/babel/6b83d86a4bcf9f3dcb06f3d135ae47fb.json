{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Chart, ChartArea, ChartAxis, ChartBar, ChartDonut, ChartGroup, ChartLegend, ChartLine, ChartStack, ChartThemeColor, ChartThreshold, ChartTooltip, ChartVoronoiContainer, mergeTheme } from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\nimport chart_color_cyan_300 from '@patternfly/react-tokens/dist/esm/chart_color_cyan_300';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\nimport chart_color_purple_300 from '@patternfly/react-tokens/dist/esm/chart_color_purple_300';\nvar pageData = {\n  \"id\": \"Themed charts\",\n  \"section\": \"charts\",\n  \"source\": \"react\",\n  \"slug\": \"/charts/themed-charts/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-charts/src/components/ChartTheme/examples/ChartTheme.md\",\n  \"examples\": [\"Green\", \"Multi-color (ordered)\", \"Multi color (unordered)\", \"Custom color scale\", \"Custom stroke color\", \"Custom theme\"]\n};\npageData.liveContext = {\n  Chart: Chart,\n  ChartArea: ChartArea,\n  ChartAxis: ChartAxis,\n  ChartBar: ChartBar,\n  ChartDonut: ChartDonut,\n  ChartGroup: ChartGroup,\n  ChartLegend: ChartLegend,\n  ChartLine: ChartLine,\n  ChartStack: ChartStack,\n  ChartThemeColor: ChartThemeColor,\n  ChartThreshold: ChartThreshold,\n  ChartTooltip: ChartTooltip,\n  ChartVoronoiContainer: ChartVoronoiContainer,\n  mergeTheme: mergeTheme,\n  chart_color_blue_300: chart_color_blue_300,\n  chart_color_green_300: chart_color_green_300,\n  chart_color_cyan_300: chart_color_cyan_300,\n  chart_color_gold_300: chart_color_gold_300,\n  chart_color_purple_300: chart_color_purple_300\n};\npageData.examples = {\n  'Green': function Green(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chart, ChartAxis, ChartGroup, ChartLine, ChartThemeColor, ChartVoronoiContainer } from '@patternfly/react-charts';\\n\\nconst Green = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Line chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[{ name: 'Cats' }, { name: 'Dogs', symbol: { type: 'dash' } }, { name: 'Birds' }, { name: 'Mice' }]}\\n      legendPosition=\\\"bottom\\\"\\n      height={275}\\n      maxDomain={{y: 10}}\\n      minDomain={{y: 0}}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.green}\\n      width={450}\\n    >\\n      <ChartAxis tickValues={[2, 3, 4]} />\\n      <ChartAxis dependentAxis showGrid tickValues={[2, 5, 8]} />\\n      <ChartGroup>\\n        <ChartLine\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1 },\\n            { name: 'Cats', x: '2016', y: 2 },\\n            { name: 'Cats', x: '2017', y: 5 },\\n            { name: 'Cats', x: '2018', y: 3 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2 },\\n            { name: 'Dogs', x: '2016', y: 1 },\\n            { name: 'Dogs', x: '2017', y: 7 },\\n            { name: 'Dogs', x: '2018', y: 4 }\\n          ]}\\n          style={{\\n            data: {\\n              strokeDasharray: '3,3'\\n            }\\n          }}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Birds', x: '2015', y: 3 },\\n            { name: 'Birds', x: '2016', y: 4 },\\n            { name: 'Birds', x: '2017', y: 9 },\\n            { name: 'Birds', x: '2018', y: 5 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3 },\\n            { name: 'Mice', x: '2016', y: 3 },\\n            { name: 'Mice', x: '2017', y: 8 },\\n            { name: 'Mice', x: '2018', y: 7 }\\n          ]}\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\n      \"title\": \"Green\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates how to apply basic theme colors.\"));\n  },\n  'Multi-color (ordered)': function MultiColorOrdered(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\\n\\nconst Multicolorordered = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={350}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Multi-color (ordered)\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates how to apply theme colors for ordered charts like bar, donut, pie, and stack.\"));\n  },\n  'Multi color (unordered)': function MultiColorUnordered(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chart, ChartArea, ChartAxis, ChartGroup, ChartVoronoiContainer } from '@patternfly/react-charts';\\n// import '@patternfly/patternfly/patternfly-charts.css'; // Required for mix-blend-mode CSS property\\n\\nconst MultiColorunordered = () => (\\n  <div style={{ height: '200px', width: '800px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Area chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[{ name: 'Cats' }, { name: 'Dogs' }, { name: 'Birds' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      height={200}\\n      maxDomain={{y: 9}}\\n      padding={{\\n        bottom: 50,\\n        left: 50,\\n        right: 200, // Adjusted to accommodate legend\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiUnordered}\\n      width={800}\\n    >\\n      <ChartAxis />\\n      <ChartAxis dependentAxis showGrid/>\\n      <ChartGroup>\\n        <ChartArea\\n          data={[\\n            { name: 'Cats', x: '2015', y: 3 },\\n            { name: 'Cats', x: '2016', y: 4 },\\n            { name: 'Cats', x: '2017', y: 8 },\\n            { name: 'Cats', x: '2018', y: 6 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n        <ChartArea\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2 },\\n            { name: 'Dogs', x: '2016', y: 3 },\\n            { name: 'Dogs', x: '2017', y: 4 },\\n            { name: 'Dogs', x: '2018', y: 5 },\\n            { name: 'Dogs', x: '2019', y: 6 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n        <ChartArea\\n          data={[\\n            { name: 'Birds', x: '2015', y: 1 },\\n            { name: 'Birds', x: '2016', y: 2 },\\n            { name: 'Birds', x: '2017', y: 3 },\\n            { name: 'Birds', x: '2018', y: 2 },\\n            { name: 'Birds', x: '2019', y: 4 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\n      \"title\": \"Multi color (unordered)\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates how to apply theme colors for unordered charts like area, line, and sparkline.\"));\n  },\n  'Custom color scale': function CustomColorScale(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartStack, ChartThemeColor, ChartTooltip } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\\nimport chart_color_purple_300 from '@patternfly/react-tokens/dist/esm/chart_color_purple_300';\\n\\nconst CustomColorScale = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Stack chart example\\\"\\n      domainPadding={{ x: [30, 25] }}\\n      legendComponent={\\n        <ChartLegend\\n          data={[\\n            {\\n              name: 'Cats',\\n              symbol: { fill: chart_color_blue_300.var }\\n            },\\n            {\\n              name: 'Dogs',\\n              symbol: { fill: chart_color_gold_300.var }\\n            },\\n            {\\n              name: 'Birds',\\n              symbol: { fill: chart_color_green_300.var }\\n            },\\n            {\\n              name: 'Mice',\\n              symbol: { fill: chart_color_purple_300.var }\\n            }\\n          ]}\\n        />\\n      }\\n      legendPosition=\\\"bottom-left\\\"\\n      height={275}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={450}\\n    >\\n      <ChartAxis />\\n      <ChartAxis dependentAxis showGrid />\\n      <ChartStack\\n        horizontal\\n        colorScale={[\\n          chart_color_blue_300.var,\\n          chart_color_gold_300.var,\\n          chart_color_green_300.var,\\n          chart_color_purple_300.var\\n        ]}\\n      >\\n        <ChartBar\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1, label: 'Cats: 1' },\\n            { name: 'Cats', x: '2016', y: 2, label: 'Cats: 2' },\\n            { name: 'Cats', x: '2017', y: 5, label: 'Cats: 5' },\\n            { name: 'Cats', x: '2018', y: 3, label: 'Cats: 3' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2, label: 'Dogs: 2' },\\n            { name: 'Dogs', x: '2016', y: 1, label: 'Dogs: 1' },\\n            { name: 'Dogs', x: '2017', y: 7, label: 'Dogs: 7' },\\n            { name: 'Dogs', x: '2018', y: 4, label: 'Dogs: 4' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Birds', x: '2015', y: 4, label: 'Birds: 4' },\\n            { name: 'Birds', x: '2016', y: 4, label: 'Birds: 4' },\\n            { name: 'Birds', x: '2017', y: 9, label: 'Birds: 9' },\\n            { name: 'Birds', x: '2018', y: 7, label: 'Birds: 7' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3, label: 'Mice: 3' },\\n            { name: 'Mice', x: '2016', y: 3, label: 'Mice: 3' },\\n            { name: 'Mice', x: '2017', y: 8, label: 'Mice: 8' },\\n            { name: 'Mice', x: '2018', y: 5, label: 'Mice: 5' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n      </ChartStack>\\n    </Chart>\\n  </div>\\n)\",\n      \"title\": \"Custom color scale\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates an alternate way of applying a custom color scale and fill colors to individual charts.\"));\n  },\n  'Custom stroke color': function CustomStrokeColor(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chart, ChartAxis, ChartGroup, ChartLine, ChartThemeColor, ChartThreshold, ChartVoronoiContainer } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\n\\nconst CustomStrokeColor = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Line chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[\\n        { name: 'Cats' },\\n        { name: 'Birds' },\\n        { name: 'Mice' },\\n        { name: 'Cats Threshold', symbol: { fill: chart_color_blue_300.var, type: 'threshold' }}\\n      ]}\\n      legendPosition=\\\"bottom\\\"\\n      height={275}\\n      maxDomain={{y: 10}}\\n      minDomain={{y: 0}}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiUnordered}\\n      width={450}\\n    >\\n      <ChartAxis tickValues={[2, 3, 4]} />\\n      <ChartAxis dependentAxis showGrid tickValues={[2, 5, 8]} />\\n      <ChartGroup>\\n        <ChartLine\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1 },\\n            { name: 'Cats', x: '2016', y: 2 },\\n            { name: 'Cats', x: '2017', y: 5 },\\n            { name: 'Cats', x: '2018', y: 3 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Birds', x: '2015', y: 3 },\\n            { name: 'Birds', x: '2016', y: 4 },\\n            { name: 'Birds', x: '2017', y: 9 },\\n            { name: 'Birds', x: '2018', y: 5 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3 },\\n            { name: 'Mice', x: '2016', y: 3 },\\n            { name: 'Mice', x: '2017', y: 8 },\\n            { name: 'Mice', x: '2018', y: 7 }\\n          ]}\\n        />\\n        <ChartThreshold\\n          data={[\\n            { name: 'Cats Threshold', x: '2015', y: 5 },\\n            { name: 'Cats Threshold', x: '2016', y: 5 },\\n            { name: 'Cats Threshold', x: '2016', y: 6 },\\n            { name: 'Cats Threshold', x: '2017', y: 6 },\\n            { name: 'Cats Threshold', x: '2018', y: 6 }\\n          ]}\\n          style={{\\n            data: {\\n              stroke: chart_color_blue_300.var,\\n            }\\n          }}\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\n      \"title\": \"Custom stroke color\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates an alternate way of applying custom stroke and fill colors to a threshold chart.\"));\n  },\n  'Custom theme': function CustomTheme(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chart, ChartBar, ChartAxis, ChartGroup, ChartThemeColor, ChartVoronoiContainer, mergeTheme } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\\nimport chart_color_cyan_300 from '@patternfly/react-tokens/dist/esm/chart_color_cyan_300';\\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\\n\\nclass MultiColorChart extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    // Colors\\n    this.colorScale = [\\n      chart_color_blue_300.var,\\n      chart_color_green_300.var,\\n      chart_color_cyan_300.var,\\n      chart_color_gold_300.var\\n    ];\\n\\n    // Layout\\n    this.layoutProps = {\\n      padding: {\\n        bottom: 50,\\n        left: 50,\\n        right: 200, // Adjusted to accommodate legend\\n        top: 50\\n      }\\n    };\\n\\n    // Victory theme properties only\\n    this.themeProps = {\\n      bar: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      chart: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      group: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      legend: {\\n        colorScale: this.colorScale\\n      }\\n    };\\n\\n    // Applies theme color and variant to base theme\\n    this.myCustomTheme = mergeTheme(\\n      ChartThemeColor.default,\\n      this.themeProps\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <div style={{ height: '250px', width: '600px' }}>\\n        <Chart\\n          ariaDesc=\\\"Average number of pets\\\"\\n          ariaTitle=\\\"Bar chart example\\\"\\n          containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n          domain={{y: [0,9]}}\\n          domainPadding={{ x: [30, 25] }}\\n          legendData={[{ name: 'Cats' }, { name: 'Dogs' }, { name: 'Birds' }, { name: 'Mice' }]}\\n          legendOrientation=\\\"vertical\\\"\\n          legendPosition=\\\"right\\\"\\n          height={250}\\n          theme={this.myCustomTheme}\\n          width={600}\\n        >\\n          <ChartAxis />\\n          <ChartAxis dependentAxis showGrid />\\n          <ChartGroup offset={11}>\\n            <ChartBar data={[{ name: 'Cats', x: '2015', y: 1 }, { name: 'Cats', x: '2016', y: 2 }, { name: 'Cats', x: '2017', y: 5 }, { name: 'Cats', x: '2018', y: 3 }]} />\\n            <ChartBar data={[{ name: 'Dogs', x: '2015', y: 2 }, { name: 'Dogs', x: '2016', y: 1 }, { name: 'Dogs', x: '2017', y: 7 }, { name: 'Dogs', x: '2018', y: 4 }]} />\\n            <ChartBar data={[{ name: 'Birds', x: '2015', y: 4 }, { name: 'Birds', x: '2016', y: 4 }, { name: 'Birds', x: '2017', y: 9 }, { name: 'Birds', x: '2018', y: 7 }]} />\\n            <ChartBar data={[{ name: 'Mice', x: '2015', y: 3 }, { name: 'Mice', x: '2016', y: 3 }, { name: 'Mice', x: '2017', y: 8 }, { name: 'Mice', x: '2018', y: 5 }]} />\\n          </ChartGroup>\\n        </Chart>\\n      </div>\\n    );\\n  }\\n}\",\n      \"title\": \"Custom theme\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demonstrates custom theme properties, which may be applied across multiple charts.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"introduction\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Introduction\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Note: PatternFly React charts live in its own package at \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://www.npmjs.com/package/@patternfly/react-charts\"\n  }, \"@patternfly/react-charts\"), \"!\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"PatternFly React charts are based on the \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/victory-chart/\"\n  }, \"Victory\"), \" chart library, along with additional functionality, custom components, and theming for PatternFly. This provides a collection of React based components you can use to build PatternFly patterns with consistent markup, styling, and behavior.\"), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Green\"]), React.createElement(pageData.examples[\"Multi-color (ordered)\"]), React.createElement(pageData.examples[\"Multi color (unordered)\"]), React.createElement(pageData.examples[\"Custom color scale\"]), React.createElement(pageData.examples[\"Custom stroke color\"]), React.createElement(pageData.examples[\"Custom theme\"]), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"documentation\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Documentation\"), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"tips\",\n    \"size\": \"h3\",\n    \"className\": \"ws-title ws-h3\"\n  }, \"Tips\"), /*#__PURE__*/React.createElement(\"ul\", {\n    \"className\": \"ws-ul\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"See Victory's \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/faq\"\n  }, \"FAQ\")), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"theme\"), \" and \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"themeColor\"), \" props should be applied at the most top level component\"), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"Use \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"ChartGroup\"), \" to apply theme color scales and other properties to multiple components\")), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"note\",\n    \"size\": \"h3\",\n    \"className\": \"ws-title ws-h3\"\n  }, \"Note\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Currently, the generated documention below is not able to resolve type definitions from Victory imports. For the components used in the examples above, Victory pass-thru props are also documented here:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    \"className\": \"ws-ul\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"For theme props, see \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/victory-theme\"\n  }, \"VictoryTheme\"))));\n};\n\nComponent.displayName = 'ChartsThemedChartsReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","Chart","ChartArea","ChartAxis","ChartBar","ChartDonut","ChartGroup","ChartLegend","ChartLine","ChartStack","ChartThemeColor","ChartThreshold","ChartTooltip","ChartVoronoiContainer","mergeTheme","chart_color_blue_300","chart_color_green_300","chart_color_cyan_300","chart_color_gold_300","chart_color_purple_300","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/charts/themed-charts/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartBar,\n  ChartDonut,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartStack,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartTooltip,\n  ChartVoronoiContainer,\n  mergeTheme\n} from '@patternfly/react-charts';\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\nimport chart_color_cyan_300 from '@patternfly/react-tokens/dist/esm/chart_color_cyan_300';\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\nimport chart_color_purple_300 from '@patternfly/react-tokens/dist/esm/chart_color_purple_300';\nconst pageData = {\n  \"id\": \"Themed charts\",\n  \"section\": \"charts\",\n  \"source\": \"react\",\n  \"slug\": \"/charts/themed-charts/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-charts/src/components/ChartTheme/examples/ChartTheme.md\",\n  \"examples\": [\n    \"Green\",\n    \"Multi-color (ordered)\",\n    \"Multi color (unordered)\",\n    \"Custom color scale\",\n    \"Custom stroke color\",\n    \"Custom theme\"\n  ]\n};\npageData.liveContext = {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartBar,\n  ChartDonut,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartStack,\n  ChartThemeColor,\n  ChartThreshold,\n  ChartTooltip,\n  ChartVoronoiContainer,\n  mergeTheme,\n  chart_color_blue_300,\n  chart_color_green_300,\n  chart_color_cyan_300,\n  chart_color_gold_300,\n  chart_color_purple_300\n};\npageData.examples = {\n  'Green': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chart, ChartAxis, ChartGroup, ChartLine, ChartThemeColor, ChartVoronoiContainer } from '@patternfly/react-charts';\\n\\nconst Green = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Line chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[{ name: 'Cats' }, { name: 'Dogs', symbol: { type: 'dash' } }, { name: 'Birds' }, { name: 'Mice' }]}\\n      legendPosition=\\\"bottom\\\"\\n      height={275}\\n      maxDomain={{y: 10}}\\n      minDomain={{y: 0}}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.green}\\n      width={450}\\n    >\\n      <ChartAxis tickValues={[2, 3, 4]} />\\n      <ChartAxis dependentAxis showGrid tickValues={[2, 5, 8]} />\\n      <ChartGroup>\\n        <ChartLine\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1 },\\n            { name: 'Cats', x: '2016', y: 2 },\\n            { name: 'Cats', x: '2017', y: 5 },\\n            { name: 'Cats', x: '2018', y: 3 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2 },\\n            { name: 'Dogs', x: '2016', y: 1 },\\n            { name: 'Dogs', x: '2017', y: 7 },\\n            { name: 'Dogs', x: '2018', y: 4 }\\n          ]}\\n          style={{\\n            data: {\\n              strokeDasharray: '3,3'\\n            }\\n          }}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Birds', x: '2015', y: 3 },\\n            { name: 'Birds', x: '2016', y: 4 },\\n            { name: 'Birds', x: '2017', y: 9 },\\n            { name: 'Birds', x: '2018', y: 5 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3 },\\n            { name: 'Mice', x: '2016', y: 3 },\\n            { name: 'Mice', x: '2017', y: 8 },\\n            { name: 'Mice', x: '2018', y: 7 }\\n          ]}\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\"title\":\"Green\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates how to apply basic theme colors.`}\n      </p>\n    </Example>,\n  'Multi-color (ordered)': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\\n\\nconst Multicolorordered = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={350}\\n    />\\n  </div>\\n)\",\"title\":\"Multi-color (ordered)\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates how to apply theme colors for ordered charts like bar, donut, pie, and stack.`}\n      </p>\n    </Example>,\n  'Multi color (unordered)': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chart, ChartArea, ChartAxis, ChartGroup, ChartVoronoiContainer } from '@patternfly/react-charts';\\n// import '@patternfly/patternfly/patternfly-charts.css'; // Required for mix-blend-mode CSS property\\n\\nconst MultiColorunordered = () => (\\n  <div style={{ height: '200px', width: '800px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Area chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[{ name: 'Cats' }, { name: 'Dogs' }, { name: 'Birds' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      height={200}\\n      maxDomain={{y: 9}}\\n      padding={{\\n        bottom: 50,\\n        left: 50,\\n        right: 200, // Adjusted to accommodate legend\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiUnordered}\\n      width={800}\\n    >\\n      <ChartAxis />\\n      <ChartAxis dependentAxis showGrid/>\\n      <ChartGroup>\\n        <ChartArea\\n          data={[\\n            { name: 'Cats', x: '2015', y: 3 },\\n            { name: 'Cats', x: '2016', y: 4 },\\n            { name: 'Cats', x: '2017', y: 8 },\\n            { name: 'Cats', x: '2018', y: 6 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n        <ChartArea\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2 },\\n            { name: 'Dogs', x: '2016', y: 3 },\\n            { name: 'Dogs', x: '2017', y: 4 },\\n            { name: 'Dogs', x: '2018', y: 5 },\\n            { name: 'Dogs', x: '2019', y: 6 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n        <ChartArea\\n          data={[\\n            { name: 'Birds', x: '2015', y: 1 },\\n            { name: 'Birds', x: '2016', y: 2 },\\n            { name: 'Birds', x: '2017', y: 3 },\\n            { name: 'Birds', x: '2018', y: 2 },\\n            { name: 'Birds', x: '2019', y: 4 }\\n          ]}\\n          interpolation=\\\"monotoneX\\\"\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\"title\":\"Multi color (unordered)\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates how to apply theme colors for unordered charts like area, line, and sparkline.`}\n      </p>\n    </Example>,\n  'Custom color scale': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chart, ChartAxis, ChartBar, ChartLegend, ChartStack, ChartThemeColor, ChartTooltip } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\\nimport chart_color_purple_300 from '@patternfly/react-tokens/dist/esm/chart_color_purple_300';\\n\\nconst CustomColorScale = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Stack chart example\\\"\\n      domainPadding={{ x: [30, 25] }}\\n      legendComponent={\\n        <ChartLegend\\n          data={[\\n            {\\n              name: 'Cats',\\n              symbol: { fill: chart_color_blue_300.var }\\n            },\\n            {\\n              name: 'Dogs',\\n              symbol: { fill: chart_color_gold_300.var }\\n            },\\n            {\\n              name: 'Birds',\\n              symbol: { fill: chart_color_green_300.var }\\n            },\\n            {\\n              name: 'Mice',\\n              symbol: { fill: chart_color_purple_300.var }\\n            }\\n          ]}\\n        />\\n      }\\n      legendPosition=\\\"bottom-left\\\"\\n      height={275}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={450}\\n    >\\n      <ChartAxis />\\n      <ChartAxis dependentAxis showGrid />\\n      <ChartStack\\n        horizontal\\n        colorScale={[\\n          chart_color_blue_300.var,\\n          chart_color_gold_300.var,\\n          chart_color_green_300.var,\\n          chart_color_purple_300.var\\n        ]}\\n      >\\n        <ChartBar\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1, label: 'Cats: 1' },\\n            { name: 'Cats', x: '2016', y: 2, label: 'Cats: 2' },\\n            { name: 'Cats', x: '2017', y: 5, label: 'Cats: 5' },\\n            { name: 'Cats', x: '2018', y: 3, label: 'Cats: 3' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Dogs', x: '2015', y: 2, label: 'Dogs: 2' },\\n            { name: 'Dogs', x: '2016', y: 1, label: 'Dogs: 1' },\\n            { name: 'Dogs', x: '2017', y: 7, label: 'Dogs: 7' },\\n            { name: 'Dogs', x: '2018', y: 4, label: 'Dogs: 4' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Birds', x: '2015', y: 4, label: 'Birds: 4' },\\n            { name: 'Birds', x: '2016', y: 4, label: 'Birds: 4' },\\n            { name: 'Birds', x: '2017', y: 9, label: 'Birds: 9' },\\n            { name: 'Birds', x: '2018', y: 7, label: 'Birds: 7' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n        <ChartBar\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3, label: 'Mice: 3' },\\n            { name: 'Mice', x: '2016', y: 3, label: 'Mice: 3' },\\n            { name: 'Mice', x: '2017', y: 8, label: 'Mice: 8' },\\n            { name: 'Mice', x: '2018', y: 5, label: 'Mice: 5' }\\n          ]}\\n          labelComponent={<ChartTooltip constrainToVisibleArea />}\\n        />\\n      </ChartStack>\\n    </Chart>\\n  </div>\\n)\",\"title\":\"Custom color scale\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates an alternate way of applying a custom color scale and fill colors to individual charts.`}\n      </p>\n    </Example>,\n  'Custom stroke color': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chart, ChartAxis, ChartGroup, ChartLine, ChartThemeColor, ChartThreshold, ChartVoronoiContainer } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\n\\nconst CustomStrokeColor = () => (\\n  <div style={{ height: '275px', width: '450px' }}>\\n    <Chart\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Line chart example\\\"\\n      containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n      legendData={[\\n        { name: 'Cats' },\\n        { name: 'Birds' },\\n        { name: 'Mice' },\\n        { name: 'Cats Threshold', symbol: { fill: chart_color_blue_300.var, type: 'threshold' }}\\n      ]}\\n      legendPosition=\\\"bottom\\\"\\n      height={275}\\n      maxDomain={{y: 10}}\\n      minDomain={{y: 0}}\\n      padding={{\\n        bottom: 75, // Adjusted to accommodate legend\\n        left: 50,\\n        right: 50,\\n        top: 50\\n      }}\\n      themeColor={ChartThemeColor.multiUnordered}\\n      width={450}\\n    >\\n      <ChartAxis tickValues={[2, 3, 4]} />\\n      <ChartAxis dependentAxis showGrid tickValues={[2, 5, 8]} />\\n      <ChartGroup>\\n        <ChartLine\\n          data={[\\n            { name: 'Cats', x: '2015', y: 1 },\\n            { name: 'Cats', x: '2016', y: 2 },\\n            { name: 'Cats', x: '2017', y: 5 },\\n            { name: 'Cats', x: '2018', y: 3 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Birds', x: '2015', y: 3 },\\n            { name: 'Birds', x: '2016', y: 4 },\\n            { name: 'Birds', x: '2017', y: 9 },\\n            { name: 'Birds', x: '2018', y: 5 }\\n          ]}\\n        />\\n        <ChartLine\\n          data={[\\n            { name: 'Mice', x: '2015', y: 3 },\\n            { name: 'Mice', x: '2016', y: 3 },\\n            { name: 'Mice', x: '2017', y: 8 },\\n            { name: 'Mice', x: '2018', y: 7 }\\n          ]}\\n        />\\n        <ChartThreshold\\n          data={[\\n            { name: 'Cats Threshold', x: '2015', y: 5 },\\n            { name: 'Cats Threshold', x: '2016', y: 5 },\\n            { name: 'Cats Threshold', x: '2016', y: 6 },\\n            { name: 'Cats Threshold', x: '2017', y: 6 },\\n            { name: 'Cats Threshold', x: '2018', y: 6 }\\n          ]}\\n          style={{\\n            data: {\\n              stroke: chart_color_blue_300.var,\\n            }\\n          }}\\n        />\\n      </ChartGroup>\\n    </Chart>\\n  </div>\\n)\",\"title\":\"Custom stroke color\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates an alternate way of applying custom stroke and fill colors to a threshold chart.`}\n      </p>\n    </Example>,\n  'Custom theme': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chart, ChartBar, ChartAxis, ChartGroup, ChartThemeColor, ChartVoronoiContainer, mergeTheme } from '@patternfly/react-charts';\\nimport chart_color_blue_300 from '@patternfly/react-tokens/dist/esm/chart_color_blue_300';\\nimport chart_color_green_300 from '@patternfly/react-tokens/dist/esm/chart_color_green_300';\\nimport chart_color_cyan_300 from '@patternfly/react-tokens/dist/esm/chart_color_cyan_300';\\nimport chart_color_gold_300 from '@patternfly/react-tokens/dist/esm/chart_color_gold_300';\\n\\nclass MultiColorChart extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    // Colors\\n    this.colorScale = [\\n      chart_color_blue_300.var,\\n      chart_color_green_300.var,\\n      chart_color_cyan_300.var,\\n      chart_color_gold_300.var\\n    ];\\n\\n    // Layout\\n    this.layoutProps = {\\n      padding: {\\n        bottom: 50,\\n        left: 50,\\n        right: 200, // Adjusted to accommodate legend\\n        top: 50\\n      }\\n    };\\n\\n    // Victory theme properties only\\n    this.themeProps = {\\n      bar: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      chart: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      group: {\\n        colorScale: this.colorScale,\\n        ...this.layoutProps,\\n      },\\n      legend: {\\n        colorScale: this.colorScale\\n      }\\n    };\\n\\n    // Applies theme color and variant to base theme\\n    this.myCustomTheme = mergeTheme(\\n      ChartThemeColor.default,\\n      this.themeProps\\n    );\\n  }\\n\\n  render() {\\n    return (\\n      <div style={{ height: '250px', width: '600px' }}>\\n        <Chart\\n          ariaDesc=\\\"Average number of pets\\\"\\n          ariaTitle=\\\"Bar chart example\\\"\\n          containerComponent={<ChartVoronoiContainer labels={({ datum }) => `${datum.name}: ${datum.y}`} constrainToVisibleArea />}\\n          domain={{y: [0,9]}}\\n          domainPadding={{ x: [30, 25] }}\\n          legendData={[{ name: 'Cats' }, { name: 'Dogs' }, { name: 'Birds' }, { name: 'Mice' }]}\\n          legendOrientation=\\\"vertical\\\"\\n          legendPosition=\\\"right\\\"\\n          height={250}\\n          theme={this.myCustomTheme}\\n          width={600}\\n        >\\n          <ChartAxis />\\n          <ChartAxis dependentAxis showGrid />\\n          <ChartGroup offset={11}>\\n            <ChartBar data={[{ name: 'Cats', x: '2015', y: 1 }, { name: 'Cats', x: '2016', y: 2 }, { name: 'Cats', x: '2017', y: 5 }, { name: 'Cats', x: '2018', y: 3 }]} />\\n            <ChartBar data={[{ name: 'Dogs', x: '2015', y: 2 }, { name: 'Dogs', x: '2016', y: 1 }, { name: 'Dogs', x: '2017', y: 7 }, { name: 'Dogs', x: '2018', y: 4 }]} />\\n            <ChartBar data={[{ name: 'Birds', x: '2015', y: 4 }, { name: 'Birds', x: '2016', y: 4 }, { name: 'Birds', x: '2017', y: 9 }, { name: 'Birds', x: '2018', y: 7 }]} />\\n            <ChartBar data={[{ name: 'Mice', x: '2015', y: 3 }, { name: 'Mice', x: '2016', y: 3 }, { name: 'Mice', x: '2017', y: 8 }, { name: 'Mice', x: '2018', y: 5 }]} />\\n          </ChartGroup>\\n        </Chart>\\n      </div>\\n    );\\n  }\\n}\",\"title\":\"Custom theme\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demonstrates custom theme properties, which may be applied across multiple charts.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"introduction\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Introduction`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Note: PatternFly React charts live in its own package at `}\n      <PatternflyThemeLink {...{\"to\":\"https://www.npmjs.com/package/@patternfly/react-charts\"}}>\n        {`@patternfly/react-charts`}\n      </PatternflyThemeLink>\n      {`!`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`PatternFly React charts are based on the `}\n      <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/victory-chart/\"}}>\n        {`Victory`}\n      </PatternflyThemeLink>\n      {` chart library, along with additional functionality, custom components, and theming for PatternFly. This provides a collection of React based components you can use to build PatternFly patterns with consistent markup, styling, and behavior.`}\n    </p>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Green\"])}\n    {React.createElement(pageData.examples[\"Multi-color (ordered)\"])}\n    {React.createElement(pageData.examples[\"Multi color (unordered)\"])}\n    {React.createElement(pageData.examples[\"Custom color scale\"])}\n    {React.createElement(pageData.examples[\"Custom stroke color\"])}\n    {React.createElement(pageData.examples[\"Custom theme\"])}\n    <AutoLinkHeader {...{\"id\":\"documentation\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Documentation`}\n    </AutoLinkHeader>\n    <AutoLinkHeader {...{\"id\":\"tips\",\"size\":\"h3\",\"className\":\"ws-title ws-h3\"}}>\n      {`Tips`}\n    </AutoLinkHeader>\n    <ul {...{\"className\":\"ws-ul\"}}>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`See Victory's `}\n        <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/faq\"}}>\n          {`FAQ`}\n        </PatternflyThemeLink>\n      </li>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`The `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`theme`}\n        </code>\n        {` and `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`themeColor`}\n        </code>\n        {` props should be applied at the most top level component`}\n      </li>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`Use `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`ChartGroup`}\n        </code>\n        {` to apply theme color scales and other properties to multiple components`}\n      </li>\n    </ul>\n    <AutoLinkHeader {...{\"id\":\"note\",\"size\":\"h3\",\"className\":\"ws-title ws-h3\"}}>\n      {`Note`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Currently, the generated documention below is not able to resolve type definitions from Victory imports. For the components used in the examples above, Victory pass-thru props are also documented here:`}\n    </p>\n    <ul {...{\"className\":\"ws-ul\"}}>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`For theme props, see `}\n        <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/victory-theme\"}}>\n          {`VictoryTheme`}\n        </PatternflyThemeLink>\n      </li>\n    </ul>\n  </React.Fragment>\n);\nComponent.displayName = 'ChartsThemedChartsReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}