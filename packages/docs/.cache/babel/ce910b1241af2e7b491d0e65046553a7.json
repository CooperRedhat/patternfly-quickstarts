{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport UploadIcon from '@patternfly/react-icons/dist/esm/icons/upload-icon';\nvar pageData = {\n  \"id\": \"File upload - multiple\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/file-upload---multiple/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/MultipleFileUploadDemos.md\",\n  \"beta\": true,\n  \"examples\": [\"Rejected file handling\"]\n};\npageData.liveContext = {\n  UploadIcon: UploadIcon\n};\npageData.examples = {\n  'Rejected file handling': function RejectedFileHandling(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  MultipleFileUpload,\\n  MultipleFileUploadMain,\\n  MultipleFileUploadStatus,\\n  MultipleFileUploadStatusItem,\\n  Modal,\\n  Checkbox\\n} from '@patternfly/react-core';\\nimport UploadIcon from '@patternfly/react-icons/dist/esm/icons/upload-icon';\\n\\ninterface readFile {\\n  fileName: string;\\n  data?: string;\\n  loadResult?: 'danger' | 'success';\\n  loadError?: DOMException;\\n}\\n\\nexport const MultipleFileUploadBasic: React.FunctionComponent = () => {\\n  const [isHorizontal, setIsHorizontal] = React.useState(false);\\n  const [currentFiles, setCurrentFiles] = React.useState<File[]>([]);\\n  const [readFileData, setReadFileData] = React.useState<readFile[]>([]);\\n  const [showStatus, setShowStatus] = React.useState(false);\\n  const [statusIcon, setStatusIcon] = React.useState('inProgress');\\n  const [modalText, setModalText] = React.useState('');\\n\\n  // only show the status component once a file has been uploaded, but keep the status list component itself even if all files are removed\\n  if (!showStatus && currentFiles.length > 0) {\\n    setShowStatus(true);\\n  }\\n\\n  // determine the icon that should be shown for the overall status list\\n  React.useEffect(() => {\\n    if (readFileData.length < currentFiles.length) {\\n      setStatusIcon('inProgress');\\n    } else if (readFileData.every(file => file.loadResult === 'success')) {\\n      setStatusIcon('success');\\n    } else {\\n      setStatusIcon('danger');\\n    }\\n  }, [readFileData, currentFiles]);\\n\\n  // remove files from both state arrays based on their name\\n  const removeFiles = (namesOfFilesToRemove: string[]) => {\\n    const newCurrentFiles = currentFiles.filter(\\n      currentFile => !namesOfFilesToRemove.some(fileName => fileName === currentFile.name)\\n    );\\n\\n    setCurrentFiles(newCurrentFiles);\\n\\n    const newReadFiles = readFileData.filter(\\n      readFile => !namesOfFilesToRemove.some(fileName => fileName === readFile.fileName)\\n    );\\n\\n    setReadFileData(newReadFiles);\\n  };\\n\\n  // callback that will be called by the react dropzone with the newly dropped file objects\\n  const handleFileDrop = (droppedFiles: File[]) => {\\n    // identify what, if any, files are re-uploads of already uploaded files\\n    const currentFileNames = currentFiles.map(file => file.name);\\n    const reUploads = droppedFiles.filter(droppedFile => currentFileNames.includes(droppedFile.name));\\n\\n    /** this promise chain is needed because if the file removal is done at the same time as the file adding react\\n     * won't realize that the status items for the re-uploaded files needs to be re-rendered */\\n    Promise.resolve()\\n      .then(() => removeFiles(reUploads.map(file => file.name)))\\n      .then(() => setCurrentFiles(prevFiles => [...prevFiles, ...droppedFiles]));\\n  };\\n\\n  // callback called by the status item when a file is successfully read with the built-in file reader\\n  const handleReadSuccess = (data: string, file: File) => {\\n    setReadFileData(prevReadFiles => [...prevReadFiles, { data, fileName: file.name, loadResult: 'success' }]);\\n  };\\n\\n  // callback called by the status item when a file encounters an error while being read with the built-in file reader\\n  const handleReadFail = (error: DOMException, file: File) => {\\n    setReadFileData(prevReadFiles => [\\n      ...prevReadFiles,\\n      { loadError: error, fileName: file.name, loadResult: 'danger' }\\n    ]);\\n  };\\n\\n  // dropzone prop that communicates to the user that files they've attempted to upload are not an appropriate type\\n  const handleDropRejected = (files: File[], _event: React.DragEvent<HTMLElement>) => {\\n    if (files.length === 1) {\\n      setModalText(`${files[0].name} is not an accepted file type`);\\n    } else {\\n      const rejectedMessages = files.reduce((acc, file) => (acc += `${file.name}, `), '');\\n      setModalText(`${rejectedMessages}are not accepted file types`);\\n    }\\n  };\\n\\n  const successfullyReadFileCount = readFileData.filter(fileData => fileData.loadResult === 'success').length;\\n\\n  return (\\n    <>\\n      <MultipleFileUpload\\n        onFileDrop={handleFileDrop}\\n        dropzoneProps={{\\n          accept: 'image/jpeg, application/msword, application/pdf, image/png',\\n          onDropRejected: handleDropRejected\\n        }}\\n        isHorizontal={isHorizontal}\\n      >\\n        <MultipleFileUploadMain\\n          titleIcon={<UploadIcon />}\\n          titleText=\\\"Drag and drop files here\\\"\\n          titleTextSeparator=\\\"or\\\"\\n          infoText=\\\"Accepted file types: JPEG, Doc, PDF, PNG\\\"\\n        />\\n        {showStatus && (\\n          <MultipleFileUploadStatus\\n            statusToggleText={`${successfullyReadFileCount} of ${currentFiles.length} files uploaded`}\\n            statusToggleIcon={statusIcon}\\n          >\\n            {currentFiles.map(file => (\\n              <MultipleFileUploadStatusItem\\n                file={file}\\n                key={file.name}\\n                onClearClick={() => removeFiles([file.name])}\\n                onReadSuccess={handleReadSuccess}\\n                onReadFail={handleReadFail}\\n              />\\n            ))}\\n          </MultipleFileUploadStatus>\\n        )}\\n        <Modal\\n          isOpen={!!modalText}\\n          title=\\\"Unsupported file\\\"\\n          titleIconVariant=\\\"warning\\\"\\n          showClose\\n          aria-label=\\\"unsupported file upload attempted\\\"\\n          onClose={() => setModalText('')}\\n        >\\n          {modalText}\\n        </Modal>\\n      </MultipleFileUpload>\\n      <Checkbox\\n        id=\\\"horizontal-checkbox\\\"\\n        label=\\\"Show as horizontal\\\"\\n        isChecked={isHorizontal}\\n        onChange={() => setIsHorizontal(!isHorizontal)}\\n      />\\n    </>\\n  );\\n};\\n\",\n      \"title\": \"Rejected file handling\",\n      \"lang\": \"ts\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demo shows how to add a modal to alert users that the file(s) they attempted to drop was of a non-acceptable type.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Rejected file handling\"]));\n};\n\nComponent.displayName = 'ComponentsFileUpload-MultipleReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","UploadIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/file-upload---multiple/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport UploadIcon from '@patternfly/react-icons/dist/esm/icons/upload-icon';\nconst pageData = {\n  \"id\": \"File upload - multiple\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/file-upload---multiple/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/MultipleFileUploadDemos.md\",\n  \"beta\": true,\n  \"examples\": [\n    \"Rejected file handling\"\n  ]\n};\npageData.liveContext = {\n  UploadIcon\n};\npageData.examples = {\n  'Rejected file handling': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  MultipleFileUpload,\\n  MultipleFileUploadMain,\\n  MultipleFileUploadStatus,\\n  MultipleFileUploadStatusItem,\\n  Modal,\\n  Checkbox\\n} from '@patternfly/react-core';\\nimport UploadIcon from '@patternfly/react-icons/dist/esm/icons/upload-icon';\\n\\ninterface readFile {\\n  fileName: string;\\n  data?: string;\\n  loadResult?: 'danger' | 'success';\\n  loadError?: DOMException;\\n}\\n\\nexport const MultipleFileUploadBasic: React.FunctionComponent = () => {\\n  const [isHorizontal, setIsHorizontal] = React.useState(false);\\n  const [currentFiles, setCurrentFiles] = React.useState<File[]>([]);\\n  const [readFileData, setReadFileData] = React.useState<readFile[]>([]);\\n  const [showStatus, setShowStatus] = React.useState(false);\\n  const [statusIcon, setStatusIcon] = React.useState('inProgress');\\n  const [modalText, setModalText] = React.useState('');\\n\\n  // only show the status component once a file has been uploaded, but keep the status list component itself even if all files are removed\\n  if (!showStatus && currentFiles.length > 0) {\\n    setShowStatus(true);\\n  }\\n\\n  // determine the icon that should be shown for the overall status list\\n  React.useEffect(() => {\\n    if (readFileData.length < currentFiles.length) {\\n      setStatusIcon('inProgress');\\n    } else if (readFileData.every(file => file.loadResult === 'success')) {\\n      setStatusIcon('success');\\n    } else {\\n      setStatusIcon('danger');\\n    }\\n  }, [readFileData, currentFiles]);\\n\\n  // remove files from both state arrays based on their name\\n  const removeFiles = (namesOfFilesToRemove: string[]) => {\\n    const newCurrentFiles = currentFiles.filter(\\n      currentFile => !namesOfFilesToRemove.some(fileName => fileName === currentFile.name)\\n    );\\n\\n    setCurrentFiles(newCurrentFiles);\\n\\n    const newReadFiles = readFileData.filter(\\n      readFile => !namesOfFilesToRemove.some(fileName => fileName === readFile.fileName)\\n    );\\n\\n    setReadFileData(newReadFiles);\\n  };\\n\\n  // callback that will be called by the react dropzone with the newly dropped file objects\\n  const handleFileDrop = (droppedFiles: File[]) => {\\n    // identify what, if any, files are re-uploads of already uploaded files\\n    const currentFileNames = currentFiles.map(file => file.name);\\n    const reUploads = droppedFiles.filter(droppedFile => currentFileNames.includes(droppedFile.name));\\n\\n    /** this promise chain is needed because if the file removal is done at the same time as the file adding react\\n     * won't realize that the status items for the re-uploaded files needs to be re-rendered */\\n    Promise.resolve()\\n      .then(() => removeFiles(reUploads.map(file => file.name)))\\n      .then(() => setCurrentFiles(prevFiles => [...prevFiles, ...droppedFiles]));\\n  };\\n\\n  // callback called by the status item when a file is successfully read with the built-in file reader\\n  const handleReadSuccess = (data: string, file: File) => {\\n    setReadFileData(prevReadFiles => [...prevReadFiles, { data, fileName: file.name, loadResult: 'success' }]);\\n  };\\n\\n  // callback called by the status item when a file encounters an error while being read with the built-in file reader\\n  const handleReadFail = (error: DOMException, file: File) => {\\n    setReadFileData(prevReadFiles => [\\n      ...prevReadFiles,\\n      { loadError: error, fileName: file.name, loadResult: 'danger' }\\n    ]);\\n  };\\n\\n  // dropzone prop that communicates to the user that files they've attempted to upload are not an appropriate type\\n  const handleDropRejected = (files: File[], _event: React.DragEvent<HTMLElement>) => {\\n    if (files.length === 1) {\\n      setModalText(`${files[0].name} is not an accepted file type`);\\n    } else {\\n      const rejectedMessages = files.reduce((acc, file) => (acc += `${file.name}, `), '');\\n      setModalText(`${rejectedMessages}are not accepted file types`);\\n    }\\n  };\\n\\n  const successfullyReadFileCount = readFileData.filter(fileData => fileData.loadResult === 'success').length;\\n\\n  return (\\n    <>\\n      <MultipleFileUpload\\n        onFileDrop={handleFileDrop}\\n        dropzoneProps={{\\n          accept: 'image/jpeg, application/msword, application/pdf, image/png',\\n          onDropRejected: handleDropRejected\\n        }}\\n        isHorizontal={isHorizontal}\\n      >\\n        <MultipleFileUploadMain\\n          titleIcon={<UploadIcon />}\\n          titleText=\\\"Drag and drop files here\\\"\\n          titleTextSeparator=\\\"or\\\"\\n          infoText=\\\"Accepted file types: JPEG, Doc, PDF, PNG\\\"\\n        />\\n        {showStatus && (\\n          <MultipleFileUploadStatus\\n            statusToggleText={`${successfullyReadFileCount} of ${currentFiles.length} files uploaded`}\\n            statusToggleIcon={statusIcon}\\n          >\\n            {currentFiles.map(file => (\\n              <MultipleFileUploadStatusItem\\n                file={file}\\n                key={file.name}\\n                onClearClick={() => removeFiles([file.name])}\\n                onReadSuccess={handleReadSuccess}\\n                onReadFail={handleReadFail}\\n              />\\n            ))}\\n          </MultipleFileUploadStatus>\\n        )}\\n        <Modal\\n          isOpen={!!modalText}\\n          title=\\\"Unsupported file\\\"\\n          titleIconVariant=\\\"warning\\\"\\n          showClose\\n          aria-label=\\\"unsupported file upload attempted\\\"\\n          onClose={() => setModalText('')}\\n        >\\n          {modalText}\\n        </Modal>\\n      </MultipleFileUpload>\\n      <Checkbox\\n        id=\\\"horizontal-checkbox\\\"\\n        label=\\\"Show as horizontal\\\"\\n        isChecked={isHorizontal}\\n        onChange={() => setIsHorizontal(!isHorizontal)}\\n      />\\n    </>\\n  );\\n};\\n\",\"title\":\"Rejected file handling\",\"lang\":\"ts\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demo shows how to add a modal to alert users that the file(s) they attempted to drop was of a non-acceptable type.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Rejected file handling\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsFileUpload-MultipleReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,wBADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,gDAJO;EAKf,cAAc,iIALC;EAMf,QAAQ,IANO;EAOf,YAAY,CACV,wBADU;AAPG,CAAjB;AAWAA,QAAQ,CAACC,WAAT,GAAuB;EACrBF,UAAU,EAAVA;AADqB,CAAvB;AAGAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,0BAA0B,8BAAAC,KAAK;IAAA,oBAC7B,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,umLAA9C;MAAspL,SAAQ,wBAA9pL;MAAurL,QAAO;IAA9rL,iBAEE;MAAQ,aAAY;IAApB,6HAFF,CAD6B;EAAA;AADb,CAApB;;AAUA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGV,KAAK,CAACW,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,wBAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,6CAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}