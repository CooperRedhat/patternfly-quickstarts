{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nvar pageData = {\n  \"id\": \"Donut chart\",\n  \"section\": \"charts\",\n  \"source\": \"react\",\n  \"slug\": \"/charts/donut-chart/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-charts/src/components/ChartDonut/examples/ChartDonut.md\",\n  \"propComponents\": [{\n    \"name\": \"ChartDonut\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"allowTooltip\",\n      \"type\": \"boolean\",\n      \"description\": \"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\\nproperty is also provided.\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"animate\",\n      \"type\": \"boolean | object\",\n      \"description\": \"The animate prop specifies props for VictoryAnimation to use.\\nThe animate prop should also be used to specify enter and exit\\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\\n\\n\\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\"\n    }, {\n      \"name\": \"ariaDesc\",\n      \"type\": \"string\",\n      \"description\": \"The ariaDesc prop specifies the description of the chart/SVG to assist with\\naccessibility for screen readers.\\n\\nNote: Overridden by the desc prop of containerComponent\"\n    }, {\n      \"name\": \"ariaTitle\",\n      \"type\": \"string\",\n      \"description\": \"The ariaTitle prop specifies the title to be applied to the SVG to assist\\naccessibility for screen readers.\\n\\nNote: Overridden by the title prop of containerComponent\"\n    }, {\n      \"name\": \"capHeight\",\n      \"type\": \"number | string | Function\",\n      \"description\": \"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\\nunitless number, it is assumed to be ems.\",\n      \"defaultValue\": \"1.1\"\n    }, {\n      \"name\": \"categories\",\n      \"type\": \"string[] | { x: string[], y: string[] }\",\n      \"description\": \"The categories prop specifies how categorical data for a chart should be ordered.\\nThis prop should be given as an array of string values, or an object with\\nthese arrays of values specified for x and y. If this prop is not set,\\ncategorical data will be plotted in the order it was given in the data array\\n\\n\\n@example [\\\"dogs\\\", \\\"cats\\\", \\\"mice\\\"]\"\n    }, {\n      \"name\": \"colorScale\",\n      \"type\": \"string[]\",\n      \"description\": \"The colorScale prop is an optional prop that defines the color scale the pie\\nwill be created on. This prop should be given as an array of CSS colors, or as a string\\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\\ndata object\"\n    }, {\n      \"name\": \"constrainToVisibleArea\",\n      \"type\": \"boolean\",\n      \"description\": \"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\"\n    }, {\n      \"name\": \"containerComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The containerComponent prop takes an entire component which will be used to\\ncreate a container element for standalone charts.\\nThe new element created from the passed containerComponent wil be provided with\\nthese props from ChartDonut: height, width, children\\n(the chart itself) and style. Props that are not provided by the\\nchild chart component include title and desc, both of which\\nare intended to add accessibility to Victory components. The more descriptive these props\\nare, the more accessible your data will be for people using screen readers.\\nAny of these props may be overridden by passing in props to the supplied component,\\nor modified or ignored within the custom component itself. If a dataComponent is\\nnot provided, ChartDonut will use the default ChartContainer component.\\n\\n@example <ChartContainer title=\\\"Chart of Dog Breeds\\\" desc=\\\"This chart shows ...\\\" />\",\n      \"defaultValue\": \"<ChartContainer />\"\n    }, {\n      \"name\": \"cornerRadius\",\n      \"type\": \"number | Function\",\n      \"description\": \"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut\"\n    }, {\n      \"name\": \"data\",\n      \"type\": \"any[]\",\n      \"description\": \"The data prop specifies the data to be plotted,\\nwhere data X-value is the slice label (string or number),\\nand Y-value is the corresponding number value represented by the slice\\nData should be in the form of an array of data points.\\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\\nbut by default, an object with x and y properties is expected.\\n\\n@example\\n\\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\\n[[{x: \\\"a\\\", y: 1}, {x: \\\"b\\\", y: 2}], [{x: \\\"a\\\", y: 2}, {x: \\\"b\\\", y: 3}]]\"\n    }, {\n      \"name\": \"dataComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The dataComponent prop takes an entire, HTML-complete data component which will be used to\\ncreate slices for each datum in the pie chart. The new element created from the passed\\ndataComponent will have the property datum set by the pie chart for the point it renders;\\nproperties style and pathFunction calculated by ChartDonut; an index property set\\ncorresponding to the location of the datum in the data provided to the pie; events bound to\\nthe ChartDonut; and the d3 compatible slice object.\\nIf a dataComponent is not provided, ChartDonut's Slice component will be used.\"\n    }, {\n      \"name\": \"endAngle\",\n      \"type\": \"number\",\n      \"description\": \"The overall end angle of the pie in degrees. This prop is used in conjunction with\\nstartAngle to create a pie that spans only a segment of a circle.\"\n    }, {\n      \"name\": \"eventKey\",\n      \"type\": \"number | string | Function\",\n      \"description\": \"Similar to data accessor props `x` and `y`, this prop may be used to functionally\\nassign eventKeys to data\"\n    }, {\n      \"name\": \"events\",\n      \"type\": \"object[]\",\n      \"description\": \"The event prop takes an array of event objects. Event objects are composed of\\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\\nfor a given component, so \\\"data\\\" and \\\"labels\\\" are all valid targets for ChartDonut\\nevents. The eventKey may optionally be used to select a single element by index rather than\\nan entire set. The eventHandlers object should be given as an object whose keys are standard\\nevent names (i.e. onClick) and whose values are event callbacks. The return value\\nof an event handler is used to modify elemnts. The return value should be given\\nas an object or an array of objects with optional target and eventKey keys,\\nand a mutation key whose value is a function. The target and eventKey keys\\nwill default to those corresponding to the element the event handler was attached to.\\nThe mutation function will be called with the calculated props for the individual selected\\nelement (i.e. a single bar), and the object returned from the mutation function\\nwill override the props of the selected element via object assignment.\\n\\n\\n@example\\nevents={[\\n  {\\n    target: \\\"data\\\",\\n    eventKey: 1,\\n    eventHandlers: {\\n      onClick: () => {\\n        return [\\n           {\\n             eventKey: 2,\\n             mutation: (props) => {\\n               return {style: merge({}, props.style, {fill: \\\"orange\\\"})};\\n             }\\n           }, {\\n             eventKey: 2,\\n             target: \\\"labels\\\",\\n             mutation: () => {\\n               return {text: \\\"hey\\\"};\\n             }\\n           }\\n         ];\\n      }\\n    }\\n  }\\n]}\"\n    }, {\n      \"name\": \"externalEventMutations\",\n      \"type\": \"object[]\",\n      \"description\": \"ChartDonut uses the standard externalEventMutations prop.\"\n    }, {\n      \"name\": \"groupComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The groupComponent prop takes an entire component which will be used to\\ncreate group elements for use within container elements. This prop defaults\\nto a <g> tag on web, and a react-native-svg <G> tag on mobile\"\n    }, {\n      \"name\": \"height\",\n      \"type\": \"number\",\n      \"description\": \"Specifies the height the svg viewBox of the chart container. This value should be given as a\\nnumber of pixels.\\n\\nBecause Victory renders responsive containers, the width and height props do not determine the width and\\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\\npixels will depend on the size of the container the chart is rendered into.\\n\\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\\nin order to accommodate the extra legend.\\n\\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\\n\\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.\",\n      \"defaultValue\": \"theme.pie.height\"\n    }, {\n      \"name\": \"innerRadius\",\n      \"type\": \"number | Function\",\n      \"description\": \"When creating a donut chart, this prop determines the number of pixels between\\nthe center of the chart and the inner edge.\"\n    }, {\n      \"name\": \"labelComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The labelComponent prop takes in an entire label component which will be used\\nto create a label for the area. The new element created from the passed labelComponent\\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\\ntextAnchor, angle, style, text, and events. any of these props may be overridden\\nby passing in props to the supplied component, or modified or ignored within\\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\\nwill be created with props described above. This labelComponent prop should be used to\\nprovide a series label for ChartDonut. If individual labels are required for each\\ndata point, they should be created by composing ChartDonut with VictoryScatter\"\n    }, {\n      \"name\": \"labelPosition\",\n      \"type\": \"string | Function\",\n      \"description\": \"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\\nWhen this prop is not given, the label will be positioned at the centroid of each slice.\"\n    }, {\n      \"name\": \"labelRadius\",\n      \"type\": \"number | Function\",\n      \"description\": \"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\\nIf this prop is not set, the label radius will default to the radius of the pie + label padding.\"\n    }, {\n      \"name\": \"labels\",\n      \"type\": \"string[] | number[] | ((data: any) => string | number | null)\",\n      \"description\": \"The labels prop defines labels that will appear above each bar in your chart.\\nThis prop should be given as an array of values or as a function of data.\\nIf given as an array, the number of elements in the array should be equal to\\nthe length of the data array. Labels may also be added directly to the data object\\nlike data={[{x: 1, y: 1, label: \\\"first\\\"}]}.\\n\\n@example [\\\"spring\\\", \\\"summer\\\", \\\"fall\\\", \\\"winter\\\"], (datum) => datum.title\"\n    }, {\n      \"name\": \"legendAllowWrap\",\n      \"type\": \"boolean\",\n      \"description\": \"Allows legend items to wrap. A value of true allows the legend to wrap onto the next line\\nif its container is not wide enough.\\n\\nNote: This is overridden by the legendItemsPerRow property\"\n    }, {\n      \"name\": \"legendComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The legend component to render with chart.\\n\\nNote: Use legendData so the legend width can be calculated and positioned properly.\\nDefault legend properties may be applied\"\n    }, {\n      \"name\": \"legendData\",\n      \"type\": \"{\\n  name?: string;\\n  symbol?: {\\n    fill?: string;\\n    type?: string;\\n  };\\n}[]\",\n      \"description\": \"Specify data via the data prop. ChartLegend expects data as an\\narray of objects with name (required), symbol, and labels properties.\\nThe data prop must be given as an array.\\n\\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\"\n    }, {\n      \"name\": \"legendOrientation\",\n      \"type\": \"'horizontal' | 'vertical'\",\n      \"description\": \"The orientation prop takes a string that defines whether legend data\\nare displayed in a row or column. When orientation is \\\"horizontal\\\",\\nlegend items will be displayed in a single row. When orientation is\\n\\\"vertical\\\", legend items will be displayed in a single column. Line\\nand text-wrapping is not currently supported, so \\\"vertical\\\"\\norientation is both the default setting and recommended for\\ndisplaying many series of data.\"\n    }, {\n      \"name\": \"legendPosition\",\n      \"type\": \"'bottom' | 'right'\",\n      \"description\": \"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\\n\\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\\ncases, the legend may not be visible until enough padding is applied.\",\n      \"defaultValue\": \"ChartCommonStyles.legend.position\"\n    }, {\n      \"name\": \"name\",\n      \"type\": \"string\",\n      \"description\": \"The name prop is used to reference a component instance when defining shared events.\"\n    }, {\n      \"name\": \"origin\",\n      \"type\": \"{ x: number, y: number }\",\n      \"description\": \"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\\n\\nNote: It will not typically be necessary to set an origin prop manually\"\n    }, {\n      \"name\": \"padAngle\",\n      \"type\": \"number | Function\",\n      \"description\": \"The padAngle prop determines the amount of separation between adjacent data slices\\nin number of degrees\"\n    }, {\n      \"name\": \"padding\",\n      \"type\": \"number | { top: number, bottom: number, left: number, right: number }\",\n      \"description\": \"The padding props specifies the amount of padding in number of pixels between\\nthe edge of the chart and any rendered child components. This prop can be given\\nas a number or as an object with padding specified for top, bottom, left\\nand right.\"\n    }, {\n      \"name\": \"radius\",\n      \"type\": \"number | Function\",\n      \"description\": \"Specifies the radius of the chart. If this property is not provided it is computed\\nfrom width, height, and padding props\"\n    }, {\n      \"name\": \"sortKey\",\n      \"type\": \"number | string | Function | string[]\",\n      \"description\": \"Use the sortKey prop to indicate how data should be sorted. This prop\\nis given directly to the lodash sortBy function to be executed on the\\nfinal dataset.\"\n    }, {\n      \"name\": \"sortOrder\",\n      \"type\": \"string\",\n      \"description\": \"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order.\"\n    }, {\n      \"name\": \"standalone\",\n      \"type\": \"boolean\",\n      \"description\": \"The standalone prop determines whether the component will render a standalone svg\\nor a <g> tag that will be included in an external svg. Set standalone to false to\\ncompose ChartDonut with other components within an enclosing <svg> tag.\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"startAngle\",\n      \"type\": \"number\",\n      \"description\": \"The overall start angle of the pie in degrees. This prop is used in conjunction with\\nendAngle to create a pie that spans only a segment of a circle.\"\n    }, {\n      \"name\": \"style\",\n      \"type\": \"{ parent: object, data: object, labels: object }\",\n      \"description\": \"The style prop specifies styles for your pie. ChartDonut relies on Radium,\\nso valid Radium style objects should work for this prop. Height, width, and\\npadding should be specified via the height, width, and padding props.\\n\\n\\n@example {data: {stroke: \\\"black\\\"}, label: {fontSize: 10}}\"\n    }, {\n      \"name\": \"subTitle\",\n      \"type\": \"string\",\n      \"description\": \"The subtitle for the donut chart\"\n    }, {\n      \"name\": \"subTitleComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The label component to render the chart subTitle.\\n\\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\\nuse the x and y props of ChartLabel to adjust the center position. For example:\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\nsubTitleComponent={<ChartLabel y={130} />}\\ntitle={100}\\ntitleComponent={<ChartLabel y={107} />}\\n</pre>\\n\\nNote: Default label properties may be applied\"\n    }, {\n      \"name\": \"subTitlePosition\",\n      \"type\": \"'bottom' | 'center' | 'right'\",\n      \"description\": \"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'\",\n      \"defaultValue\": \"ChartDonutStyles.label.subTitlePosition\"\n    }, {\n      \"name\": \"theme\",\n      \"type\": \"object\",\n      \"description\": \"The theme prop takes a style object with nested data, labels, and parent objects.\\nYou can create this object yourself, or you can use a theme provided by\\nWhen using ChartDonut as a solo component, implement the theme directly on\\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\\nplease call the theme on the outermost wrapper component instead.\",\n      \"defaultValue\": \"getDonutTheme(themeColor)\"\n    }, {\n      \"name\": \"themeColor\",\n      \"type\": \"string\",\n      \"description\": \"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\\n\\nNote: Not compatible with theme prop\\n\\n@example themeColor={ChartThemeColor.blue}\"\n    }, {\n      \"name\": \"themeVariant\",\n      \"type\": \"string\",\n      \"description\": \"Specifies the theme variant. Valid values are 'dark' or 'light'\\n\\nNote: Not compatible with theme prop\\n\\n Use PatternFly's pf-theme-dark CSS selector\",\n      \"deprecated\": true\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string\",\n      \"description\": \"The title for the donut chart\"\n    }, {\n      \"name\": \"titleComponent\",\n      \"type\": \"React.ReactElement<any>\",\n      \"description\": \"The label component to render the chart title.\\n\\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\\nassociated with subtitle styles.\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\ntitle={100}\\ntitleComponent={\\n  <ChartLabel style={[{\\n      fill: 'red', // title color\\n      fontSize: 24\\n    }, {\\n      fill: 'blue', // subtitle color\\n      fontSize: 14\\n    }]}\\n  />\\n}\\n</pre>\\n\\nIn this case, both title and subTitle will be centered together. However, should you also override the\\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\\nuse the x and y props of ChartLabel to adjust the center position. For example:\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\nsubTitleComponent={<ChartLabel y={130} />}\\ntitle={100}\\ntitleComponent={<ChartLabel y={107} />}\\n</pre>\\n\\nNote: Default label properties may be applied\",\n      \"defaultValue\": \"<ChartLabel />\"\n    }, {\n      \"name\": \"width\",\n      \"type\": \"number\",\n      \"description\": \"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\\n\\nBecause Victory renders responsive containers, the width and height props do not determine the width and\\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\\nto the same width in order to maintain the aspect ratio.\",\n      \"defaultValue\": \"theme.pie.width\"\n    }, {\n      \"name\": \"x\",\n      \"type\": \"number | string | Function | string[]\",\n      \"description\": \"The x prop specifies how to access the X value of each data point.\\nIf given as a function, it will be run on each data point, and returned value will be used.\\nIf given as an integer, it will be used as an array index for array-type data points.\\nIf given as a string, it will be used as a property key for object-type data points.\\nIf given as an array of strings, or a string containing dots or brackets,\\nit will be used as a nested object property path (for details see Lodash docs for _.get).\\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\\n\\n\\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\"\n    }, {\n      \"name\": \"y\",\n      \"type\": \"number | string | Function | string[]\",\n      \"description\": \"The y prop specifies how to access the Y value of each data point.\\nIf given as a function, it will be run on each data point, and returned value will be used.\\nIf given as an integer, it will be used as an array index for array-type data points.\\nIf given as a string, it will be used as a property key for object-type data points.\\nIf given as an array of strings, or a string containing dots or brackets,\\nit will be used as a nested object property path (for details see Lodash docs for _.get).\\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\\n\\n\\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\"\n    }]\n  }],\n  \"examples\": [\"Basic\", \"Right aligned legend\", \"Multi-color (ordered) with right aligned legend\", \"Bottom aligned legend\", \"Small\", \"Small with right aligned legend\", \"Small with bottom aligned subtitle\", \"Small with right aligned subtitle\"]\n};\npageData.liveContext = {\n  ChartDonut: ChartDonut,\n  ChartThemeColor: ChartThemeColor\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst Basic = () => (\\n  <div style={{ height: '230px', width: '230px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n    />\\n  </div>\\n)\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Right aligned legend': function RightAlignedLegend(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst RightAlignedLegend = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={350}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Right aligned legend\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Multi-color (ordered) with right aligned legend': function MultiColorOrderedWithRightAlignedLegend(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\\n\\nconst MulticolororderedWithRightAlignedLegend = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={350}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Multi-color (ordered) with right aligned legend\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Bottom aligned legend': function BottomAlignedLegend(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst BottomAlignedLegend = () => (\\n  <div style={{ height: '275px', width: '300px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      donutOrientation=\\\"top\\\"\\n      height={275}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendPosition=\\\"bottom\\\"\\n      legendWidth={225}\\n      padding={{\\n        bottom: 65, // Adjusted to accommodate legend\\n        left: 20,\\n        right: 20,\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={300}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Bottom aligned legend\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Small': function Small(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst Small = () => (\\n  <div style={{ height: '150px', width: '150px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={150}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={150}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Small\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Small with right aligned legend': function SmallWithRightAlignedLegend(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithRightAlignedLegend = () => (\\n  <div style={{ height: '150px', width: '275px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={150}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 145, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={275}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Small with right aligned legend\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Small with bottom aligned subtitle': function SmallWithBottomAlignedSubtitle(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithBottomAlignedSubtitle = () => (\\n  <div style={{ height: '165px', width: '275px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={165}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 25, // Adjusted to accommodate subTitle\\n        left: 20,\\n        right: 145, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      subTitlePosition=\\\"bottom\\\"\\n      title=\\\"100\\\"\\n      width={275}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Small with bottom aligned subtitle\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Small with right aligned subtitle': function SmallWithRightAlignedSubtitle(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithRightAlignedSubtitle = () => (\\n  <div style={{ height: '200px', width: '300px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={200}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendPosition=\\\"bottom\\\"\\n      padding={{\\n        bottom: 70, // Adjusted to accommodate legend\\n        left: 20,\\n        right: 50, // Adjusted to accommodate subTitle\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      subTitlePosition=\\\"right\\\"\\n      title=\\\"100\\\"\\n      width={300}\\n    />\\n  </div>\\n)\",\n      \"title\": \"Small with right aligned subtitle\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"introduction\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Introduction\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Note: PatternFly React charts live in its own package at \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://www.npmjs.com/package/@patternfly/react-charts\"\n  }, \"@patternfly/react-charts\"), \"!\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"PatternFly React charts are based on the \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/victory-chart/\"\n  }, \"Victory\"), \" chart library, along with additional functionality, custom components, and theming for PatternFly. This provides a collection of React based components you can use to build PatternFly patterns with consistent markup, styling, and behavior.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Learn to build a donut chart using a Katacoda tutorial starting with a simple chart, adding thresholds, tooltips, a legend, and concluding by changing the theme color. You'll learn how to use React chart components together to build a consistent user experience.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://katacoda.com/patternfly/courses/react-charts/donut-chart\"\n  }, \"Start course\")), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Right aligned legend\"]), React.createElement(pageData.examples[\"Multi-color (ordered) with right aligned legend\"]), React.createElement(pageData.examples[\"Bottom aligned legend\"]), React.createElement(pageData.examples[\"Small\"]), React.createElement(pageData.examples[\"Small with right aligned legend\"]), React.createElement(pageData.examples[\"Small with bottom aligned subtitle\"]), React.createElement(pageData.examples[\"Small with right aligned subtitle\"]), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"documentation\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Documentation\"), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"tips\",\n    \"size\": \"h3\",\n    \"className\": \"ws-title ws-h3\"\n  }, \"Tips\"), /*#__PURE__*/React.createElement(\"ul\", {\n    \"className\": \"ws-ul\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"See Victory's \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/faq\"\n  }, \"FAQ\")), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"For single data points or zero values, you may want to set the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"domain\"), \" prop\"), /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"ChartLegend\"), \" may be used as a standalone component, instead of using \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"legendData\"))), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"note\",\n    \"size\": \"h3\",\n    \"className\": \"ws-title ws-h3\"\n  }, \"Note\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Currently, the generated documention below is not able to resolve type definitions from Victory imports. For the\\ncomponents used in the examples above, Victory pass-thru props are also documented here:\"), /*#__PURE__*/React.createElement(\"ul\", {\n    \"className\": \"ws-ul\"\n  }, /*#__PURE__*/React.createElement(\"li\", {\n    \"className\": \"ws-li\"\n  }, \"For \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"ChartDonut\"), \" props, see \", /*#__PURE__*/React.createElement(PatternflyThemeLink, {\n    \"to\": \"https://formidable.com/open-source/victory/docs/victory-pie\"\n  }, \"VictoryPie\"))));\n};\n\nComponent.displayName = 'ChartsDonutChartReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","ChartDonut","ChartThemeColor","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/charts/donut-chart/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\nconst pageData = {\n  \"id\": \"Donut chart\",\n  \"section\": \"charts\",\n  \"source\": \"react\",\n  \"slug\": \"/charts/donut-chart/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-charts/src/components/ChartDonut/examples/ChartDonut.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"ChartDonut\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"allowTooltip\",\n          \"type\": \"boolean\",\n          \"description\": \"Specifies the tooltip capability of the container component. A value of true allows the chart to add a\\nChartTooltip component to the labelComponent property. This is a shortcut to display tooltips when the labels\\nproperty is also provided.\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"animate\",\n          \"type\": \"boolean | object\",\n          \"description\": \"The animate prop specifies props for VictoryAnimation to use.\\nThe animate prop should also be used to specify enter and exit\\ntransition configurations with the `onExit` and `onEnter` namespaces respectively.\\n\\n\\n@example {duration: 500, onExit: () => {}, onEnter: {duration: 500, before: () => ({y: 0})})}\"\n        },\n        {\n          \"name\": \"ariaDesc\",\n          \"type\": \"string\",\n          \"description\": \"The ariaDesc prop specifies the description of the chart/SVG to assist with\\naccessibility for screen readers.\\n\\nNote: Overridden by the desc prop of containerComponent\"\n        },\n        {\n          \"name\": \"ariaTitle\",\n          \"type\": \"string\",\n          \"description\": \"The ariaTitle prop specifies the title to be applied to the SVG to assist\\naccessibility for screen readers.\\n\\nNote: Overridden by the title prop of containerComponent\"\n        },\n        {\n          \"name\": \"capHeight\",\n          \"type\": \"number | string | Function\",\n          \"description\": \"The capHeight prop defines a text metric for the font being used: the expected height of capital letters.\\nThis is necessary because of SVG, which (a) positions the *bottom* of the text at `y`, and (b) has no notion of\\nline height. The value should ideally use the same units as `lineHeight` and `dy`, preferably ems. If given a\\nunitless number, it is assumed to be ems.\",\n          \"defaultValue\": \"1.1\"\n        },\n        {\n          \"name\": \"categories\",\n          \"type\": \"string[] | { x: string[], y: string[] }\",\n          \"description\": \"The categories prop specifies how categorical data for a chart should be ordered.\\nThis prop should be given as an array of string values, or an object with\\nthese arrays of values specified for x and y. If this prop is not set,\\ncategorical data will be plotted in the order it was given in the data array\\n\\n\\n@example [\\\"dogs\\\", \\\"cats\\\", \\\"mice\\\"]\"\n        },\n        {\n          \"name\": \"colorScale\",\n          \"type\": \"string[]\",\n          \"description\": \"The colorScale prop is an optional prop that defines the color scale the pie\\nwill be created on. This prop should be given as an array of CSS colors, or as a string\\ncorresponding to one of the built in color scales. ChartDonut will automatically assign\\nvalues from this color scale to the pie slices unless colors are explicitly provided in the\\ndata object\"\n        },\n        {\n          \"name\": \"constrainToVisibleArea\",\n          \"type\": \"boolean\",\n          \"description\": \"The constrainToVisibleArea prop determines whether to coerce tooltips so that they fit within the visible area of\\nthe chart. When this prop is set to true, tooltip pointers will still point to the correct data point, but the\\ncenter of the tooltip will be shifted to fit within the overall width and height of the svg Victory renders.\"\n        },\n        {\n          \"name\": \"containerComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The containerComponent prop takes an entire component which will be used to\\ncreate a container element for standalone charts.\\nThe new element created from the passed containerComponent wil be provided with\\nthese props from ChartDonut: height, width, children\\n(the chart itself) and style. Props that are not provided by the\\nchild chart component include title and desc, both of which\\nare intended to add accessibility to Victory components. The more descriptive these props\\nare, the more accessible your data will be for people using screen readers.\\nAny of these props may be overridden by passing in props to the supplied component,\\nor modified or ignored within the custom component itself. If a dataComponent is\\nnot provided, ChartDonut will use the default ChartContainer component.\\n\\n@example <ChartContainer title=\\\"Chart of Dog Breeds\\\" desc=\\\"This chart shows ...\\\" />\",\n          \"defaultValue\": \"<ChartContainer />\"\n        },\n        {\n          \"name\": \"cornerRadius\",\n          \"type\": \"number | Function\",\n          \"description\": \"Set the cornerRadius for every dataComponent (Slice by default) within ChartDonut\"\n        },\n        {\n          \"name\": \"data\",\n          \"type\": \"any[]\",\n          \"description\": \"The data prop specifies the data to be plotted,\\nwhere data X-value is the slice label (string or number),\\nand Y-value is the corresponding number value represented by the slice\\nData should be in the form of an array of data points.\\nEach data point may be any format you wish (depending on the `x` and `y` accessor props),\\nbut by default, an object with x and y properties is expected.\\n\\n@example\\n\\n[{x: 1, y: 2}, {x: 2, y: 3}], [[1, 2], [2, 3]],\\n[[{x: \\\"a\\\", y: 1}, {x: \\\"b\\\", y: 2}], [{x: \\\"a\\\", y: 2}, {x: \\\"b\\\", y: 3}]]\"\n        },\n        {\n          \"name\": \"dataComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The dataComponent prop takes an entire, HTML-complete data component which will be used to\\ncreate slices for each datum in the pie chart. The new element created from the passed\\ndataComponent will have the property datum set by the pie chart for the point it renders;\\nproperties style and pathFunction calculated by ChartDonut; an index property set\\ncorresponding to the location of the datum in the data provided to the pie; events bound to\\nthe ChartDonut; and the d3 compatible slice object.\\nIf a dataComponent is not provided, ChartDonut's Slice component will be used.\"\n        },\n        {\n          \"name\": \"endAngle\",\n          \"type\": \"number\",\n          \"description\": \"The overall end angle of the pie in degrees. This prop is used in conjunction with\\nstartAngle to create a pie that spans only a segment of a circle.\"\n        },\n        {\n          \"name\": \"eventKey\",\n          \"type\": \"number | string | Function\",\n          \"description\": \"Similar to data accessor props `x` and `y`, this prop may be used to functionally\\nassign eventKeys to data\"\n        },\n        {\n          \"name\": \"events\",\n          \"type\": \"object[]\",\n          \"description\": \"The event prop takes an array of event objects. Event objects are composed of\\na target, an eventKey, and eventHandlers. Targets may be any valid style namespace\\nfor a given component, so \\\"data\\\" and \\\"labels\\\" are all valid targets for ChartDonut\\nevents. The eventKey may optionally be used to select a single element by index rather than\\nan entire set. The eventHandlers object should be given as an object whose keys are standard\\nevent names (i.e. onClick) and whose values are event callbacks. The return value\\nof an event handler is used to modify elemnts. The return value should be given\\nas an object or an array of objects with optional target and eventKey keys,\\nand a mutation key whose value is a function. The target and eventKey keys\\nwill default to those corresponding to the element the event handler was attached to.\\nThe mutation function will be called with the calculated props for the individual selected\\nelement (i.e. a single bar), and the object returned from the mutation function\\nwill override the props of the selected element via object assignment.\\n\\n\\n@example\\nevents={[\\n  {\\n    target: \\\"data\\\",\\n    eventKey: 1,\\n    eventHandlers: {\\n      onClick: () => {\\n        return [\\n           {\\n             eventKey: 2,\\n             mutation: (props) => {\\n               return {style: merge({}, props.style, {fill: \\\"orange\\\"})};\\n             }\\n           }, {\\n             eventKey: 2,\\n             target: \\\"labels\\\",\\n             mutation: () => {\\n               return {text: \\\"hey\\\"};\\n             }\\n           }\\n         ];\\n      }\\n    }\\n  }\\n]}\"\n        },\n        {\n          \"name\": \"externalEventMutations\",\n          \"type\": \"object[]\",\n          \"description\": \"ChartDonut uses the standard externalEventMutations prop.\"\n        },\n        {\n          \"name\": \"groupComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The groupComponent prop takes an entire component which will be used to\\ncreate group elements for use within container elements. This prop defaults\\nto a <g> tag on web, and a react-native-svg <G> tag on mobile\"\n        },\n        {\n          \"name\": \"height\",\n          \"type\": \"number\",\n          \"description\": \"Specifies the height the svg viewBox of the chart container. This value should be given as a\\nnumber of pixels.\\n\\nBecause Victory renders responsive containers, the width and height props do not determine the width and\\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\\npixels will depend on the size of the container the chart is rendered into.\\n\\nNote: When adding a legend, height (the overall SVG height) may need to be larger than donutHeight (the donut size)\\nin order to accommodate the extra legend.\\n\\nBy default, donutHeight is the min. of either height or width. This covers most use cases in order to accommodate\\nlegends within the same SVG. However, donutHeight (not height) may need to be set in order to adjust the donut height.\\n\\nTypically, the parent container is set to the same width in order to maintain the aspect ratio.\",\n          \"defaultValue\": \"theme.pie.height\"\n        },\n        {\n          \"name\": \"innerRadius\",\n          \"type\": \"number | Function\",\n          \"description\": \"When creating a donut chart, this prop determines the number of pixels between\\nthe center of the chart and the inner edge.\"\n        },\n        {\n          \"name\": \"labelComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The labelComponent prop takes in an entire label component which will be used\\nto create a label for the area. The new element created from the passed labelComponent\\nwill be supplied with the following properties: x, y, index, data, verticalAnchor,\\ntextAnchor, angle, style, text, and events. any of these props may be overridden\\nby passing in props to the supplied component, or modified or ignored within\\nthe custom component itself. If labelComponent is omitted, a new ChartLabel\\nwill be created with props described above. This labelComponent prop should be used to\\nprovide a series label for ChartDonut. If individual labels are required for each\\ndata point, they should be created by composing ChartDonut with VictoryScatter\"\n        },\n        {\n          \"name\": \"labelPosition\",\n          \"type\": \"string | Function\",\n          \"description\": \"The labelPosition prop specifies the angular position of each label relative to its corresponding slice.\\nWhen this prop is not given, the label will be positioned at the centroid of each slice.\"\n        },\n        {\n          \"name\": \"labelRadius\",\n          \"type\": \"number | Function\",\n          \"description\": \"The labelRadius prop defines the radius of the arc that will be used for positioning each slice label.\\nIf this prop is not set, the label radius will default to the radius of the pie + label padding.\"\n        },\n        {\n          \"name\": \"labels\",\n          \"type\": \"string[] | number[] | ((data: any) => string | number | null)\",\n          \"description\": \"The labels prop defines labels that will appear above each bar in your chart.\\nThis prop should be given as an array of values or as a function of data.\\nIf given as an array, the number of elements in the array should be equal to\\nthe length of the data array. Labels may also be added directly to the data object\\nlike data={[{x: 1, y: 1, label: \\\"first\\\"}]}.\\n\\n@example [\\\"spring\\\", \\\"summer\\\", \\\"fall\\\", \\\"winter\\\"], (datum) => datum.title\"\n        },\n        {\n          \"name\": \"legendAllowWrap\",\n          \"type\": \"boolean\",\n          \"description\": \"Allows legend items to wrap. A value of true allows the legend to wrap onto the next line\\nif its container is not wide enough.\\n\\nNote: This is overridden by the legendItemsPerRow property\"\n        },\n        {\n          \"name\": \"legendComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The legend component to render with chart.\\n\\nNote: Use legendData so the legend width can be calculated and positioned properly.\\nDefault legend properties may be applied\"\n        },\n        {\n          \"name\": \"legendData\",\n          \"type\": \"{\\n  name?: string;\\n  symbol?: {\\n    fill?: string;\\n    type?: string;\\n  };\\n}[]\",\n          \"description\": \"Specify data via the data prop. ChartLegend expects data as an\\narray of objects with name (required), symbol, and labels properties.\\nThe data prop must be given as an array.\\n\\n@example legendData={[{ name: `GBps capacity - 45%` }, { name: 'Unused' }]}\"\n        },\n        {\n          \"name\": \"legendOrientation\",\n          \"type\": \"'horizontal' | 'vertical'\",\n          \"description\": \"The orientation prop takes a string that defines whether legend data\\nare displayed in a row or column. When orientation is \\\"horizontal\\\",\\nlegend items will be displayed in a single row. When orientation is\\n\\\"vertical\\\", legend items will be displayed in a single column. Line\\nand text-wrapping is not currently supported, so \\\"vertical\\\"\\norientation is both the default setting and recommended for\\ndisplaying many series of data.\"\n        },\n        {\n          \"name\": \"legendPosition\",\n          \"type\": \"'bottom' | 'right'\",\n          \"description\": \"The legend position relation to the donut chart. Valid values are 'bottom' and 'right'\\n\\nNote: When adding a legend, padding may need to be adjusted in order to accommodate the extra legend. In some\\ncases, the legend may not be visible until enough padding is applied.\",\n          \"defaultValue\": \"ChartCommonStyles.legend.position\"\n        },\n        {\n          \"name\": \"name\",\n          \"type\": \"string\",\n          \"description\": \"The name prop is used to reference a component instance when defining shared events.\"\n        },\n        {\n          \"name\": \"origin\",\n          \"type\": \"{ x: number, y: number }\",\n          \"description\": \"Victory components will pass an origin prop is to define the center point in svg coordinates for polar charts.\\n\\nNote: It will not typically be necessary to set an origin prop manually\"\n        },\n        {\n          \"name\": \"padAngle\",\n          \"type\": \"number | Function\",\n          \"description\": \"The padAngle prop determines the amount of separation between adjacent data slices\\nin number of degrees\"\n        },\n        {\n          \"name\": \"padding\",\n          \"type\": \"number | { top: number, bottom: number, left: number, right: number }\",\n          \"description\": \"The padding props specifies the amount of padding in number of pixels between\\nthe edge of the chart and any rendered child components. This prop can be given\\nas a number or as an object with padding specified for top, bottom, left\\nand right.\"\n        },\n        {\n          \"name\": \"radius\",\n          \"type\": \"number | Function\",\n          \"description\": \"Specifies the radius of the chart. If this property is not provided it is computed\\nfrom width, height, and padding props\"\n        },\n        {\n          \"name\": \"sortKey\",\n          \"type\": \"number | string | Function | string[]\",\n          \"description\": \"Use the sortKey prop to indicate how data should be sorted. This prop\\nis given directly to the lodash sortBy function to be executed on the\\nfinal dataset.\"\n        },\n        {\n          \"name\": \"sortOrder\",\n          \"type\": \"string\",\n          \"description\": \"The sortOrder prop specifies whether sorted data should be returned in 'ascending' or 'descending' order.\"\n        },\n        {\n          \"name\": \"standalone\",\n          \"type\": \"boolean\",\n          \"description\": \"The standalone prop determines whether the component will render a standalone svg\\nor a <g> tag that will be included in an external svg. Set standalone to false to\\ncompose ChartDonut with other components within an enclosing <svg> tag.\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"startAngle\",\n          \"type\": \"number\",\n          \"description\": \"The overall start angle of the pie in degrees. This prop is used in conjunction with\\nendAngle to create a pie that spans only a segment of a circle.\"\n        },\n        {\n          \"name\": \"style\",\n          \"type\": \"{ parent: object, data: object, labels: object }\",\n          \"description\": \"The style prop specifies styles for your pie. ChartDonut relies on Radium,\\nso valid Radium style objects should work for this prop. Height, width, and\\npadding should be specified via the height, width, and padding props.\\n\\n\\n@example {data: {stroke: \\\"black\\\"}, label: {fontSize: 10}}\"\n        },\n        {\n          \"name\": \"subTitle\",\n          \"type\": \"string\",\n          \"description\": \"The subtitle for the donut chart\"\n        },\n        {\n          \"name\": \"subTitleComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The label component to render the chart subTitle.\\n\\nWhen overriding the subTitleComponent prop, title and subTitle will be centered independently. You may choose to\\nuse the x and y props of ChartLabel to adjust the center position. For example:\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\nsubTitleComponent={<ChartLabel y={130} />}\\ntitle={100}\\ntitleComponent={<ChartLabel y={107} />}\\n</pre>\\n\\nNote: Default label properties may be applied\"\n        },\n        {\n          \"name\": \"subTitlePosition\",\n          \"type\": \"'bottom' | 'center' | 'right'\",\n          \"description\": \"The orientation of the subtitle position. Valid values are 'bottom', 'center', and 'right'\",\n          \"defaultValue\": \"ChartDonutStyles.label.subTitlePosition\"\n        },\n        {\n          \"name\": \"theme\",\n          \"type\": \"object\",\n          \"description\": \"The theme prop takes a style object with nested data, labels, and parent objects.\\nYou can create this object yourself, or you can use a theme provided by\\nWhen using ChartDonut as a solo component, implement the theme directly on\\nChartDonut. If you are wrapping ChartDonut in ChartChart or ChartGroup,\\nplease call the theme on the outermost wrapper component instead.\",\n          \"defaultValue\": \"getDonutTheme(themeColor)\"\n        },\n        {\n          \"name\": \"themeColor\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the theme color. Valid values are 'blue', 'green', 'multi', etc.\\n\\nNote: Not compatible with theme prop\\n\\n@example themeColor={ChartThemeColor.blue}\"\n        },\n        {\n          \"name\": \"themeVariant\",\n          \"type\": \"string\",\n          \"description\": \"Specifies the theme variant. Valid values are 'dark' or 'light'\\n\\nNote: Not compatible with theme prop\\n\\n Use PatternFly's pf-theme-dark CSS selector\",\n          \"deprecated\": true\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string\",\n          \"description\": \"The title for the donut chart\"\n        },\n        {\n          \"name\": \"titleComponent\",\n          \"type\": \"React.ReactElement<any>\",\n          \"description\": \"The label component to render the chart title.\\n\\nWhen centering both title and subTitle props, it's possible to override both styles via an array provided to\\nChartLabel. The first item in the array is associated with title styles, while the second item in the array is\\nassociated with subtitle styles.\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\ntitle={100}\\ntitleComponent={\\n  <ChartLabel style={[{\\n      fill: 'red', // title color\\n      fontSize: 24\\n    }, {\\n      fill: 'blue', // subtitle color\\n      fontSize: 14\\n    }]}\\n  />\\n}\\n</pre>\\n\\nIn this case, both title and subTitle will be centered together. However, should you also override the\\nsubTitleComponent prop, title and subTitle will be centered independently. You may choose to\\nuse the x and y props of ChartLabel to adjust the center position. For example:\\n\\n<pre>\\nsubTitle=\\\"Pets\\\"\\nsubTitleComponent={<ChartLabel y={130} />}\\ntitle={100}\\ntitleComponent={<ChartLabel y={107} />}\\n</pre>\\n\\nNote: Default label properties may be applied\",\n          \"defaultValue\": \"<ChartLabel />\"\n        },\n        {\n          \"name\": \"width\",\n          \"type\": \"number\",\n          \"description\": \"Specifies the width of the svg viewBox of the chart container. This value should be given as a number of pixels.\\n\\nBecause Victory renders responsive containers, the width and height props do not determine the width and\\nheight of the chart in number of pixels, but instead define an aspect ratio for the chart. The exact number of\\npixels will depend on the size of the container the chart is rendered into. Typically, the parent container is set\\nto the same width in order to maintain the aspect ratio.\",\n          \"defaultValue\": \"theme.pie.width\"\n        },\n        {\n          \"name\": \"x\",\n          \"type\": \"number | string | Function | string[]\",\n          \"description\": \"The x prop specifies how to access the X value of each data point.\\nIf given as a function, it will be run on each data point, and returned value will be used.\\nIf given as an integer, it will be used as an array index for array-type data points.\\nIf given as a string, it will be used as a property key for object-type data points.\\nIf given as an array of strings, or a string containing dots or brackets,\\nit will be used as a nested object property path (for details see Lodash docs for _.get).\\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\\n\\n\\n@example 0, 'x', 'x.value.nested.1.thing', 'x[2].also.nested', null, d => Math.sin(d)\"\n        },\n        {\n          \"name\": \"y\",\n          \"type\": \"number | string | Function | string[]\",\n          \"description\": \"The y prop specifies how to access the Y value of each data point.\\nIf given as a function, it will be run on each data point, and returned value will be used.\\nIf given as an integer, it will be used as an array index for array-type data points.\\nIf given as a string, it will be used as a property key for object-type data points.\\nIf given as an array of strings, or a string containing dots or brackets,\\nit will be used as a nested object property path (for details see Lodash docs for _.get).\\nIf `null` or `undefined`, the data value will be used as is (identity function/pass-through).\\n\\n\\n@example 0, 'y', 'y.value.nested.1.thing', 'y[2].also.nested', null, d => Math.sin(d)\"\n        }\n      ]\n    }\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Right aligned legend\",\n    \"Multi-color (ordered) with right aligned legend\",\n    \"Bottom aligned legend\",\n    \"Small\",\n    \"Small with right aligned legend\",\n    \"Small with bottom aligned subtitle\",\n    \"Small with right aligned subtitle\"\n  ]\n};\npageData.liveContext = {\n  ChartDonut,\n  ChartThemeColor\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst Basic = () => (\\n  <div style={{ height: '230px', width: '230px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n    />\\n  </div>\\n)\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Right aligned legend': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst RightAlignedLegend = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={350}\\n    />\\n  </div>\\n)\",\"title\":\"Right aligned legend\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Multi-color (ordered) with right aligned legend': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut, ChartThemeColor } from '@patternfly/react-charts';\\n\\nconst MulticolororderedWithRightAlignedLegend = () => (\\n  <div style={{ height: '230px', width: '350px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 140, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      themeColor={ChartThemeColor.multiOrdered}\\n      width={350}\\n    />\\n  </div>\\n)\",\"title\":\"Multi-color (ordered) with right aligned legend\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Bottom aligned legend': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst BottomAlignedLegend = () => (\\n  <div style={{ height: '275px', width: '300px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      donutOrientation=\\\"top\\\"\\n      height={275}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendPosition=\\\"bottom\\\"\\n      legendWidth={225}\\n      padding={{\\n        bottom: 65, // Adjusted to accommodate legend\\n        left: 20,\\n        right: 20,\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={300}\\n    />\\n  </div>\\n)\",\"title\":\"Bottom aligned legend\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Small': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst Small = () => (\\n  <div style={{ height: '150px', width: '150px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={150}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={150}\\n    />\\n  </div>\\n)\",\"title\":\"Small\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Small with right aligned legend': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithRightAlignedLegend = () => (\\n  <div style={{ height: '150px', width: '275px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={150}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 20,\\n        left: 20,\\n        right: 145, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      title=\\\"100\\\"\\n      width={275}\\n    />\\n  </div>\\n)\",\"title\":\"Small with right aligned legend\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Small with bottom aligned subtitle': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithBottomAlignedSubtitle = () => (\\n  <div style={{ height: '165px', width: '275px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={165}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendOrientation=\\\"vertical\\\"\\n      legendPosition=\\\"right\\\"\\n      padding={{\\n        bottom: 25, // Adjusted to accommodate subTitle\\n        left: 20,\\n        right: 145, // Adjusted to accommodate legend\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      subTitlePosition=\\\"bottom\\\"\\n      title=\\\"100\\\"\\n      width={275}\\n    />\\n  </div>\\n)\",\"title\":\"Small with bottom aligned subtitle\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Small with right aligned subtitle': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ChartDonut } from '@patternfly/react-charts';\\n\\nconst SmallWithRightAlignedSubtitle = () => (\\n  <div style={{ height: '200px', width: '300px' }}>\\n    <ChartDonut\\n      ariaDesc=\\\"Average number of pets\\\"\\n      ariaTitle=\\\"Donut chart example\\\"\\n      constrainToVisibleArea={true}\\n      data={[{ x: 'Cats', y: 35 }, { x: 'Dogs', y: 55 }, { x: 'Birds', y: 10 }]}\\n      height={200}\\n      labels={({ datum }) => `${datum.x}: ${datum.y}%`}\\n      legendData={[{ name: 'Cats: 35' }, { name: 'Dogs: 55' }, { name: 'Birds: 10' }]}\\n      legendPosition=\\\"bottom\\\"\\n      padding={{\\n        bottom: 70, // Adjusted to accommodate legend\\n        left: 20,\\n        right: 50, // Adjusted to accommodate subTitle\\n        top: 20\\n      }}\\n      subTitle=\\\"Pets\\\"\\n      subTitlePosition=\\\"right\\\"\\n      title=\\\"100\\\"\\n      width={300}\\n    />\\n  </div>\\n)\",\"title\":\"Small with right aligned subtitle\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"introduction\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Introduction`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Note: PatternFly React charts live in its own package at `}\n      <PatternflyThemeLink {...{\"to\":\"https://www.npmjs.com/package/@patternfly/react-charts\"}}>\n        {`@patternfly/react-charts`}\n      </PatternflyThemeLink>\n      {`!`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`PatternFly React charts are based on the `}\n      <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/victory-chart/\"}}>\n        {`Victory`}\n      </PatternflyThemeLink>\n      {` chart library, along with additional functionality, custom components, and theming for PatternFly. This provides a collection of React based components you can use to build PatternFly patterns with consistent markup, styling, and behavior.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Learn to build a donut chart using a Katacoda tutorial starting with a simple chart, adding thresholds, tooltips, a legend, and concluding by changing the theme color. You'll learn how to use React chart components together to build a consistent user experience.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      <PatternflyThemeLink {...{\"to\":\"https://katacoda.com/patternfly/courses/react-charts/donut-chart\"}}>\n        {`Start course`}\n      </PatternflyThemeLink>\n    </p>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Right aligned legend\"])}\n    {React.createElement(pageData.examples[\"Multi-color (ordered) with right aligned legend\"])}\n    {React.createElement(pageData.examples[\"Bottom aligned legend\"])}\n    {React.createElement(pageData.examples[\"Small\"])}\n    {React.createElement(pageData.examples[\"Small with right aligned legend\"])}\n    {React.createElement(pageData.examples[\"Small with bottom aligned subtitle\"])}\n    {React.createElement(pageData.examples[\"Small with right aligned subtitle\"])}\n    <AutoLinkHeader {...{\"id\":\"documentation\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Documentation`}\n    </AutoLinkHeader>\n    <AutoLinkHeader {...{\"id\":\"tips\",\"size\":\"h3\",\"className\":\"ws-title ws-h3\"}}>\n      {`Tips`}\n    </AutoLinkHeader>\n    <ul {...{\"className\":\"ws-ul\"}}>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`See Victory's `}\n        <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/faq\"}}>\n          {`FAQ`}\n        </PatternflyThemeLink>\n      </li>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`For single data points or zero values, you may want to set the `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`domain`}\n        </code>\n        {` prop`}\n      </li>\n      <li {...{\"className\":\"ws-li\"}}>\n        <code {...{\"className\":\"ws-code\"}}>\n          {`ChartLegend`}\n        </code>\n        {` may be used as a standalone component, instead of using `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`legendData`}\n        </code>\n      </li>\n    </ul>\n    <AutoLinkHeader {...{\"id\":\"note\",\"size\":\"h3\",\"className\":\"ws-title ws-h3\"}}>\n      {`Note`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Currently, the generated documention below is not able to resolve type definitions from Victory imports. For the\ncomponents used in the examples above, Victory pass-thru props are also documented here:`}\n    </p>\n    <ul {...{\"className\":\"ws-ul\"}}>\n      <li {...{\"className\":\"ws-li\"}}>\n        {`For `}\n        <code {...{\"className\":\"ws-code\"}}>\n          {`ChartDonut`}\n        </code>\n        {` props, see `}\n        <PatternflyThemeLink {...{\"to\":\"https://formidable.com/open-source/victory/docs/victory-pie\"}}>\n          {`VictoryPie`}\n        </PatternflyThemeLink>\n      </li>\n    </ul>\n  </React.Fragment>\n);\nComponent.displayName = 'ChartsDonutChartReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}