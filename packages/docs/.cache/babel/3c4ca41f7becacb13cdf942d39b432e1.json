{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport DashboardWrapper from '../../../../node_modules/@patternfly/react-core/src/demos/Card/../examples/DashboardWrapper';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport TrashIcon from '@patternfly/react-icons/dist/esm/icons/trash-icon';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport pfIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./pf-logo-small.svg';\nimport activeMQIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./activemq-core_200x150.png';\nimport avroIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-avro_200x150.png';\nimport dropBoxIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-dropbox_200x150.png';\nimport infinispanIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-infinispan_200x150.png';\nimport saxonIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-saxon_200x150.png';\nimport sparkIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-spark_200x150.png';\nimport swaggerIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-swagger-java_200x150.png';\nimport azureIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./FuseConnector_Icons_AzureServices.png';\nimport restIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./FuseConnector_Icons_REST.png';\nimport srcImportcardview from './react-demos/card-view.png';\nvar pageData = {\n  \"id\": \"Card view\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/card-view/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Card/Card.md\",\n  \"fullscreenExamples\": [\"Card view\"]\n};\npageData.liveContext = {\n  DashboardWrapper: DashboardWrapper,\n  FilterIcon: FilterIcon,\n  TrashIcon: TrashIcon,\n  PlusCircleIcon: PlusCircleIcon,\n  pfIcon: pfIcon,\n  activeMQIcon: activeMQIcon,\n  avroIcon: avroIcon,\n  dropBoxIcon: dropBoxIcon,\n  infinispanIcon: infinispanIcon,\n  saxonIcon: saxonIcon,\n  sparkIcon: sparkIcon,\n  swaggerIcon: swaggerIcon,\n  azureIcon: azureIcon,\n  restIcon: restIcon\n};\npageData.examples = {\n  'Card view': function CardView(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      thumbnail: srcImportcardview,\n      \"code\": \"import React from 'react';\\nimport {\\n  Bullseye,\\n  Button,\\n  Card,\\n  CardHeader,\\n  CardActions,\\n  CardTitle,\\n  CardBody,\\n  Checkbox,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownToggleCheckbox,\\n  EmptyState,\\n  EmptyStateIcon,\\n  EmptyStateVariant,\\n  EmptyStateSecondaryActions,\\n  Gallery,\\n  KebabToggle,\\n  OverflowMenu,\\n  OverflowMenuControl,\\n  OverflowMenuDropdownItem,\\n  OverflowMenuItem,\\n  PageSection,\\n  PageSectionVariants,\\n  Pagination,\\n  Select,\\n  SelectOption,\\n  SelectVariant,\\n  TextContent,\\n  Text,\\n  Title,\\n  Toolbar,\\n  ToolbarItem,\\n  ToolbarFilter,\\n  ToolbarContent\\n} from '@patternfly/react-core';\\nimport DashboardWrapper from '../examples/DashboardWrapper';\\n\\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\\nimport TrashIcon from '@patternfly/react-icons/dist/esm/icons/trash-icon';\\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\\nimport pfIcon from './pf-logo-small.svg';\\nimport activeMQIcon from './activemq-core_200x150.png';\\nimport avroIcon from './camel-avro_200x150.png';\\nimport dropBoxIcon from './camel-dropbox_200x150.png';\\nimport infinispanIcon from './camel-infinispan_200x150.png';\\nimport saxonIcon from './camel-saxon_200x150.png';\\nimport sparkIcon from './camel-spark_200x150.png';\\nimport swaggerIcon from './camel-swagger-java_200x150.png';\\nimport azureIcon from './FuseConnector_Icons_AzureServices.png';\\nimport restIcon from './FuseConnector_Icons_REST.png';\\n\\nclass CardViewBasic extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      filters: {\\n        products: []\\n      },\\n      res: [],\\n      isChecked: false,\\n      selectedItems: [],\\n      areAllSelected: false,\\n      isUpperToolbarDropdownOpen: false,\\n      isUpperToolbarKebabDropdownOpen: false,\\n      isLowerToolbarDropdownOpen: false,\\n      isLowerToolbarKebabDropdownOpen: false,\\n      isCardKebabDropdownOpen: false,\\n      activeItem: 0,\\n      splitButtonDropdownIsOpen: false,\\n      page: 1,\\n      perPage: 10,\\n      totalItemCount: 10\\n    };\\n\\n    this.onToolbarDropdownToggle = isLowerToolbarDropdownOpen => {\\n      this.setState(prevState => ({\\n        isLowerToolbarDropdownOpen\\n      }));\\n    };\\n\\n    this.onToolbarKebabDropdownToggle = isLowerToolbarKebabDropdownOpen => {\\n      this.setState({\\n        isLowerToolbarKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onToolbarKebabDropdownSelect = event => {\\n      this.setState({\\n        isLowerToolbarKebabDropdownOpen: !this.state.isLowerToolbarKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onCardKebabDropdownToggle = (key, isCardKebabDropdownOpen) => {\\n      this.setState({\\n        [key]: isCardKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onCardKebabDropdownSelect = (key, event) => {\\n      this.setState({\\n        [key]: !this.state[key]\\n      });\\n    };\\n\\n    this.deleteItem = item => event => {\\n      const filter = getter => val => getter(val) !== item.id;\\n      this.setState({\\n        res: this.state.res.filter(filter(({ id }) => id)),\\n        selectedItems: this.state.selectedItems.filter(filter(id => id))\\n      });\\n    };\\n\\n    this.onSetPage = (_event, pageNumber) => {\\n      this.setState({\\n        page: pageNumber\\n      });\\n    };\\n\\n    this.onPerPageSelect = (_event, perPage) => {\\n      this.setState({\\n        perPage\\n      });\\n    };\\n\\n    this.onSplitButtonToggle = isOpen => {\\n      this.setState({\\n        splitButtonDropdownIsOpen: isOpen\\n      });\\n    };\\n\\n    this.onSplitButtonSelect = event => {\\n      this.setState((prevState, props) => {\\n        return { splitButtonDropdownIsOpen: !prevState.splitButtonDropdownIsOpen };\\n      });\\n    };\\n\\n    this.onNameSelect = (event, selection) => {\\n      const checked = event.target.checked;\\n      this.setState(prevState => {\\n        const prevSelections = prevState.filters['products'];\\n        return {\\n          filters: {\\n            ...prevState.filters,\\n            ['products']: checked ? [...prevSelections, selection] : prevSelections.filter(value => value !== selection)\\n          }\\n        };\\n      });\\n    };\\n\\n    this.onDelete = (type = '', id = '') => {\\n      if (type) {\\n        this.setState(prevState => {\\n          prevState.filters[type.toLowerCase()] = prevState.filters[type.toLowerCase()].filter(s => s !== id);\\n          return {\\n            filters: prevState.filters\\n          };\\n        });\\n      } else {\\n        this.setState({\\n          filters: {\\n            products: []\\n          }\\n        });\\n      }\\n    };\\n\\n    this.onKeyDown = (event, productId) => {\\n      console.log(productId);\\n      if (event.target !== event.currentTarget) {\\n        return;\\n      }\\n      if ([' ', 'Enter'].includes(event.key)) {\\n        event.preventDefault();\\n        this.setState(prevState => {\\n          return prevState.selectedItems.includes(productId * 1)\\n            ? {\\n                selectedItems: [...prevState.selectedItems.filter(id => productId * 1 != id)],\\n                areAllSelected: false\\n              }\\n            : {\\n                selectedItems: [...prevState.selectedItems, productId * 1],\\n                areAllSelected: prevState.totalItemCount === prevState.selectedItems.length + 1\\n              };\\n        });\\n      }\\n    };\\n\\n    this.onClick = productId => {\\n      this.setState(prevState => {\\n        return prevState.selectedItems.includes(productId * 1)\\n          ? {\\n              selectedItems: [...prevState.selectedItems.filter(id => productId * 1 != id)],\\n              areAllSelected: false\\n            }\\n          : {\\n              selectedItems: [...prevState.selectedItems, productId * 1],\\n              areAllSelected: prevState.totalItemCount === prevState.selectedItems.length + 1\\n            };\\n      });\\n    };\\n  }\\n\\n  selectedItems(e) {\\n    const { value, checked } = e.target;\\n    let { selectedItems } = this.state;\\n\\n    if (checked) {\\n      selectedItems = [...selectedItems, value];\\n    } else {\\n      selectedItems = selectedItems.filter(el => el !== value);\\n      if (this.state.areAllSelected) {\\n        this.setState({\\n          areAllSelected: !this.state.areAllSelected\\n        });\\n      }\\n    }\\n    this.setState({ selectedItems });\\n  }\\n\\n  splitCheckboxSelectAll(e) {\\n    const { checked } = e.target;\\n    const { isChecked, res } = this.state;\\n    let collection = [];\\n\\n    if (checked) {\\n      for (var i = 0; i <= 9; i++) collection = [...collection, i];\\n    }\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: isChecked,\\n        areAllSelected: checked\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectPage(e) {\\n    const { checked } = e.target;\\n    const { isChecked, totalItemCount, perPage } = this.state;\\n    let collection = [];\\n\\n    collection = this.getAllItems();\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: checked,\\n        areAllSelected: totalItemCount === perPage ? true : false\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectAll(e) {\\n    const { checked } = e.target;\\n    const { isChecked } = this.state;\\n\\n    let collection = [];\\n    for (var i = 0; i <= 9; i++) collection = [...collection, i];\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: true,\\n        areAllSelected: true\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectNone(e) {\\n    const { checked } = e.target;\\n    const { isChecked, selectedItems } = this.state;\\n    this.setState(\\n      {\\n        selectedItems: [],\\n        isChecked: false,\\n        areAllSelected: false\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  getAllItems() {\\n    const { res } = this.state;\\n    const collection = [];\\n    for (const items of res) {\\n      collection.push(items.id);\\n    }\\n\\n    return collection;\\n  }\\n\\n  updateSelected() {\\n    const { res, selectedItems } = this.state;\\n    let rows = res.map(post => {\\n      post.selected = selectedItems.includes(post.id);\\n      return post;\\n    });\\n\\n    this.setState({\\n      res: rows\\n    });\\n  }\\n\\n  fetch(page, perPage) {\\n    fetch(`https://my-json-server.typicode.com/jenny-s51/cardviewdata/posts?_page=${page}&_limit=${perPage}`)\\n      .then(resp => resp.json())\\n      .then(resp => this.setState({ res: resp, perPage, page }))\\n      .then(() => this.updateSelected())\\n      .catch(err => this.setState({ error: err }));\\n  }\\n\\n  componentDidMount() {\\n    this.fetch(this.state.page, this.state.perPage);\\n  }\\n\\n  renderPagination() {\\n    const { page, perPage, totalItemCount } = this.state;\\n\\n    const defaultPerPageOptions = [\\n      {\\n        title: '1',\\n        value: 1\\n      },\\n      {\\n        title: '5',\\n        value: 5\\n      },\\n      {\\n        title: '10',\\n        value: 10\\n      }\\n    ];\\n\\n    return (\\n      <Pagination\\n        itemCount={totalItemCount}\\n        page={page}\\n        perPage={perPage}\\n        perPageOptions={defaultPerPageOptions}\\n        onSetPage={(_evt, value) => {\\n          this.fetch(value, perPage);\\n        }}\\n        onPerPageSelect={(_evt, value) => {\\n          this.fetch(1, value);\\n        }}\\n        variant=\\\"top\\\"\\n        isCompact\\n      />\\n    );\\n  }\\n\\n  buildSelectDropdown() {\\n    const { splitButtonDropdownIsOpen, selectedItems, areAllSelected } = this.state;\\n    const numSelected = selectedItems.length;\\n    const allSelected = areAllSelected;\\n    const anySelected = numSelected > 0;\\n    const someChecked = anySelected ? null : false;\\n    const isChecked = allSelected ? true : someChecked;\\n    const splitButtonDropdownItems = [\\n      <DropdownItem key=\\\"item-1\\\" onClick={this.selectNone.bind(this)}>\\n        Select none (0 items)\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"item-2\\\" onClick={this.selectPage.bind(this)}>\\n        Select page ({this.state.perPage} items)\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"item-3\\\" onClick={this.selectAll.bind(this)}>\\n        Select all ({this.state.totalItemCount} items)\\n      </DropdownItem>\\n    ];\\n\\n    return (\\n      <Dropdown\\n        position={DropdownPosition.left}\\n        onSelect={this.onSplitButtonSelect}\\n        toggle={\\n          <DropdownToggle\\n            splitButtonItems={[\\n              <DropdownToggleCheckbox\\n                id=\\\"example-checkbox-2\\\"\\n                key=\\\"split-checkbox\\\"\\n                aria-label={anySelected ? 'Deselect all' : 'Select all'}\\n                isChecked={areAllSelected}\\n                onClick={this.splitCheckboxSelectAll.bind(this)}\\n              ></DropdownToggleCheckbox>\\n            ]}\\n            onToggle={this.onSplitButtonToggle}\\n          >\\n            {numSelected !== 0 && <React.Fragment>{numSelected} selected</React.Fragment>}\\n          </DropdownToggle>\\n        }\\n        isOpen={splitButtonDropdownIsOpen}\\n        dropdownItems={splitButtonDropdownItems}\\n      />\\n    );\\n  }\\n\\n  buildFilterDropdown() {\\n    const { isLowerToolbarDropdownOpen, filters } = this.state;\\n\\n    const filterDropdownItems = [\\n      <SelectOption key=\\\"patternfly\\\" value=\\\"PatternFly\\\" />,\\n      <SelectOption key=\\\"activemq\\\" value=\\\"ActiveMQ\\\" />,\\n      <SelectOption key=\\\"apachespark\\\" value=\\\"Apache Spark\\\" />,\\n      <SelectOption key=\\\"avro\\\" value=\\\"Avro\\\" />,\\n      <SelectOption key=\\\"azureservices\\\" value=\\\"Azure Services\\\" />,\\n      <SelectOption key=\\\"crypto\\\" value=\\\"Crypto\\\" />,\\n      <SelectOption key=\\\"dropbox\\\" value=\\\"DropBox\\\" />,\\n      <SelectOption key=\\\"jbossdatagrid\\\" value=\\\"JBoss Data Grid\\\" />,\\n      <SelectOption key=\\\"rest\\\" value=\\\"REST\\\" />,\\n      <SelectOption key=\\\"swagger\\\" value=\\\"SWAGGER\\\" />\\n    ];\\n\\n    return (\\n      <ToolbarFilter categoryName=\\\"Products\\\" chips={filters.products} deleteChip={this.onDelete}>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Products\\\"\\n          onToggle={this.onToolbarDropdownToggle}\\n          onSelect={this.onNameSelect}\\n          selections={filters.products}\\n          isExpanded={isLowerToolbarDropdownOpen}\\n          placeholderText=\\\"Creator\\\"\\n        >\\n          {filterDropdownItems}\\n        </Select>\\n      </ToolbarFilter>\\n    );\\n  }\\n\\n  render() {\\n    const {\\n      isUpperToolbarDropdownOpen,\\n      isLowerToolbarDropdownOpen,\\n      isUpperToolbarKebabDropdownOpen,\\n      isLowerToolbarKebabDropdownOpen,\\n      isCardKebabDropdownOpen,\\n      splitButtonDropdownIsOpen,\\n      activeItem,\\n      filters,\\n      res,\\n      checked,\\n      selectedItems,\\n      areAllSelected,\\n      isChecked,\\n      page,\\n      perPage\\n    } = this.state;\\n\\n    const toolbarKebabDropdownItems = [\\n      <OverflowMenuDropdownItem key=\\\"link\\\">Link</OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </OverflowMenuDropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <OverflowMenuDropdownItem key=\\\"separated link\\\">Separated Link</OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </OverflowMenuDropdownItem>\\n    ];\\n\\n    const toolbarItems = (\\n      <React.Fragment>\\n        <ToolbarItem variant=\\\"bulk-select\\\">{this.buildSelectDropdown()}</ToolbarItem>\\n        <ToolbarItem breakpoint=\\\"xl\\\">{this.buildFilterDropdown()}</ToolbarItem>\\n        <ToolbarItem variant=\\\"overflow-menu\\\">\\n          <OverflowMenu breakpoint=\\\"md\\\">\\n            <OverflowMenuItem>\\n              <Button variant=\\\"primary\\\">Create a project</Button>\\n            </OverflowMenuItem>\\n            <OverflowMenuControl hasAdditionalOptions>\\n              <Dropdown\\n                onSelect={this.onToolbarKebabDropdownSelect}\\n                toggle={<KebabToggle onToggle={this.onToolbarKebabDropdownToggle} id=\\\"toggle-id-6\\\" />}\\n                isOpen={isLowerToolbarKebabDropdownOpen}\\n                isPlain\\n                dropdownItems={toolbarKebabDropdownItems}\\n              />\\n            </OverflowMenuControl>\\n          </OverflowMenu>\\n        </ToolbarItem>\\n        <ToolbarItem variant=\\\"pagination\\\" alignment={{ default: 'alignRight' }}>\\n          {this.renderPagination()}\\n        </ToolbarItem>\\n      </React.Fragment>\\n    );\\n\\n    const filtered =\\n      filters.products.length > 0\\n        ? res.filter(card => {\\n            return filters.products.length === 0 || filters.products.includes(card.name);\\n          })\\n        : res;\\n\\n    const icons = {\\n      pfIcon,\\n      activeMQIcon,\\n      sparkIcon,\\n      avroIcon,\\n      azureIcon,\\n      saxonIcon,\\n      dropBoxIcon,\\n      infinispanIcon,\\n      restIcon,\\n      swaggerIcon\\n    };\\n\\n    return (\\n      <React.Fragment>\\n        <DashboardWrapper mainContainerId=\\\"main-content-card-view-default-nav\\\" breadcrumb={null}>\\n          <PageSection variant={PageSectionVariants.light}>\\n            <TextContent>\\n              <Text component=\\\"h1\\\">Projects</Text>\\n              <Text component=\\\"p\\\">This is a demo that showcases PatternFly cards.</Text>\\n            </TextContent>\\n            <Toolbar id=\\\"toolbar-group-types\\\" clearAllFilters={this.onDelete}>\\n              <ToolbarContent>{toolbarItems}</ToolbarContent>\\n            </Toolbar>\\n          </PageSection>\\n          <PageSection isFilled>\\n            <Gallery hasGutter aria-label=\\\"Selectable card container\\\">\\n              <Card isSelectableRaised isCompact>\\n                <Bullseye>\\n                  <EmptyState variant={EmptyStateVariant.xs}>\\n                    <EmptyStateIcon icon={PlusCircleIcon} />\\n                    <Title headingLevel=\\\"h2\\\" size=\\\"md\\\">\\n                      Add a new card to your page\\n                    </Title>\\n                    <EmptyStateSecondaryActions>\\n                      <Button variant=\\\"link\\\">Add card</Button>\\n                    </EmptyStateSecondaryActions>\\n                  </EmptyState>\\n                </Bullseye>\\n              </Card>\\n              {filtered.map((product, key) => (\\n                <Card\\n                  isSelectableRaised\\n                  hasSelectableInput\\n                  isCompact\\n                  key={product.name}\\n                  id={product.name.replace(/ /g, '-')}\\n                  onKeyDown={e => this.onKeyDown(e, product.id)}\\n                  onClick={() => this.onClick(product.id)}\\n                  onSelectableInputChange={() => this.onClick(product.id)}\\n                  isSelected={selectedItems.includes(product.id)}\\n                >\\n                  <CardHeader>\\n                    <img src={icons[product.icon]} alt={`${product.name} icon`} style={{ maxWidth: '60px' }} />\\n                    <CardActions>\\n                      <Dropdown\\n                        isPlain\\n                        position=\\\"right\\\"\\n                        onSelect={e => this.onCardKebabDropdownSelect(key, e)}\\n                        toggle={\\n                          <KebabToggle\\n                            onToggle={isCardKebabDropdownOpen =>\\n                              this.onCardKebabDropdownToggle(key, isCardKebabDropdownOpen)\\n                            }\\n                          />\\n                        }\\n                        isOpen={this.state[key]}\\n                        dropdownItems={[\\n                          <DropdownItem key=\\\"trash\\\" onClick={this.deleteItem(product)} position=\\\"right\\\">\\n                            <TrashIcon />\\n                            Delete\\n                          </DropdownItem>\\n                        ]}\\n                      />\\n                      <Checkbox\\n                        checked={isChecked}\\n                        value={product.id}\\n                        isChecked={selectedItems.includes(product.id)}\\n                        aria-label=\\\"card checkbox example\\\"\\n                        id={`check-${product.id}`}\\n                      />\\n                    </CardActions>\\n                  </CardHeader>\\n                  <CardTitle>{product.name}</CardTitle>\\n                  <CardBody>{product.description}</CardBody>\\n                </Card>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n          <PageSection isFilled={false} sticky=\\\"bottom\\\" padding={{ default: 'noPadding' }} variant=\\\"light\\\">\\n            <Pagination\\n              itemCount={this.state.totalItemCount}\\n              page={page}\\n              page={this.state.page}\\n              perPage={this.state.perPage}\\n              onPerPageSelect={this.onPerPageSelect}\\n              onSetPage={this.onSetPage}\\n              variant=\\\"bottom\\\"\\n            />\\n          </PageSection>\\n        </DashboardWrapper>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Card view\",\n      \"lang\": \"js\",\n      \"isFullscreen\": true\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"This demonstrates how you can assemble a full page view that contains a grid of equal sized cards that includes a toolbar for managing card grid contents.\"), React.createElement(pageData.examples[\"Card view\"]));\n};\n\nComponent.displayName = 'DemosCardViewReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","DashboardWrapper","FilterIcon","TrashIcon","PlusCircleIcon","pfIcon","activeMQIcon","avroIcon","dropBoxIcon","infinispanIcon","saxonIcon","sparkIcon","swaggerIcon","azureIcon","restIcon","srcImportcardview","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/demos/card-view/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport DashboardWrapper from '../../../../node_modules/@patternfly/react-core/src/demos/Card/../examples/DashboardWrapper';\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\nimport TrashIcon from '@patternfly/react-icons/dist/esm/icons/trash-icon';\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\nimport pfIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./pf-logo-small.svg';\nimport activeMQIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./activemq-core_200x150.png';\nimport avroIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-avro_200x150.png';\nimport dropBoxIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-dropbox_200x150.png';\nimport infinispanIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-infinispan_200x150.png';\nimport saxonIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-saxon_200x150.png';\nimport sparkIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-spark_200x150.png';\nimport swaggerIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./camel-swagger-java_200x150.png';\nimport azureIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./FuseConnector_Icons_AzureServices.png';\nimport restIcon from '../../../../node_modules/@patternfly/react-core/src/demos/Card/./FuseConnector_Icons_REST.png';\nimport srcImportcardview from './react-demos/card-view.png';\nconst pageData = {\n  \"id\": \"Card view\",\n  \"section\": \"demos\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/demos/card-view/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Card/Card.md\",\n  \"fullscreenExamples\": [\n    \"Card view\"\n  ]\n};\npageData.liveContext = {\n  DashboardWrapper,\n  FilterIcon,\n  TrashIcon,\n  PlusCircleIcon,\n  pfIcon,\n  activeMQIcon,\n  avroIcon,\n  dropBoxIcon,\n  infinispanIcon,\n  saxonIcon,\n  sparkIcon,\n  swaggerIcon,\n  azureIcon,\n  restIcon\n};\npageData.examples = {\n  'Card view': props => \n    <Example {...pageData} {...props} thumbnail={srcImportcardview} {...{\"code\":\"import React from 'react';\\nimport {\\n  Bullseye,\\n  Button,\\n  Card,\\n  CardHeader,\\n  CardActions,\\n  CardTitle,\\n  CardBody,\\n  Checkbox,\\n  Dropdown,\\n  DropdownToggle,\\n  DropdownItem,\\n  DropdownSeparator,\\n  DropdownPosition,\\n  DropdownToggleCheckbox,\\n  EmptyState,\\n  EmptyStateIcon,\\n  EmptyStateVariant,\\n  EmptyStateSecondaryActions,\\n  Gallery,\\n  KebabToggle,\\n  OverflowMenu,\\n  OverflowMenuControl,\\n  OverflowMenuDropdownItem,\\n  OverflowMenuItem,\\n  PageSection,\\n  PageSectionVariants,\\n  Pagination,\\n  Select,\\n  SelectOption,\\n  SelectVariant,\\n  TextContent,\\n  Text,\\n  Title,\\n  Toolbar,\\n  ToolbarItem,\\n  ToolbarFilter,\\n  ToolbarContent\\n} from '@patternfly/react-core';\\nimport DashboardWrapper from '../examples/DashboardWrapper';\\n\\nimport FilterIcon from '@patternfly/react-icons/dist/esm/icons/filter-icon';\\nimport TrashIcon from '@patternfly/react-icons/dist/esm/icons/trash-icon';\\nimport PlusCircleIcon from '@patternfly/react-icons/dist/esm/icons/plus-circle-icon';\\nimport pfIcon from './pf-logo-small.svg';\\nimport activeMQIcon from './activemq-core_200x150.png';\\nimport avroIcon from './camel-avro_200x150.png';\\nimport dropBoxIcon from './camel-dropbox_200x150.png';\\nimport infinispanIcon from './camel-infinispan_200x150.png';\\nimport saxonIcon from './camel-saxon_200x150.png';\\nimport sparkIcon from './camel-spark_200x150.png';\\nimport swaggerIcon from './camel-swagger-java_200x150.png';\\nimport azureIcon from './FuseConnector_Icons_AzureServices.png';\\nimport restIcon from './FuseConnector_Icons_REST.png';\\n\\nclass CardViewBasic extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.state = {\\n      filters: {\\n        products: []\\n      },\\n      res: [],\\n      isChecked: false,\\n      selectedItems: [],\\n      areAllSelected: false,\\n      isUpperToolbarDropdownOpen: false,\\n      isUpperToolbarKebabDropdownOpen: false,\\n      isLowerToolbarDropdownOpen: false,\\n      isLowerToolbarKebabDropdownOpen: false,\\n      isCardKebabDropdownOpen: false,\\n      activeItem: 0,\\n      splitButtonDropdownIsOpen: false,\\n      page: 1,\\n      perPage: 10,\\n      totalItemCount: 10\\n    };\\n\\n    this.onToolbarDropdownToggle = isLowerToolbarDropdownOpen => {\\n      this.setState(prevState => ({\\n        isLowerToolbarDropdownOpen\\n      }));\\n    };\\n\\n    this.onToolbarKebabDropdownToggle = isLowerToolbarKebabDropdownOpen => {\\n      this.setState({\\n        isLowerToolbarKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onToolbarKebabDropdownSelect = event => {\\n      this.setState({\\n        isLowerToolbarKebabDropdownOpen: !this.state.isLowerToolbarKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onCardKebabDropdownToggle = (key, isCardKebabDropdownOpen) => {\\n      this.setState({\\n        [key]: isCardKebabDropdownOpen\\n      });\\n    };\\n\\n    this.onCardKebabDropdownSelect = (key, event) => {\\n      this.setState({\\n        [key]: !this.state[key]\\n      });\\n    };\\n\\n    this.deleteItem = item => event => {\\n      const filter = getter => val => getter(val) !== item.id;\\n      this.setState({\\n        res: this.state.res.filter(filter(({ id }) => id)),\\n        selectedItems: this.state.selectedItems.filter(filter(id => id))\\n      });\\n    };\\n\\n    this.onSetPage = (_event, pageNumber) => {\\n      this.setState({\\n        page: pageNumber\\n      });\\n    };\\n\\n    this.onPerPageSelect = (_event, perPage) => {\\n      this.setState({\\n        perPage\\n      });\\n    };\\n\\n    this.onSplitButtonToggle = isOpen => {\\n      this.setState({\\n        splitButtonDropdownIsOpen: isOpen\\n      });\\n    };\\n\\n    this.onSplitButtonSelect = event => {\\n      this.setState((prevState, props) => {\\n        return { splitButtonDropdownIsOpen: !prevState.splitButtonDropdownIsOpen };\\n      });\\n    };\\n\\n    this.onNameSelect = (event, selection) => {\\n      const checked = event.target.checked;\\n      this.setState(prevState => {\\n        const prevSelections = prevState.filters['products'];\\n        return {\\n          filters: {\\n            ...prevState.filters,\\n            ['products']: checked ? [...prevSelections, selection] : prevSelections.filter(value => value !== selection)\\n          }\\n        };\\n      });\\n    };\\n\\n    this.onDelete = (type = '', id = '') => {\\n      if (type) {\\n        this.setState(prevState => {\\n          prevState.filters[type.toLowerCase()] = prevState.filters[type.toLowerCase()].filter(s => s !== id);\\n          return {\\n            filters: prevState.filters\\n          };\\n        });\\n      } else {\\n        this.setState({\\n          filters: {\\n            products: []\\n          }\\n        });\\n      }\\n    };\\n\\n    this.onKeyDown = (event, productId) => {\\n      console.log(productId);\\n      if (event.target !== event.currentTarget) {\\n        return;\\n      }\\n      if ([' ', 'Enter'].includes(event.key)) {\\n        event.preventDefault();\\n        this.setState(prevState => {\\n          return prevState.selectedItems.includes(productId * 1)\\n            ? {\\n                selectedItems: [...prevState.selectedItems.filter(id => productId * 1 != id)],\\n                areAllSelected: false\\n              }\\n            : {\\n                selectedItems: [...prevState.selectedItems, productId * 1],\\n                areAllSelected: prevState.totalItemCount === prevState.selectedItems.length + 1\\n              };\\n        });\\n      }\\n    };\\n\\n    this.onClick = productId => {\\n      this.setState(prevState => {\\n        return prevState.selectedItems.includes(productId * 1)\\n          ? {\\n              selectedItems: [...prevState.selectedItems.filter(id => productId * 1 != id)],\\n              areAllSelected: false\\n            }\\n          : {\\n              selectedItems: [...prevState.selectedItems, productId * 1],\\n              areAllSelected: prevState.totalItemCount === prevState.selectedItems.length + 1\\n            };\\n      });\\n    };\\n  }\\n\\n  selectedItems(e) {\\n    const { value, checked } = e.target;\\n    let { selectedItems } = this.state;\\n\\n    if (checked) {\\n      selectedItems = [...selectedItems, value];\\n    } else {\\n      selectedItems = selectedItems.filter(el => el !== value);\\n      if (this.state.areAllSelected) {\\n        this.setState({\\n          areAllSelected: !this.state.areAllSelected\\n        });\\n      }\\n    }\\n    this.setState({ selectedItems });\\n  }\\n\\n  splitCheckboxSelectAll(e) {\\n    const { checked } = e.target;\\n    const { isChecked, res } = this.state;\\n    let collection = [];\\n\\n    if (checked) {\\n      for (var i = 0; i <= 9; i++) collection = [...collection, i];\\n    }\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: isChecked,\\n        areAllSelected: checked\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectPage(e) {\\n    const { checked } = e.target;\\n    const { isChecked, totalItemCount, perPage } = this.state;\\n    let collection = [];\\n\\n    collection = this.getAllItems();\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: checked,\\n        areAllSelected: totalItemCount === perPage ? true : false\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectAll(e) {\\n    const { checked } = e.target;\\n    const { isChecked } = this.state;\\n\\n    let collection = [];\\n    for (var i = 0; i <= 9; i++) collection = [...collection, i];\\n\\n    this.setState(\\n      {\\n        selectedItems: collection,\\n        isChecked: true,\\n        areAllSelected: true\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  selectNone(e) {\\n    const { checked } = e.target;\\n    const { isChecked, selectedItems } = this.state;\\n    this.setState(\\n      {\\n        selectedItems: [],\\n        isChecked: false,\\n        areAllSelected: false\\n      },\\n      this.updateSelected\\n    );\\n  }\\n\\n  getAllItems() {\\n    const { res } = this.state;\\n    const collection = [];\\n    for (const items of res) {\\n      collection.push(items.id);\\n    }\\n\\n    return collection;\\n  }\\n\\n  updateSelected() {\\n    const { res, selectedItems } = this.state;\\n    let rows = res.map(post => {\\n      post.selected = selectedItems.includes(post.id);\\n      return post;\\n    });\\n\\n    this.setState({\\n      res: rows\\n    });\\n  }\\n\\n  fetch(page, perPage) {\\n    fetch(`https://my-json-server.typicode.com/jenny-s51/cardviewdata/posts?_page=${page}&_limit=${perPage}`)\\n      .then(resp => resp.json())\\n      .then(resp => this.setState({ res: resp, perPage, page }))\\n      .then(() => this.updateSelected())\\n      .catch(err => this.setState({ error: err }));\\n  }\\n\\n  componentDidMount() {\\n    this.fetch(this.state.page, this.state.perPage);\\n  }\\n\\n  renderPagination() {\\n    const { page, perPage, totalItemCount } = this.state;\\n\\n    const defaultPerPageOptions = [\\n      {\\n        title: '1',\\n        value: 1\\n      },\\n      {\\n        title: '5',\\n        value: 5\\n      },\\n      {\\n        title: '10',\\n        value: 10\\n      }\\n    ];\\n\\n    return (\\n      <Pagination\\n        itemCount={totalItemCount}\\n        page={page}\\n        perPage={perPage}\\n        perPageOptions={defaultPerPageOptions}\\n        onSetPage={(_evt, value) => {\\n          this.fetch(value, perPage);\\n        }}\\n        onPerPageSelect={(_evt, value) => {\\n          this.fetch(1, value);\\n        }}\\n        variant=\\\"top\\\"\\n        isCompact\\n      />\\n    );\\n  }\\n\\n  buildSelectDropdown() {\\n    const { splitButtonDropdownIsOpen, selectedItems, areAllSelected } = this.state;\\n    const numSelected = selectedItems.length;\\n    const allSelected = areAllSelected;\\n    const anySelected = numSelected > 0;\\n    const someChecked = anySelected ? null : false;\\n    const isChecked = allSelected ? true : someChecked;\\n    const splitButtonDropdownItems = [\\n      <DropdownItem key=\\\"item-1\\\" onClick={this.selectNone.bind(this)}>\\n        Select none (0 items)\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"item-2\\\" onClick={this.selectPage.bind(this)}>\\n        Select page ({this.state.perPage} items)\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"item-3\\\" onClick={this.selectAll.bind(this)}>\\n        Select all ({this.state.totalItemCount} items)\\n      </DropdownItem>\\n    ];\\n\\n    return (\\n      <Dropdown\\n        position={DropdownPosition.left}\\n        onSelect={this.onSplitButtonSelect}\\n        toggle={\\n          <DropdownToggle\\n            splitButtonItems={[\\n              <DropdownToggleCheckbox\\n                id=\\\"example-checkbox-2\\\"\\n                key=\\\"split-checkbox\\\"\\n                aria-label={anySelected ? 'Deselect all' : 'Select all'}\\n                isChecked={areAllSelected}\\n                onClick={this.splitCheckboxSelectAll.bind(this)}\\n              ></DropdownToggleCheckbox>\\n            ]}\\n            onToggle={this.onSplitButtonToggle}\\n          >\\n            {numSelected !== 0 && <React.Fragment>{numSelected} selected</React.Fragment>}\\n          </DropdownToggle>\\n        }\\n        isOpen={splitButtonDropdownIsOpen}\\n        dropdownItems={splitButtonDropdownItems}\\n      />\\n    );\\n  }\\n\\n  buildFilterDropdown() {\\n    const { isLowerToolbarDropdownOpen, filters } = this.state;\\n\\n    const filterDropdownItems = [\\n      <SelectOption key=\\\"patternfly\\\" value=\\\"PatternFly\\\" />,\\n      <SelectOption key=\\\"activemq\\\" value=\\\"ActiveMQ\\\" />,\\n      <SelectOption key=\\\"apachespark\\\" value=\\\"Apache Spark\\\" />,\\n      <SelectOption key=\\\"avro\\\" value=\\\"Avro\\\" />,\\n      <SelectOption key=\\\"azureservices\\\" value=\\\"Azure Services\\\" />,\\n      <SelectOption key=\\\"crypto\\\" value=\\\"Crypto\\\" />,\\n      <SelectOption key=\\\"dropbox\\\" value=\\\"DropBox\\\" />,\\n      <SelectOption key=\\\"jbossdatagrid\\\" value=\\\"JBoss Data Grid\\\" />,\\n      <SelectOption key=\\\"rest\\\" value=\\\"REST\\\" />,\\n      <SelectOption key=\\\"swagger\\\" value=\\\"SWAGGER\\\" />\\n    ];\\n\\n    return (\\n      <ToolbarFilter categoryName=\\\"Products\\\" chips={filters.products} deleteChip={this.onDelete}>\\n        <Select\\n          variant={SelectVariant.checkbox}\\n          aria-label=\\\"Products\\\"\\n          onToggle={this.onToolbarDropdownToggle}\\n          onSelect={this.onNameSelect}\\n          selections={filters.products}\\n          isExpanded={isLowerToolbarDropdownOpen}\\n          placeholderText=\\\"Creator\\\"\\n        >\\n          {filterDropdownItems}\\n        </Select>\\n      </ToolbarFilter>\\n    );\\n  }\\n\\n  render() {\\n    const {\\n      isUpperToolbarDropdownOpen,\\n      isLowerToolbarDropdownOpen,\\n      isUpperToolbarKebabDropdownOpen,\\n      isLowerToolbarKebabDropdownOpen,\\n      isCardKebabDropdownOpen,\\n      splitButtonDropdownIsOpen,\\n      activeItem,\\n      filters,\\n      res,\\n      checked,\\n      selectedItems,\\n      areAllSelected,\\n      isChecked,\\n      page,\\n      perPage\\n    } = this.state;\\n\\n    const toolbarKebabDropdownItems = [\\n      <OverflowMenuDropdownItem key=\\\"link\\\">Link</OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"disabled link\\\" isDisabled>\\n        Disabled Link\\n      </OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"disabled action\\\" isDisabled component=\\\"button\\\">\\n        Disabled Action\\n      </OverflowMenuDropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <OverflowMenuDropdownItem key=\\\"separated link\\\">Separated Link</OverflowMenuDropdownItem>,\\n      <OverflowMenuDropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </OverflowMenuDropdownItem>\\n    ];\\n\\n    const toolbarItems = (\\n      <React.Fragment>\\n        <ToolbarItem variant=\\\"bulk-select\\\">{this.buildSelectDropdown()}</ToolbarItem>\\n        <ToolbarItem breakpoint=\\\"xl\\\">{this.buildFilterDropdown()}</ToolbarItem>\\n        <ToolbarItem variant=\\\"overflow-menu\\\">\\n          <OverflowMenu breakpoint=\\\"md\\\">\\n            <OverflowMenuItem>\\n              <Button variant=\\\"primary\\\">Create a project</Button>\\n            </OverflowMenuItem>\\n            <OverflowMenuControl hasAdditionalOptions>\\n              <Dropdown\\n                onSelect={this.onToolbarKebabDropdownSelect}\\n                toggle={<KebabToggle onToggle={this.onToolbarKebabDropdownToggle} id=\\\"toggle-id-6\\\" />}\\n                isOpen={isLowerToolbarKebabDropdownOpen}\\n                isPlain\\n                dropdownItems={toolbarKebabDropdownItems}\\n              />\\n            </OverflowMenuControl>\\n          </OverflowMenu>\\n        </ToolbarItem>\\n        <ToolbarItem variant=\\\"pagination\\\" alignment={{ default: 'alignRight' }}>\\n          {this.renderPagination()}\\n        </ToolbarItem>\\n      </React.Fragment>\\n    );\\n\\n    const filtered =\\n      filters.products.length > 0\\n        ? res.filter(card => {\\n            return filters.products.length === 0 || filters.products.includes(card.name);\\n          })\\n        : res;\\n\\n    const icons = {\\n      pfIcon,\\n      activeMQIcon,\\n      sparkIcon,\\n      avroIcon,\\n      azureIcon,\\n      saxonIcon,\\n      dropBoxIcon,\\n      infinispanIcon,\\n      restIcon,\\n      swaggerIcon\\n    };\\n\\n    return (\\n      <React.Fragment>\\n        <DashboardWrapper mainContainerId=\\\"main-content-card-view-default-nav\\\" breadcrumb={null}>\\n          <PageSection variant={PageSectionVariants.light}>\\n            <TextContent>\\n              <Text component=\\\"h1\\\">Projects</Text>\\n              <Text component=\\\"p\\\">This is a demo that showcases PatternFly cards.</Text>\\n            </TextContent>\\n            <Toolbar id=\\\"toolbar-group-types\\\" clearAllFilters={this.onDelete}>\\n              <ToolbarContent>{toolbarItems}</ToolbarContent>\\n            </Toolbar>\\n          </PageSection>\\n          <PageSection isFilled>\\n            <Gallery hasGutter aria-label=\\\"Selectable card container\\\">\\n              <Card isSelectableRaised isCompact>\\n                <Bullseye>\\n                  <EmptyState variant={EmptyStateVariant.xs}>\\n                    <EmptyStateIcon icon={PlusCircleIcon} />\\n                    <Title headingLevel=\\\"h2\\\" size=\\\"md\\\">\\n                      Add a new card to your page\\n                    </Title>\\n                    <EmptyStateSecondaryActions>\\n                      <Button variant=\\\"link\\\">Add card</Button>\\n                    </EmptyStateSecondaryActions>\\n                  </EmptyState>\\n                </Bullseye>\\n              </Card>\\n              {filtered.map((product, key) => (\\n                <Card\\n                  isSelectableRaised\\n                  hasSelectableInput\\n                  isCompact\\n                  key={product.name}\\n                  id={product.name.replace(/ /g, '-')}\\n                  onKeyDown={e => this.onKeyDown(e, product.id)}\\n                  onClick={() => this.onClick(product.id)}\\n                  onSelectableInputChange={() => this.onClick(product.id)}\\n                  isSelected={selectedItems.includes(product.id)}\\n                >\\n                  <CardHeader>\\n                    <img src={icons[product.icon]} alt={`${product.name} icon`} style={{ maxWidth: '60px' }} />\\n                    <CardActions>\\n                      <Dropdown\\n                        isPlain\\n                        position=\\\"right\\\"\\n                        onSelect={e => this.onCardKebabDropdownSelect(key, e)}\\n                        toggle={\\n                          <KebabToggle\\n                            onToggle={isCardKebabDropdownOpen =>\\n                              this.onCardKebabDropdownToggle(key, isCardKebabDropdownOpen)\\n                            }\\n                          />\\n                        }\\n                        isOpen={this.state[key]}\\n                        dropdownItems={[\\n                          <DropdownItem key=\\\"trash\\\" onClick={this.deleteItem(product)} position=\\\"right\\\">\\n                            <TrashIcon />\\n                            Delete\\n                          </DropdownItem>\\n                        ]}\\n                      />\\n                      <Checkbox\\n                        checked={isChecked}\\n                        value={product.id}\\n                        isChecked={selectedItems.includes(product.id)}\\n                        aria-label=\\\"card checkbox example\\\"\\n                        id={`check-${product.id}`}\\n                      />\\n                    </CardActions>\\n                  </CardHeader>\\n                  <CardTitle>{product.name}</CardTitle>\\n                  <CardBody>{product.description}</CardBody>\\n                </Card>\\n              ))}\\n            </Gallery>\\n          </PageSection>\\n          <PageSection isFilled={false} sticky=\\\"bottom\\\" padding={{ default: 'noPadding' }} variant=\\\"light\\\">\\n            <Pagination\\n              itemCount={this.state.totalItemCount}\\n              page={page}\\n              page={this.state.page}\\n              perPage={this.state.perPage}\\n              onPerPageSelect={this.onPerPageSelect}\\n              onSetPage={this.onSetPage}\\n              variant=\\\"bottom\\\"\\n            />\\n          </PageSection>\\n        </DashboardWrapper>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Card view\",\"lang\":\"js\",\"isFullscreen\":true}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`This demonstrates how you can assemble a full page view that contains a grid of equal sized cards that includes a toolbar for managing card grid contents.`}\n    </p>\n    {React.createElement(pageData.examples[\"Card view\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'DemosCardViewReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,gBAAP,MAA6B,6FAA7B;AACA,OAAOC,UAAP,MAAuB,oDAAvB;AACA,OAAOC,SAAP,MAAsB,mDAAtB;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,MAAP,MAAmB,oFAAnB;AACA,OAAOC,YAAP,MAAyB,4FAAzB;AACA,OAAOC,QAAP,MAAqB,yFAArB;AACA,OAAOC,WAAP,MAAwB,4FAAxB;AACA,OAAOC,cAAP,MAA2B,+FAA3B;AACA,OAAOC,SAAP,MAAsB,0FAAtB;AACA,OAAOC,SAAP,MAAsB,0FAAtB;AACA,OAAOC,WAAP,MAAwB,iGAAxB;AACA,OAAOC,SAAP,MAAsB,wGAAtB;AACA,OAAOC,QAAP,MAAqB,+FAArB;AACA,OAAOC,iBAAP,MAA8B,6BAA9B;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,WADS;EAEf,WAAW,OAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,8BAJO;EAKf,cAAc,mHALC;EAMf,sBAAsB,CACpB,WADoB;AANP,CAAjB;AAUAA,QAAQ,CAACC,WAAT,GAAuB;EACrBhB,gBAAgB,EAAhBA,gBADqB;EAErBC,UAAU,EAAVA,UAFqB;EAGrBC,SAAS,EAATA,SAHqB;EAIrBC,cAAc,EAAdA,cAJqB;EAKrBC,MAAM,EAANA,MALqB;EAMrBC,YAAY,EAAZA,YANqB;EAOrBC,QAAQ,EAARA,QAPqB;EAQrBC,WAAW,EAAXA,WARqB;EASrBC,cAAc,EAAdA,cATqB;EAUrBC,SAAS,EAATA,SAVqB;EAWrBC,SAAS,EAATA,SAXqB;EAYrBC,WAAW,EAAXA,WAZqB;EAarBC,SAAS,EAATA,SAbqB;EAcrBC,QAAQ,EAARA;AAdqB,CAAvB;AAgBAE,QAAQ,CAACE,QAAT,GAAoB;EAClB,aAAa,kBAAAC,KAAK;IAAA,oBAChB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAkC,SAAS,EAAEJ,iBAA7C;MAAqE,QAAO,q3lBAA5E;MAAk8lB,SAAQ,WAA18lB;MAAs9lB,QAAO,IAA79lB;MAAk+lB,gBAAe;IAAj/lB,GADgB;EAAA;AADA,CAApB;;AAOA,IAAMK,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,eAIE;IAAQ,aAAY;EAApB,gKAJF,EAOGxB,KAAK,CAACyB,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,WAAlB,CAApB,CAPH,CADgB;AAAA,CAAlB;;AAWAE,SAAS,CAACE,WAAV,GAAwB,6BAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}