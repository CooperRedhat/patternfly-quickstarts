{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, ModalVariant, Alert, EmptyState, EmptyStateIcon, EmptyStateBody, EmptyStateSecondaryActions, Title, Progress } from '@patternfly/react-core';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport SlackHashIcon from '@patternfly/react-icons/dist/esm/icons/slack-hash-icon';\nimport FinishedStep from '../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./FinishedStep';\nimport SampleForm from '../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./SampleForm';\nvar pageData = {\n  \"id\": \"Wizard\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/wizard/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Wizard/examples/Wizard.md\",\n  \"propComponents\": [{\n    \"name\": \"Wizard\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"appendTo\",\n      \"type\": \"HTMLElement | (() => HTMLElement)\",\n      \"description\": \"The parent container to append the modal to. Defaults to document.body\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"backButtonText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"(Unused if footer is controlled) The Back button text\",\n      \"defaultValue\": \"'Back'\"\n    }, {\n      \"name\": \"cancelButtonText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"(Unused if footer is controlled) The Cancel button text\",\n      \"defaultValue\": \"'Cancel'\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes spread to the Wizard\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"closeButtonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"(Unused if footer is controlled) aria-label for the close button\",\n      \"defaultValue\": \"'Close'\"\n    }, {\n      \"name\": \"description\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"The wizard description\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"descriptionComponent\",\n      \"type\": \"'div' | 'p'\",\n      \"description\": \"Component type of the description\",\n      \"defaultValue\": \"'p'\"\n    }, {\n      \"name\": \"descriptionId\",\n      \"type\": \"string\",\n      \"description\": \"An optional id for the description\"\n    }, {\n      \"name\": \"footer\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"(Use to control the footer) Passing in a footer component lets you control the buttons yourself\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"hasNoBodyPadding\",\n      \"type\": \"boolean\",\n      \"description\": \"Can remove the default padding around the main body content by setting this to true\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"height\",\n      \"type\": \"number | string\",\n      \"description\": \"Custom height of the wizard\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"hideClose\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating whether the close button should be in the header\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isNavExpandable\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating nav items with sub steps are expandable\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided\",\n      \"defaultValue\": \"undefined\"\n    }, {\n      \"name\": \"mainAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the main element\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"mainAriaLabelledBy\",\n      \"type\": \"string\",\n      \"description\": \"Sets aria-labelledby on the main element\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"navAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the Nav\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"navAriaLabelledBy\",\n      \"type\": \"string\",\n      \"description\": \"Sets aria-labelledby on nav element\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"nextButtonText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"(Unused if footer is controlled) The Next button text\",\n      \"defaultValue\": \"'Next'\"\n    }, {\n      \"name\": \"onBack\",\n      \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n      \"description\": \"(Unused if footer is controlled) Callback function after Back button is clicked\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"onClose\",\n      \"type\": \"() => void\",\n      \"description\": \"Callback function to close the wizard\",\n      \"defaultValue\": \"() => undefined as any\"\n    }, {\n      \"name\": \"onGoToStep\",\n      \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n      \"description\": \"Callback function when a step in the nav is clicked\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"onNext\",\n      \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n      \"description\": \"(Unused if footer is controlled) Callback function after Next button is clicked\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"onSave\",\n      \"type\": \"() => void\",\n      \"description\": \"(Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose\"\n    }, {\n      \"name\": \"startAtStep\",\n      \"type\": \"number\",\n      \"description\": \"The current step the wizard is on (1 or higher)\",\n      \"defaultValue\": \"1\"\n    }, {\n      \"name\": \"steps\",\n      \"type\": \"WizardStep[]\",\n      \"description\": \"The wizard steps configuration object\",\n      \"required\": true\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string\",\n      \"description\": \"The wizard title to display if header is desired\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"titleId\",\n      \"type\": \"string\",\n      \"description\": \"An optional id for the title\"\n    }, {\n      \"name\": \"width\",\n      \"type\": \"number | string\",\n      \"description\": \"Custom width of the wizard\",\n      \"defaultValue\": \"null\"\n    }]\n  }, {\n    \"name\": \"WizardNav\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label applied to the nav element\"\n    }, {\n      \"name\": \"aria-labelledby\",\n      \"type\": \"string\",\n      \"description\": \"Sets the aria-labelledby attribute on the nav element\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"any\",\n      \"description\": \"children should be WizardNavItem components\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether the nav is expanded\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"returnList\",\n      \"type\": \"boolean\",\n      \"description\": \"True to return the inner list without the wrapping nav element\",\n      \"defaultValue\": \"false\"\n    }]\n  }, {\n    \"name\": \"WizardNavItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Can nest a WizardNav component for substeps\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"content\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"The content to display in the nav item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"href\",\n      \"type\": \"string\",\n      \"description\": \"An optional url to use for when using an anchor component\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string | number\",\n      \"description\": \"The id for the nav item\"\n    }, {\n      \"name\": \"isCurrent\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether the nav item is the currently active item\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Whether the nav item is disabled\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isExpandable\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating that this NavItem has child steps and is expandable\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"navItemComponent\",\n      \"type\": \"'button' | 'a'\",\n      \"description\": \"Component used to render WizardNavItem\",\n      \"defaultValue\": \"'button'\"\n    }, {\n      \"name\": \"onNavItemClick\",\n      \"type\": \"(step: number) => any\",\n      \"description\": \"Callback for when the nav item is clicked\",\n      \"defaultValue\": \"() => undefined\"\n    }, {\n      \"name\": \"step\",\n      \"type\": \"number\",\n      \"description\": \"The step passed into the onNavItemClick callback\",\n      \"required\": true\n    }]\n  }, {\n    \"name\": \"WizardHeader\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"closeButtonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label applied to the X (Close) button\"\n    }, {\n      \"name\": \"description\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Description of the wizard\"\n    }, {\n      \"name\": \"descriptionComponent\",\n      \"type\": \"'div' | 'p'\",\n      \"description\": \"Component type of the description\",\n      \"defaultValue\": \"'p'\"\n    }, {\n      \"name\": \"descriptionId\",\n      \"type\": \"string\",\n      \"description\": \"id for the description\"\n    }, {\n      \"name\": \"hideClose\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating whether the close button should be in the header\"\n    }, {\n      \"name\": \"onClose\",\n      \"type\": \"() => void\",\n      \"description\": \"Callback function called when the X (Close) button is clicked\",\n      \"defaultValue\": \"() => undefined\"\n    }, {\n      \"name\": \"title\",\n      \"type\": \"string\",\n      \"description\": \"Title of the wizard\",\n      \"required\": true\n    }, {\n      \"name\": \"titleId\",\n      \"type\": \"string\",\n      \"description\": \"id for the title\"\n    }]\n  }, {\n    \"name\": \"WizardBody\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"An aria-label to use for the main element\"\n    }, {\n      \"name\": \"aria-labelledby\",\n      \"type\": \"string\",\n      \"description\": \"Sets the aria-labelledby attribute for the main element\",\n      \"required\": true\n    }, {\n      \"name\": \"children\",\n      \"type\": \"any\",\n      \"description\": \"Anything that can be rendered in the Wizard body\",\n      \"required\": true\n    }, {\n      \"name\": \"hasNoBodyPadding\",\n      \"type\": \"boolean\",\n      \"description\": \"Set to true to remove the default body padding\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"mainComponent\",\n      \"type\": \"React.ElementType\",\n      \"description\": \"Component used as the primary content container\",\n      \"defaultValue\": \"'div'\"\n    }]\n  }, {\n    \"name\": \"WizardFooter\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"any\",\n      \"description\": \"Buttons in the footer\",\n      \"required\": true\n    }]\n  }, {\n    \"name\": \"WizardToggle\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"activeStep\",\n      \"type\": \"WizardStep\",\n      \"description\": \"The currently active WizardStep\",\n      \"required\": true\n    }, {\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"The button's aria-label\",\n      \"defaultValue\": \"'Wizard Toggle'\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"The WizardFooter\",\n      \"required\": true\n    }, {\n      \"name\": \"hasNoBodyPadding\",\n      \"type\": \"boolean\",\n      \"description\": \"Set to true to remove body padding\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isInPage\",\n      \"type\": \"boolean\",\n      \"description\": \"If the wizard is in-page\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"isNavOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"If the nav is open\",\n      \"required\": true\n    }, {\n      \"name\": \"mainAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"The main's aria-label\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"mainAriaLabelledBy\",\n      \"type\": \"string\",\n      \"description\": \"Sets aria-labelledby on the main element\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"nav\",\n      \"type\": \"(isWizardNavOpen: boolean) => React.ReactElement\",\n      \"description\": \"Function that returns the WizardNav component\",\n      \"required\": true\n    }, {\n      \"name\": \"onNavToggle\",\n      \"type\": \"(isOpen: boolean) => void\",\n      \"description\": \"Callback function for when the nav is toggled\",\n      \"required\": true\n    }, {\n      \"name\": \"steps\",\n      \"type\": \"WizardStep[]\",\n      \"description\": \"The wizard steps\",\n      \"required\": true\n    }]\n  }, {\n    \"name\": \"WizardStep\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"canJumpTo\",\n      \"type\": \"boolean\",\n      \"description\": \"Enables or disables the step in the navigation. Enabled by default.\"\n    }, {\n      \"name\": \"component\",\n      \"type\": \"any\",\n      \"description\": \"The component to render in the main body\"\n    }, {\n      \"name\": \"enableNext\",\n      \"type\": \"boolean\",\n      \"description\": \"(Unused if footer is controlled) The condition needed to enable the Next button\"\n    }, {\n      \"name\": \"hideBackButton\",\n      \"type\": \"boolean\",\n      \"description\": \"(Unused if footer is controlled) True to hide the Back button\"\n    }, {\n      \"name\": \"hideCancelButton\",\n      \"type\": \"boolean\",\n      \"description\": \"(Unused if footer is controlled) True to hide the Cancel button\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string | number\",\n      \"description\": \"Optional identifier\"\n    }, {\n      \"name\": \"isFinishedStep\",\n      \"type\": \"boolean\",\n      \"description\": \"Setting to true hides the side nav and footer\"\n    }, {\n      \"name\": \"name\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"The name of the step\",\n      \"required\": true\n    }, {\n      \"name\": \"nextButtonText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"(Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it.\"\n    }, {\n      \"name\": \"stepNavItemProps\",\n      \"type\": \"React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps\",\n      \"description\": \"Props to pass to the WizardNavItem\"\n    }, {\n      \"name\": \"steps\",\n      \"type\": \"WizardStep[]\",\n      \"description\": \"Sub steps\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-wizard\"],\n  \"examples\": [\"Basic\", \"Anchors for nav items\", \"Incrementally enabled steps\", \"Expandable steps\", \"Finished\", \"Enabled on form validation\", \"Validate on button press\", \"Progressive steps\", \"Remember last step\", \"Wizard in modal\"]\n};\npageData.liveContext = {\n  Button: Button,\n  Wizard: Wizard,\n  WizardFooter: WizardFooter,\n  WizardContextConsumer: WizardContextConsumer,\n  ModalVariant: ModalVariant,\n  Alert: Alert,\n  EmptyState: EmptyState,\n  EmptyStateIcon: EmptyStateIcon,\n  EmptyStateBody: EmptyStateBody,\n  EmptyStateSecondaryActions: EmptyStateSecondaryActions,\n  Title: Title,\n  Progress: Progress,\n  ExternalLinkAltIcon: ExternalLinkAltIcon,\n  SlackHashIcon: SlackHashIcon,\n  FinishedStep: FinishedStep,\n  SampleForm: SampleForm\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Basic wizard';\\n    return <Wizard navAriaLabel={`${title} steps`} mainAriaLabel={`${title} content`} steps={steps} height={400} />;\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Anchors for nav items': function AnchorsForNavItems(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\\nimport SlackHashIcon from '@patternfly/react-icons/dist/esm/icons/slack-hash-icon';\\n\\nclass WizardWithNavAnchors extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      {\\n        name: (\\n          <div>\\n            <ExternalLinkAltIcon /> PF3\\n          </div>\\n        ),\\n        component: <p>Step 1: Read about PF3</p>,\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v3/', target: '_blank' }\\n      },\\n      {\\n        name: (\\n          <div>\\n            <ExternalLinkAltIcon /> PF4\\n          </div>\\n        ),\\n        component: <p>Step 2: Read about PF4</p>,\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v4/', target: '_blank' }\\n      },\\n      {\\n        name: (\\n          <div>\\n            <SlackHashIcon /> Join us on slack\\n          </div>\\n        ),\\n        component: (\\n          <Button variant=\\\"link\\\" component=\\\"a\\\" target=\\\"_blank\\\" href=\\\"https://patternfly.slack.com/\\\">\\n            Join the conversation\\n          </Button>\\n        ),\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://patternfly.slack.com/', target: '_blank' }\\n      }\\n    ];\\n    const title = 'Anchor link wizard';\\n    return <Wizard navAriaLabel={`${title} steps`} mainAriaLabel={`${title} content`} steps={steps} height={400} />;\\n  }\\n}\",\n      \"title\": \"Anchors for nav items\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Incrementally enabled steps': function IncrementallyEnabledSteps(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass IncrementallyEnabledStepsWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      stepIdReached: 1\\n    };\\n    this.onNext = ({ id }) => {\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n  }\\n\\n  render() {\\n    const { stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p>, canJumpTo: stepIdReached >= 2 },\\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p>, canJumpTo: stepIdReached >= 3 },\\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p>, canJumpTo: stepIdReached >= 4 },\\n      {\\n        id: 5,\\n        name: 'Review',\\n        component: <p>Review step content</p>,\\n        nextButtonText: 'Finish',\\n        canJumpTo: stepIdReached >= 5\\n      }\\n    ];\\n    const title = 'Incrementally enabled wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        steps={steps}\\n        onNext={this.onNext}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Incrementally enabled steps\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Expandable steps': function ExpandableSteps(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      {\\n        name: 'First step',\\n        steps: [\\n          { name: 'Substep A', component: <p>Substep A content</p> },\\n          { name: 'Substep B', component: <p>Substep B content</p> }\\n        ]\\n      },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      {\\n        name: 'Third step',\\n        steps: [\\n          { name: 'Substep C', component: <p>Substep C content</p> },\\n          { name: 'Substep D', component: <p>Substep D content</p> }\\n        ]\\n      },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Basic wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        steps={steps}\\n        height={400}\\n        isNavExpandable\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Expandable steps\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Finished': function Finished(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass FinishedStepWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n  }\\n\\n  render() {\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' },\\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\\n    ];\\n    const title = 'Finished wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Finished\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Enabled on form validation': function EnabledOnFormValidation(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\n\\nclass ValidationWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isFormValid: false,\\n      formValue: 'Thirty',\\n      allStepsValid: false,\\n      stepIdReached: 1\\n    };\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n\\n    this.onFormChange = (isValid, value) => {\\n      this.setState(\\n        {\\n          isFormValid: isValid,\\n          formValue: value\\n        },\\n        this.areAllStepsValid\\n      );\\n    };\\n\\n    this.areAllStepsValid = () => {\\n      this.setState({\\n        allStepsValid: this.state.isFormValid\\n      });\\n    };\\n\\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n    };\\n\\n    this.onSave = () => {\\n      console.log('Saved and closed the wizard');\\n      this.setState({\\n        isOpen: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isFormValid, formValue, allStepsValid, stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Information', component: <p>Step 1 content</p> },\\n      {\\n        name: 'Configuration',\\n        steps: [\\n          {\\n            id: 2,\\n            name: 'Substep A with validation',\\n            component: <SampleForm formValue={formValue} isFormValid={isFormValid} onChange={this.onFormChange} />,\\n            enableNext: isFormValid,\\n            canJumpTo: stepIdReached >= 2\\n          },\\n          { id: 3, name: 'Substep B', component: <p>Substep B</p>, canJumpTo: stepIdReached >= 3 }\\n        ]\\n      },\\n      {\\n        id: 4,\\n        name: 'Additional',\\n        component: <p>Step 3 content</p>,\\n        enableNext: allStepsValid,\\n        canJumpTo: stepIdReached >= 4\\n      },\\n      {\\n        id: 5,\\n        name: 'Review',\\n        component: <p>Step 4 content</p>,\\n        nextButtonText: 'Close',\\n        canJumpTo: stepIdReached >= 5\\n      }\\n    ];\\n    const title = 'Enabled on form validation wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        onSave={this.onSave}\\n        steps={steps}\\n        onNext={this.onNext}\\n        onBack={this.onBack}\\n        onGoToStep={this.onGoToStep}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Enabled on form validation\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Validate on button press': function ValidateOnButtonPress(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ValidateButtonPressWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      stepsValid: 0\\n    };\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n\\n    this.validateLastStep = onNext => {\\n      const { stepsValid } = this.state;\\n      if (stepsValid !== 1) {\\n        this.setState({\\n          stepsValid: 1\\n        });\\n      } else {\\n        onNext();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { stepsValid } = this.state;\\n\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      {\\n        name: 'Final Step',\\n        component: (\\n          <>\\n            {stepsValid === 1 && (\\n              <div style={{ padding: '15px 0' }}>\\n                <Alert variant=\\\"warning\\\" title=\\\"Validation failed, please try again\\\" />\\n              </div>\\n            )}\\n            <SampleForm formValue=\\\"Validating on button press\\\" isFormValid={stepsValid !== 1} />\\n          </>\\n        )\\n      },\\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            if (activeStep.name !== 'Final Step') {\\n              return (\\n                <>\\n                  <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={onNext}>\\n                    Forward\\n                  </Button>\\n                  <Button\\n                    variant=\\\"secondary\\\"\\n                    onClick={onBack}\\n                    className={activeStep.name === 'Step 1' ? 'pf-m-disabled' : ''}\\n                  >\\n                    Backward\\n                  </Button>\\n                  <Button variant=\\\"link\\\" onClick={onClose}>\\n                    Cancel\\n                  </Button>\\n                </>\\n              );\\n            }\\n            // Final step buttons\\n            return (\\n              <>\\n                <Button onClick={() => this.validateLastStep(onNext)}>Validate</Button>\\n                <Button onClick={() => goToStepByName('Step 1')}>Go to Beginning</Button>\\n              </>\\n            );\\n          }}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n    const title = 'Validate on button press wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        footer={CustomFooter}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Validate on button press\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This example demonstrates how to use the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"WizardContextConsumer\"), \" to consume the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"WizardContext\"), \". \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"WizardContext\"), \" can be used to imperatively move to a specific wizard step.\"), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"The definition of the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"WizardContext\"), \" is as follows:\"), /*#__PURE__*/React.createElement(Example, {\n      \"code\": \"interface WizardContext {\\n  goToStepById: (stepId: number | string) => void;\\n  goToStepByName: (stepName: string) => void;\\n  onNext: () => void;\\n  onBack: () => void;\\n  onClose: () => void;\\n  activeStep: WizardStep;\\n}\"\n    }));\n  },\n  'Progressive steps': function ProgressiveSteps(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Radio, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ProgressiveWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showCreateStep: false,\\n      showUpdateStep: false,\\n      showOptionsStep: false,\\n      showReviewStep: false,\\n      getStartedStepRadio: 'Create',\\n      createStepRadio: 'Quick',\\n      updateStepRadio: 'Quick'\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      // Remove steps after the currently clicked step\\n      if (name === 'Get started') {\\n        this.setState({\\n          showReviewStep: false,\\n          showOptionsStep: false,\\n          showCreateStep: false,\\n          showUpdateStep: false\\n        });\\n      } else if (name === 'Create options' || name === 'Update options') {\\n        this.setState({\\n          showReviewStep: false,\\n          showOptionsStep: false\\n        });\\n      } else if (name.indexOf('Substep') > -1) {\\n        this.setState({\\n          showReviewStep: false\\n        });\\n      }\\n    };\\n    this.getNextStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Get started') {\\n        if (this.state.getStartedStepRadio === 'Create') {\\n          this.setState(\\n            {\\n              showCreateStep: true,\\n              showUpdateStep: false,\\n              showOptionsStep: false,\\n              showReviewStep: false\\n            },\\n            () => {\\n              callback();\\n            }\\n          );\\n        } else {\\n          this.setState(\\n            {\\n              showCreateStep: false,\\n              showUpdateStep: true,\\n              showOptionsStep: false,\\n              showReviewStep: false\\n            },\\n            () => {\\n              callback();\\n            }\\n          );\\n        }\\n      } else if (activeStep.name === 'Create options' || activeStep.name === 'Update options') {\\n        this.setState(\\n          {\\n            showOptionsStep: true,\\n            showReviewStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Substep 3') {\\n        this.setState(\\n          {\\n            showReviewStep: true\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else {\\n        callback();\\n      }\\n    };\\n    this.getPreviousStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Review') {\\n        this.setState(\\n          {\\n            showReviewStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Substep 1') {\\n        this.setState(\\n          {\\n            showOptionsStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Create options') {\\n        this.setState(\\n          {\\n            showCreateStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Update options') {\\n        this.setState(\\n          {\\n            showUpdateStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else {\\n        callback();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const {\\n      stepsValid,\\n      getStartedStepRadio,\\n      createStepRadio,\\n      updateStepRadio,\\n      showCreateStep,\\n      showUpdateStep,\\n      showOptionsStep,\\n      showReviewStep\\n    } = this.state;\\n\\n    const getStartedStep = {\\n      name: 'Get started',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Create\\\"\\n            isChecked={getStartedStepRadio === 'Create'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Create a new thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Update\\\"\\n            isChecked={getStartedStepRadio === 'Update'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Update an existing thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const createStep = {\\n      name: 'Create options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={createStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={createStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const updateStep = {\\n      name: 'Update options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={updateStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={updateStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const optionsStep = {\\n      name: showCreateStep ? `${createStepRadio} Options` : `${updateStepRadio} Options`,\\n      steps: [\\n        {\\n          name: 'Substep 1',\\n          component: 'Substep 1'\\n        },\\n        {\\n          name: 'Substep 2',\\n          component: 'Substep 2'\\n        },\\n        {\\n          name: 'Substep 3',\\n          component: 'Substep 3'\\n        }\\n      ]\\n    };\\n\\n    const reviewStep = {\\n      name: 'Review',\\n      component: (\\n        <div>\\n          <div>First choice: {getStartedStepRadio}</div>\\n          <div>Second choice: {showCreateStep ? createStepRadio : updateStepRadio}</div>\\n        </div>\\n      )\\n    };\\n\\n    const steps = [\\n      getStartedStep,\\n      ...(showCreateStep ? [createStep] : []),\\n      ...(showUpdateStep ? [updateStep] : []),\\n      ...(showOptionsStep ? [optionsStep] : []),\\n      ...(showReviewStep ? [reviewStep] : [])\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            return (\\n              <>\\n                <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={() => this.getNextStep(activeStep, onNext)}>\\n                  {activeStep.name === 'Review' ? 'Finish' : 'Next'}\\n                </Button>\\n                <Button\\n                  variant=\\\"secondary\\\"\\n                  onClick={() => this.getPreviousStep(activeStep, onBack)}\\n                  className={activeStep.name === 'Get Started' ? 'pf-m-disabled' : ''}\\n                >\\n                  Back\\n                </Button>\\n                <Button variant=\\\"link\\\" onClick={onClose}>\\n                  Cancel\\n                </Button>\\n              </>\\n            );\\n          }}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n    const title = 'Progressive wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        footer={CustomFooter}\\n        onGoToStep={this.onGoToStep}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Progressive steps\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Remember last step': function RememberLastStep(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass RememberLastStepWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      step: 1\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n    this.onMove = (curr, prev) => {\\n      this.setState({\\n        step: curr.id\\n      });\\n    };\\n    this.onSave = () => {\\n      this.setState({\\n        step: 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { step } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p> },\\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p> },\\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { id: 5, name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Remember last step wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        startAtStep={step}\\n        onNext={this.onMove}\\n        onBack={this.onMove}\\n        onSave={this.onSave}\\n        onClose={this.closeWizard}\\n        description=\\\"Simple Wizard Description\\\"\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Remember last step\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Wizard in modal': function WizardInModal(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass WizardInModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isOpen }) => ({\\n        isOpen: !isOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Wizard in modal';\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show Modal\\n        </Button>\\n        <Wizard\\n          title={title}\\n          description=\\\"Simple Wizard Description\\\"\\n          descriptionComponent=\\\"div\\\"\\n          steps={steps}\\n          onClose={this.handleModalToggle}\\n          isOpen={isOpen}\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Wizard in modal\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Anchors for nav items\"]), React.createElement(pageData.examples[\"Incrementally enabled steps\"]), React.createElement(pageData.examples[\"Expandable steps\"]), React.createElement(pageData.examples[\"Finished\"]), React.createElement(pageData.examples[\"Enabled on form validation\"]), React.createElement(pageData.examples[\"Validate on button press\"]), React.createElement(pageData.examples[\"Progressive steps\"]), React.createElement(pageData.examples[\"Remember last step\"]), React.createElement(pageData.examples[\"Wizard in modal\"]));\n};\n\nComponent.displayName = 'ComponentsWizardReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","Button","Wizard","WizardFooter","WizardContextConsumer","ModalVariant","Alert","EmptyState","EmptyStateIcon","EmptyStateBody","EmptyStateSecondaryActions","Title","Progress","ExternalLinkAltIcon","SlackHashIcon","FinishedStep","SampleForm","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/wizard/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, ModalVariant, Alert, EmptyState, EmptyStateIcon, EmptyStateBody, EmptyStateSecondaryActions, Title, Progress } from '@patternfly/react-core';\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\nimport SlackHashIcon from '@patternfly/react-icons/dist/esm/icons/slack-hash-icon';\nimport FinishedStep from '../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./FinishedStep';\nimport SampleForm from '../../../../node_modules/@patternfly/react-core/src/components/Wizard/examples/./SampleForm';\nconst pageData = {\n  \"id\": \"Wizard\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/wizard/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Wizard/examples/Wizard.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Wizard\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"appendTo\",\n          \"type\": \"HTMLElement | (() => HTMLElement)\",\n          \"description\": \"The parent container to append the modal to. Defaults to document.body\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"backButtonText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"(Unused if footer is controlled) The Back button text\",\n          \"defaultValue\": \"'Back'\"\n        },\n        {\n          \"name\": \"cancelButtonText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"(Unused if footer is controlled) The Cancel button text\",\n          \"defaultValue\": \"'Cancel'\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes spread to the Wizard\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"closeButtonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"(Unused if footer is controlled) aria-label for the close button\",\n          \"defaultValue\": \"'Close'\"\n        },\n        {\n          \"name\": \"description\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"The wizard description\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"descriptionComponent\",\n          \"type\": \"'div' | 'p'\",\n          \"description\": \"Component type of the description\",\n          \"defaultValue\": \"'p'\"\n        },\n        {\n          \"name\": \"descriptionId\",\n          \"type\": \"string\",\n          \"description\": \"An optional id for the description\"\n        },\n        {\n          \"name\": \"footer\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"(Use to control the footer) Passing in a footer component lets you control the buttons yourself\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"hasNoBodyPadding\",\n          \"type\": \"boolean\",\n          \"description\": \"Can remove the default padding around the main body content by setting this to true\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"height\",\n          \"type\": \"number | string\",\n          \"description\": \"Custom height of the wizard\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"hideClose\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating whether the close button should be in the header\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isNavExpandable\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating nav items with sub steps are expandable\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating Wizard modal is open. Wizard will be placed into a modal if this prop is provided\",\n          \"defaultValue\": \"undefined\"\n        },\n        {\n          \"name\": \"mainAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the main element\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"mainAriaLabelledBy\",\n          \"type\": \"string\",\n          \"description\": \"Sets aria-labelledby on the main element\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"navAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the Nav\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"navAriaLabelledBy\",\n          \"type\": \"string\",\n          \"description\": \"Sets aria-labelledby on nav element\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"nextButtonText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"(Unused if footer is controlled) The Next button text\",\n          \"defaultValue\": \"'Next'\"\n        },\n        {\n          \"name\": \"onBack\",\n          \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n          \"description\": \"(Unused if footer is controlled) Callback function after Back button is clicked\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"onClose\",\n          \"type\": \"() => void\",\n          \"description\": \"Callback function to close the wizard\",\n          \"defaultValue\": \"() => undefined as any\"\n        },\n        {\n          \"name\": \"onGoToStep\",\n          \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n          \"description\": \"Callback function when a step in the nav is clicked\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"onNext\",\n          \"type\": \"(\\n  newStep: { id?: string | number; name: React.ReactNode },\\n  prevStep: { prevId?: string | number; prevName: React.ReactNode }\\n) => void\",\n          \"description\": \"(Unused if footer is controlled) Callback function after Next button is clicked\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"onSave\",\n          \"type\": \"() => void\",\n          \"description\": \"(Unused if footer is controlled) Callback function to save at the end of the wizard, if not specified uses onClose\"\n        },\n        {\n          \"name\": \"startAtStep\",\n          \"type\": \"number\",\n          \"description\": \"The current step the wizard is on (1 or higher)\",\n          \"defaultValue\": \"1\"\n        },\n        {\n          \"name\": \"steps\",\n          \"type\": \"WizardStep[]\",\n          \"description\": \"The wizard steps configuration object\",\n          \"required\": true\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string\",\n          \"description\": \"The wizard title to display if header is desired\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"titleId\",\n          \"type\": \"string\",\n          \"description\": \"An optional id for the title\"\n        },\n        {\n          \"name\": \"width\",\n          \"type\": \"number | string\",\n          \"description\": \"Custom width of the wizard\",\n          \"defaultValue\": \"null\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardNav\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label applied to the nav element\"\n        },\n        {\n          \"name\": \"aria-labelledby\",\n          \"type\": \"string\",\n          \"description\": \"Sets the aria-labelledby attribute on the nav element\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"any\",\n          \"description\": \"children should be WizardNavItem components\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Whether the nav is expanded\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"returnList\",\n          \"type\": \"boolean\",\n          \"description\": \"True to return the inner list without the wrapping nav element\",\n          \"defaultValue\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardNavItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Can nest a WizardNav component for substeps\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"content\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"The content to display in the nav item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"href\",\n          \"type\": \"string\",\n          \"description\": \"An optional url to use for when using an anchor component\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string | number\",\n          \"description\": \"The id for the nav item\"\n        },\n        {\n          \"name\": \"isCurrent\",\n          \"type\": \"boolean\",\n          \"description\": \"Whether the nav item is the currently active item\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Whether the nav item is disabled\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isExpandable\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating that this NavItem has child steps and is expandable\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"navItemComponent\",\n          \"type\": \"'button' | 'a'\",\n          \"description\": \"Component used to render WizardNavItem\",\n          \"defaultValue\": \"'button'\"\n        },\n        {\n          \"name\": \"onNavItemClick\",\n          \"type\": \"(step: number) => any\",\n          \"description\": \"Callback for when the nav item is clicked\",\n          \"defaultValue\": \"() => undefined\"\n        },\n        {\n          \"name\": \"step\",\n          \"type\": \"number\",\n          \"description\": \"The step passed into the onNavItemClick callback\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardHeader\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"closeButtonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label applied to the X (Close) button\"\n        },\n        {\n          \"name\": \"description\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Description of the wizard\"\n        },\n        {\n          \"name\": \"descriptionComponent\",\n          \"type\": \"'div' | 'p'\",\n          \"description\": \"Component type of the description\",\n          \"defaultValue\": \"'p'\"\n        },\n        {\n          \"name\": \"descriptionId\",\n          \"type\": \"string\",\n          \"description\": \"id for the description\"\n        },\n        {\n          \"name\": \"hideClose\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating whether the close button should be in the header\"\n        },\n        {\n          \"name\": \"onClose\",\n          \"type\": \"() => void\",\n          \"description\": \"Callback function called when the X (Close) button is clicked\",\n          \"defaultValue\": \"() => undefined\"\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"string\",\n          \"description\": \"Title of the wizard\",\n          \"required\": true\n        },\n        {\n          \"name\": \"titleId\",\n          \"type\": \"string\",\n          \"description\": \"id for the title\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardBody\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"An aria-label to use for the main element\"\n        },\n        {\n          \"name\": \"aria-labelledby\",\n          \"type\": \"string\",\n          \"description\": \"Sets the aria-labelledby attribute for the main element\",\n          \"required\": true\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"any\",\n          \"description\": \"Anything that can be rendered in the Wizard body\",\n          \"required\": true\n        },\n        {\n          \"name\": \"hasNoBodyPadding\",\n          \"type\": \"boolean\",\n          \"description\": \"Set to true to remove the default body padding\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"mainComponent\",\n          \"type\": \"React.ElementType\",\n          \"description\": \"Component used as the primary content container\",\n          \"defaultValue\": \"'div'\"\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardFooter\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"any\",\n          \"description\": \"Buttons in the footer\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardToggle\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"activeStep\",\n          \"type\": \"WizardStep\",\n          \"description\": \"The currently active WizardStep\",\n          \"required\": true\n        },\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"The button's aria-label\",\n          \"defaultValue\": \"'Wizard Toggle'\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"The WizardFooter\",\n          \"required\": true\n        },\n        {\n          \"name\": \"hasNoBodyPadding\",\n          \"type\": \"boolean\",\n          \"description\": \"Set to true to remove body padding\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isInPage\",\n          \"type\": \"boolean\",\n          \"description\": \"If the wizard is in-page\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"isNavOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"If the nav is open\",\n          \"required\": true\n        },\n        {\n          \"name\": \"mainAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"The main's aria-label\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"mainAriaLabelledBy\",\n          \"type\": \"string\",\n          \"description\": \"Sets aria-labelledby on the main element\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"nav\",\n          \"type\": \"(isWizardNavOpen: boolean) => React.ReactElement\",\n          \"description\": \"Function that returns the WizardNav component\",\n          \"required\": true\n        },\n        {\n          \"name\": \"onNavToggle\",\n          \"type\": \"(isOpen: boolean) => void\",\n          \"description\": \"Callback function for when the nav is toggled\",\n          \"required\": true\n        },\n        {\n          \"name\": \"steps\",\n          \"type\": \"WizardStep[]\",\n          \"description\": \"The wizard steps\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"WizardStep\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"canJumpTo\",\n          \"type\": \"boolean\",\n          \"description\": \"Enables or disables the step in the navigation. Enabled by default.\"\n        },\n        {\n          \"name\": \"component\",\n          \"type\": \"any\",\n          \"description\": \"The component to render in the main body\"\n        },\n        {\n          \"name\": \"enableNext\",\n          \"type\": \"boolean\",\n          \"description\": \"(Unused if footer is controlled) The condition needed to enable the Next button\"\n        },\n        {\n          \"name\": \"hideBackButton\",\n          \"type\": \"boolean\",\n          \"description\": \"(Unused if footer is controlled) True to hide the Back button\"\n        },\n        {\n          \"name\": \"hideCancelButton\",\n          \"type\": \"boolean\",\n          \"description\": \"(Unused if footer is controlled) True to hide the Cancel button\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string | number\",\n          \"description\": \"Optional identifier\"\n        },\n        {\n          \"name\": \"isFinishedStep\",\n          \"type\": \"boolean\",\n          \"description\": \"Setting to true hides the side nav and footer\"\n        },\n        {\n          \"name\": \"name\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"The name of the step\",\n          \"required\": true\n        },\n        {\n          \"name\": \"nextButtonText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"(Unused if footer is controlled) Can change the Next button text. If nextButtonText is also set for the Wizard, this step specific one overrides it.\"\n        },\n        {\n          \"name\": \"stepNavItemProps\",\n          \"type\": \"React.HTMLProps<HTMLButtonElement | HTMLAnchorElement> | WizardNavItemProps\",\n          \"description\": \"Props to pass to the WizardNavItem\"\n        },\n        {\n          \"name\": \"steps\",\n          \"type\": \"WizardStep[]\",\n          \"description\": \"Sub steps\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-wizard\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Anchors for nav items\",\n    \"Incrementally enabled steps\",\n    \"Expandable steps\",\n    \"Finished\",\n    \"Enabled on form validation\",\n    \"Validate on button press\",\n    \"Progressive steps\",\n    \"Remember last step\",\n    \"Wizard in modal\"\n  ]\n};\npageData.liveContext = {\n  Button,\n  Wizard,\n  WizardFooter,\n  WizardContextConsumer,\n  ModalVariant,\n  Alert,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  Title,\n  Progress,\n  ExternalLinkAltIcon,\n  SlackHashIcon,\n  FinishedStep,\n  SampleForm\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Basic wizard';\\n    return <Wizard navAriaLabel={`${title} steps`} mainAriaLabel={`${title} content`} steps={steps} height={400} />;\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Anchors for nav items': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport ExternalLinkAltIcon from '@patternfly/react-icons/dist/esm/icons/external-link-alt-icon';\\nimport SlackHashIcon from '@patternfly/react-icons/dist/esm/icons/slack-hash-icon';\\n\\nclass WizardWithNavAnchors extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      {\\n        name: (\\n          <div>\\n            <ExternalLinkAltIcon /> PF3\\n          </div>\\n        ),\\n        component: <p>Step 1: Read about PF3</p>,\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v3/', target: '_blank' }\\n      },\\n      {\\n        name: (\\n          <div>\\n            <ExternalLinkAltIcon /> PF4\\n          </div>\\n        ),\\n        component: <p>Step 2: Read about PF4</p>,\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://www.patternfly.org/v4/', target: '_blank' }\\n      },\\n      {\\n        name: (\\n          <div>\\n            <SlackHashIcon /> Join us on slack\\n          </div>\\n        ),\\n        component: (\\n          <Button variant=\\\"link\\\" component=\\\"a\\\" target=\\\"_blank\\\" href=\\\"https://patternfly.slack.com/\\\">\\n            Join the conversation\\n          </Button>\\n        ),\\n        stepNavItemProps: { navItemComponent: 'a', href: 'https://patternfly.slack.com/', target: '_blank' }\\n      }\\n    ];\\n    const title = 'Anchor link wizard';\\n    return <Wizard navAriaLabel={`${title} steps`} mainAriaLabel={`${title} content`} steps={steps} height={400} />;\\n  }\\n}\",\"title\":\"Anchors for nav items\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Incrementally enabled steps': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass IncrementallyEnabledStepsWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      stepIdReached: 1\\n    };\\n    this.onNext = ({ id }) => {\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n  }\\n\\n  render() {\\n    const { stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p>, canJumpTo: stepIdReached >= 2 },\\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p>, canJumpTo: stepIdReached >= 3 },\\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p>, canJumpTo: stepIdReached >= 4 },\\n      {\\n        id: 5,\\n        name: 'Review',\\n        component: <p>Review step content</p>,\\n        nextButtonText: 'Finish',\\n        canJumpTo: stepIdReached >= 5\\n      }\\n    ];\\n    const title = 'Incrementally enabled wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        steps={steps}\\n        onNext={this.onNext}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Incrementally enabled steps\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Expandable steps': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass SimpleWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n  }\\n\\n  render() {\\n    const steps = [\\n      {\\n        name: 'First step',\\n        steps: [\\n          { name: 'Substep A', component: <p>Substep A content</p> },\\n          { name: 'Substep B', component: <p>Substep B content</p> }\\n        ]\\n      },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      {\\n        name: 'Third step',\\n        steps: [\\n          { name: 'Substep C', component: <p>Substep C content</p> },\\n          { name: 'Substep D', component: <p>Substep D content</p> }\\n        ]\\n      },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Basic wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        steps={steps}\\n        height={400}\\n        isNavExpandable\\n      />\\n    );\\n  }\\n}\",\"title\":\"Expandable steps\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Finished': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass FinishedStepWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n  }\\n\\n  render() {\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' },\\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\\n    ];\\n    const title = 'Finished wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Finished\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Enabled on form validation': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard, Form, FormGroup, TextInput } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\n\\nclass ValidationWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isFormValid: false,\\n      formValue: 'Thirty',\\n      allStepsValid: false,\\n      stepIdReached: 1\\n    };\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n\\n    this.onFormChange = (isValid, value) => {\\n      this.setState(\\n        {\\n          isFormValid: isValid,\\n          formValue: value\\n        },\\n        this.areAllStepsValid\\n      );\\n    };\\n\\n    this.areAllStepsValid = () => {\\n      this.setState({\\n        allStepsValid: this.state.isFormValid\\n      });\\n    };\\n\\n    this.onNext = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.setState({\\n        stepIdReached: this.state.stepIdReached < id ? id : this.state.stepIdReached\\n      });\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onBack = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n      this.areAllStepsValid();\\n    };\\n\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      console.log(`current id: ${id}, current name: ${name}, previous id: ${prevId}, previous name: ${prevName}`);\\n    };\\n\\n    this.onSave = () => {\\n      console.log('Saved and closed the wizard');\\n      this.setState({\\n        isOpen: false\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isFormValid, formValue, allStepsValid, stepIdReached } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'Information', component: <p>Step 1 content</p> },\\n      {\\n        name: 'Configuration',\\n        steps: [\\n          {\\n            id: 2,\\n            name: 'Substep A with validation',\\n            component: <SampleForm formValue={formValue} isFormValid={isFormValid} onChange={this.onFormChange} />,\\n            enableNext: isFormValid,\\n            canJumpTo: stepIdReached >= 2\\n          },\\n          { id: 3, name: 'Substep B', component: <p>Substep B</p>, canJumpTo: stepIdReached >= 3 }\\n        ]\\n      },\\n      {\\n        id: 4,\\n        name: 'Additional',\\n        component: <p>Step 3 content</p>,\\n        enableNext: allStepsValid,\\n        canJumpTo: stepIdReached >= 4\\n      },\\n      {\\n        id: 5,\\n        name: 'Review',\\n        component: <p>Step 4 content</p>,\\n        nextButtonText: 'Close',\\n        canJumpTo: stepIdReached >= 5\\n      }\\n    ];\\n    const title = 'Enabled on form validation wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        onSave={this.onSave}\\n        steps={steps}\\n        onNext={this.onNext}\\n        onBack={this.onBack}\\n        onGoToStep={this.onGoToStep}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Enabled on form validation\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Validate on button press': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ValidateButtonPressWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      stepsValid: 0\\n    };\\n\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n\\n    this.validateLastStep = onNext => {\\n      const { stepsValid } = this.state;\\n      if (stepsValid !== 1) {\\n        this.setState({\\n          stepsValid: 1\\n        });\\n      } else {\\n        onNext();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const { stepsValid } = this.state;\\n\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      {\\n        name: 'Final Step',\\n        component: (\\n          <>\\n            {stepsValid === 1 && (\\n              <div style={{ padding: '15px 0' }}>\\n                <Alert variant=\\\"warning\\\" title=\\\"Validation failed, please try again\\\" />\\n              </div>\\n            )}\\n            <SampleForm formValue=\\\"Validating on button press\\\" isFormValid={stepsValid !== 1} />\\n          </>\\n        )\\n      },\\n      { name: 'Finish', component: <FinishedStep onClose={this.closeWizard} />, isFinishedStep: true }\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            if (activeStep.name !== 'Final Step') {\\n              return (\\n                <>\\n                  <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={onNext}>\\n                    Forward\\n                  </Button>\\n                  <Button\\n                    variant=\\\"secondary\\\"\\n                    onClick={onBack}\\n                    className={activeStep.name === 'Step 1' ? 'pf-m-disabled' : ''}\\n                  >\\n                    Backward\\n                  </Button>\\n                  <Button variant=\\\"link\\\" onClick={onClose}>\\n                    Cancel\\n                  </Button>\\n                </>\\n              );\\n            }\\n            // Final step buttons\\n            return (\\n              <>\\n                <Button onClick={() => this.validateLastStep(onNext)}>Validate</Button>\\n                <Button onClick={() => goToStepByName('Step 1')}>Go to Beginning</Button>\\n              </>\\n            );\\n          }}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n    const title = 'Validate on button press wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        footer={CustomFooter}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Validate on button press\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This example demonstrates how to use the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`WizardContextConsumer`}\n        </code>\n        {` to consume the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`WizardContext`}\n        </code>\n        {`. `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`WizardContext`}\n        </code>\n        {` can be used to imperatively move to a specific wizard step.`}\n      </p>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`The definition of the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`WizardContext`}\n        </code>\n        {` is as follows:`}\n      </p>\n      \n      <Example {...{\"code\":\"interface WizardContext {\\n  goToStepById: (stepId: number | string) => void;\\n  goToStepByName: (stepName: string) => void;\\n  onNext: () => void;\\n  onBack: () => void;\\n  onClose: () => void;\\n  activeStep: WizardStep;\\n}\"}}>\n        \n      </Example>\n    </Example>,\n  'Progressive steps': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Radio, Wizard, WizardFooter, WizardContextConsumer, Alert } from '@patternfly/react-core';\\nimport SampleForm from './examples/SampleForm';\\nimport FinishedStep from './examples/FinishedStep';\\n\\nclass ProgressiveWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      showCreateStep: false,\\n      showUpdateStep: false,\\n      showOptionsStep: false,\\n      showReviewStep: false,\\n      getStartedStepRadio: 'Create',\\n      createStepRadio: 'Quick',\\n      updateStepRadio: 'Quick'\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n    this.onGoToStep = ({ id, name }, { prevId, prevName }) => {\\n      // Remove steps after the currently clicked step\\n      if (name === 'Get started') {\\n        this.setState({\\n          showReviewStep: false,\\n          showOptionsStep: false,\\n          showCreateStep: false,\\n          showUpdateStep: false\\n        });\\n      } else if (name === 'Create options' || name === 'Update options') {\\n        this.setState({\\n          showReviewStep: false,\\n          showOptionsStep: false\\n        });\\n      } else if (name.indexOf('Substep') > -1) {\\n        this.setState({\\n          showReviewStep: false\\n        });\\n      }\\n    };\\n    this.getNextStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Get started') {\\n        if (this.state.getStartedStepRadio === 'Create') {\\n          this.setState(\\n            {\\n              showCreateStep: true,\\n              showUpdateStep: false,\\n              showOptionsStep: false,\\n              showReviewStep: false\\n            },\\n            () => {\\n              callback();\\n            }\\n          );\\n        } else {\\n          this.setState(\\n            {\\n              showCreateStep: false,\\n              showUpdateStep: true,\\n              showOptionsStep: false,\\n              showReviewStep: false\\n            },\\n            () => {\\n              callback();\\n            }\\n          );\\n        }\\n      } else if (activeStep.name === 'Create options' || activeStep.name === 'Update options') {\\n        this.setState(\\n          {\\n            showOptionsStep: true,\\n            showReviewStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Substep 3') {\\n        this.setState(\\n          {\\n            showReviewStep: true\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else {\\n        callback();\\n      }\\n    };\\n    this.getPreviousStep = (activeStep, callback) => {\\n      if (activeStep.name === 'Review') {\\n        this.setState(\\n          {\\n            showReviewStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Substep 1') {\\n        this.setState(\\n          {\\n            showOptionsStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Create options') {\\n        this.setState(\\n          {\\n            showCreateStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else if (activeStep.name === 'Update options') {\\n        this.setState(\\n          {\\n            showUpdateStep: false\\n          },\\n          () => {\\n            callback();\\n          }\\n        );\\n      } else {\\n        callback();\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const {\\n      stepsValid,\\n      getStartedStepRadio,\\n      createStepRadio,\\n      updateStepRadio,\\n      showCreateStep,\\n      showUpdateStep,\\n      showOptionsStep,\\n      showReviewStep\\n    } = this.state;\\n\\n    const getStartedStep = {\\n      name: 'Get started',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Create\\\"\\n            isChecked={getStartedStepRadio === 'Create'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Create a new thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Update\\\"\\n            isChecked={getStartedStepRadio === 'Update'}\\n            onChange={(_, event) => this.setState({ getStartedStepRadio: event.currentTarget.value })}\\n            label=\\\"Update an existing thing\\\"\\n            name=\\\"radio-step-start\\\"\\n            id=\\\"radio-step-start-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const createStep = {\\n      name: 'Create options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={createStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={createStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ createStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom create\\\"\\n            name=\\\"radio-step-create\\\"\\n            id=\\\"radio-step-create-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const updateStep = {\\n      name: 'Update options',\\n      component: (\\n        <div>\\n          <Radio\\n            value=\\\"Quick\\\"\\n            isChecked={updateStepRadio === 'Quick'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Quick update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-1\\\"\\n          />{' '}\\n          <Radio\\n            value=\\\"Custom\\\"\\n            isChecked={updateStepRadio === 'Custom'}\\n            onChange={(_, event) => this.setState({ updateStepRadio: event.currentTarget.value })}\\n            label=\\\"Custom update\\\"\\n            name=\\\"radio-step-update\\\"\\n            id=\\\"radio-step-update-2\\\"\\n          />\\n        </div>\\n      )\\n    };\\n\\n    const optionsStep = {\\n      name: showCreateStep ? `${createStepRadio} Options` : `${updateStepRadio} Options`,\\n      steps: [\\n        {\\n          name: 'Substep 1',\\n          component: 'Substep 1'\\n        },\\n        {\\n          name: 'Substep 2',\\n          component: 'Substep 2'\\n        },\\n        {\\n          name: 'Substep 3',\\n          component: 'Substep 3'\\n        }\\n      ]\\n    };\\n\\n    const reviewStep = {\\n      name: 'Review',\\n      component: (\\n        <div>\\n          <div>First choice: {getStartedStepRadio}</div>\\n          <div>Second choice: {showCreateStep ? createStepRadio : updateStepRadio}</div>\\n        </div>\\n      )\\n    };\\n\\n    const steps = [\\n      getStartedStep,\\n      ...(showCreateStep ? [createStep] : []),\\n      ...(showUpdateStep ? [updateStep] : []),\\n      ...(showOptionsStep ? [optionsStep] : []),\\n      ...(showReviewStep ? [reviewStep] : [])\\n    ];\\n\\n    const CustomFooter = (\\n      <WizardFooter>\\n        <WizardContextConsumer>\\n          {({ activeStep, goToStepByName, goToStepById, onNext, onBack, onClose }) => {\\n            return (\\n              <>\\n                <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={() => this.getNextStep(activeStep, onNext)}>\\n                  {activeStep.name === 'Review' ? 'Finish' : 'Next'}\\n                </Button>\\n                <Button\\n                  variant=\\\"secondary\\\"\\n                  onClick={() => this.getPreviousStep(activeStep, onBack)}\\n                  className={activeStep.name === 'Get Started' ? 'pf-m-disabled' : ''}\\n                >\\n                  Back\\n                </Button>\\n                <Button variant=\\\"link\\\" onClick={onClose}>\\n                  Cancel\\n                </Button>\\n              </>\\n            );\\n          }}\\n        </WizardContextConsumer>\\n      </WizardFooter>\\n    );\\n    const title = 'Progressive wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        onClose={this.closeWizard}\\n        footer={CustomFooter}\\n        onGoToStep={this.onGoToStep}\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Progressive steps\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Remember last step': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass RememberLastStepWizard extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      step: 1\\n    };\\n    this.closeWizard = () => {\\n      console.log('close wizard');\\n    };\\n    this.onMove = (curr, prev) => {\\n      this.setState({\\n        step: curr.id\\n      });\\n    };\\n    this.onSave = () => {\\n      this.setState({\\n        step: 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { step } = this.state;\\n\\n    const steps = [\\n      { id: 1, name: 'First step', component: <p>Step 1 content</p> },\\n      { id: 2, name: 'Second step', component: <p>Step 2 content</p> },\\n      { id: 3, name: 'Third step', component: <p>Step 3 content</p> },\\n      { id: 4, name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { id: 5, name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Remember last step wizard';\\n    return (\\n      <Wizard\\n        navAriaLabel={`${title} steps`}\\n        mainAriaLabel={`${title} content`}\\n        startAtStep={step}\\n        onNext={this.onMove}\\n        onBack={this.onMove}\\n        onSave={this.onSave}\\n        onClose={this.closeWizard}\\n        description=\\\"Simple Wizard Description\\\"\\n        steps={steps}\\n        height={400}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Remember last step\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Wizard in modal': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, Wizard } from '@patternfly/react-core';\\n\\nclass WizardInModal extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false\\n    };\\n    this.handleModalToggle = () => {\\n      this.setState(({ isOpen }) => ({\\n        isOpen: !isOpen\\n      }));\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen } = this.state;\\n\\n    const steps = [\\n      { name: 'First step', component: <p>Step 1 content</p> },\\n      { name: 'Second step', component: <p>Step 2 content</p> },\\n      { name: 'Third step', component: <p>Step 3 content</p> },\\n      { name: 'Fourth step', component: <p>Step 4 content</p> },\\n      { name: 'Review', component: <p>Review step content</p>, nextButtonText: 'Finish' }\\n    ];\\n    const title = 'Wizard in modal';\\n    return (\\n      <React.Fragment>\\n        <Button variant=\\\"primary\\\" onClick={this.handleModalToggle}>\\n          Show Modal\\n        </Button>\\n        <Wizard\\n          title={title}\\n          description=\\\"Simple Wizard Description\\\"\\n          descriptionComponent=\\\"div\\\"\\n          steps={steps}\\n          onClose={this.handleModalToggle}\\n          isOpen={isOpen}\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Wizard in modal\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Anchors for nav items\"])}\n    {React.createElement(pageData.examples[\"Incrementally enabled steps\"])}\n    {React.createElement(pageData.examples[\"Expandable steps\"])}\n    {React.createElement(pageData.examples[\"Finished\"])}\n    {React.createElement(pageData.examples[\"Enabled on form validation\"])}\n    {React.createElement(pageData.examples[\"Validate on button press\"])}\n    {React.createElement(pageData.examples[\"Progressive steps\"])}\n    {React.createElement(pageData.examples[\"Remember last step\"])}\n    {React.createElement(pageData.examples[\"Wizard in modal\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsWizardReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}