{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nvar pageData = {\n  \"id\": \"Masthead\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/masthead/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Masthead.md\",\n  \"examples\": [\"Basic\"]\n};\npageData.liveContext = {\n  imgBrand: imgBrand,\n  BarsIcon: BarsIcon,\n  CaretDownIcon: CaretDownIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Masthead,\\n  MastheadToggle,\\n  MastheadMain,\\n  MastheadBrand,\\n  MastheadContent,\\n  Button,\\n  Toolbar,\\n  ToolbarContent,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ContextSelector,\\n  ContextSelectorItem,\\n  Dropdown,\\n  DropdownSeparator,\\n  DropdownToggle,\\n  KebabToggle,\\n  DropdownItem,\\n  Brand\\n} from '@patternfly/react-core';\\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\\n\\nclass BasicMasthead extends React.Component {\\n  items = [\\n    'My Project',\\n    'OpenShift Cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My Project 2',\\n    'OpenShift Cluster',\\n    'Production Ansible 2',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n\\n  state = {\\n    isOpen: false,\\n    isDropdownOpen: false,\\n    isKebabOpen: false,\\n    selected: this.items[0],\\n    searchValue: '',\\n    filteredItems: this.items\\n  };\\n\\n  onToggle = (event: any, isOpen: boolean) => {\\n    this.setState({\\n      isOpen\\n    });\\n  };\\n\\n  onDropdownToggle = (isDropdownOpen: boolean) => {\\n    this.setState({\\n      isDropdownOpen\\n    });\\n  };\\n\\n  onKebabToggle = (isKebabOpen: boolean) => {\\n    this.setState({\\n      isKebabOpen\\n    });\\n  };\\n\\n  onSelect = (event: any, value: string) => {\\n    this.setState({\\n      selected: value,\\n      isOpen: !this.state.isOpen\\n    });\\n  };\\n\\n  onDropdownSelect = () => {\\n    this.setState({\\n      isDropdownOpen: !this.state.isDropdownOpen\\n    });\\n  };\\n\\n  onKebabSelect = () => {\\n    this.setState({\\n      isKebabOpen: !this.state.isKebabOpen\\n    });\\n  };\\n\\n  onSearchInputChange = (value: string) => {\\n    this.setState({ searchValue: value });\\n  };\\n\\n  onSearchButtonClick = () => {\\n    const filtered =\\n      this.state.searchValue === ''\\n        ? this.items\\n        : this.items.filter(str => str.toLowerCase().indexOf(this.state.searchValue.toLowerCase()) !== -1);\\n\\n    this.setState({ filteredItems: filtered || [] });\\n  };\\n\\n  render() {\\n    const { isOpen, isDropdownOpen, isKebabOpen, selected, searchValue, filteredItems } = this.state;\\n\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled href=\\\"www.google.com\\\">\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem\\n        key=\\\"disabled action\\\"\\n        isAriaDisabled\\n        component=\\\"button\\\"\\n        tooltip=\\\"Tooltip for disabled item\\\"\\n        tooltipProps={{ position: 'top' }}\\n      >\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n\\n    return (\\n      <Masthead id=\\\"basic\\\">\\n        <MastheadToggle>\\n          <Button variant=\\\"plain\\\" onClick={() => {}} aria-label=\\\"Global navigation\\\">\\n            <BarsIcon />\\n          </Button>\\n        </MastheadToggle>\\n        <MastheadMain>\\n          <MastheadBrand>\\n            <Brand src={imgBrand} alt=\\\"Patternfly logo\\\" />\\n          </MastheadBrand>\\n        </MastheadMain>\\n        <MastheadContent>\\n          <Toolbar id=\\\"toolbar\\\" isFullHeight isStatic>\\n            <ToolbarContent>\\n              <ToolbarItem>\\n                <ContextSelector\\n                  toggleText={selected}\\n                  onSearchInputChange={this.onSearchInputChange}\\n                  isOpen={isOpen}\\n                  searchInputValue={searchValue}\\n                  onToggle={this.onToggle}\\n                  onSelect={this.onSelect}\\n                  onSearchButtonClick={this.onSearchButtonClick}\\n                  screenReaderLabel=\\\"Selected Project:\\\"\\n                  isFullHeight\\n                >\\n                  {filteredItems.map((item, index) => (\\n                    <ContextSelectorItem key={index}>{item}</ContextSelectorItem>\\n                  ))}\\n                </ContextSelector>\\n              </ToolbarItem>\\n              <ToolbarGroup alignment={{ default: 'alignRight' }}>\\n                <ToolbarItem visibility={{ default: 'hidden', lg: 'visible' }}>\\n                  <Dropdown\\n                    onSelect={this.onDropdownSelect}\\n                    toggle={\\n                      <DropdownToggle id=\\\"toggle-id\\\" onToggle={this.onDropdownToggle} toggleIndicator={CaretDownIcon}>\\n                        Dropdown\\n                      </DropdownToggle>\\n                    }\\n                    isOpen={isDropdownOpen}\\n                    dropdownItems={dropdownItems}\\n                    isFullHeight\\n                  />\\n                </ToolbarItem>\\n                <ToolbarItem>\\n                  <Dropdown\\n                    onSelect={this.onKebabSelect}\\n                    position=\\\"right\\\"\\n                    toggle={<KebabToggle onToggle={this.onKebabToggle} id=\\\"toggle-id-kebab\\\" />}\\n                    isOpen={isKebabOpen}\\n                    isPlain\\n                    dropdownItems={dropdownItems}\\n                  />\\n                </ToolbarItem>\\n              </ToolbarGroup>\\n            </ToolbarContent>\\n          </Toolbar>\\n        </MastheadContent>\\n      </Masthead>\\n    );\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Basic\"]));\n};\n\nComponent.displayName = 'ComponentsMastheadReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","imgBrand","BarsIcon","CaretDownIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/masthead/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\nconst pageData = {\n  \"id\": \"Masthead\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/masthead/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/Masthead.md\",\n  \"examples\": [\n    \"Basic\"\n  ]\n};\npageData.liveContext = {\n  imgBrand,\n  BarsIcon,\n  CaretDownIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Masthead,\\n  MastheadToggle,\\n  MastheadMain,\\n  MastheadBrand,\\n  MastheadContent,\\n  Button,\\n  Toolbar,\\n  ToolbarContent,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ContextSelector,\\n  ContextSelectorItem,\\n  Dropdown,\\n  DropdownSeparator,\\n  DropdownToggle,\\n  KebabToggle,\\n  DropdownItem,\\n  Brand\\n} from '@patternfly/react-core';\\nimport imgBrand from '@patternfly/react-core/src/demos/examples/pfColorLogo.svg';\\nimport BarsIcon from '@patternfly/react-icons/dist/js/icons/bars-icon';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/js/icons/caret-down-icon';\\n\\nclass BasicMasthead extends React.Component {\\n  items = [\\n    'My Project',\\n    'OpenShift Cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My Project 2',\\n    'OpenShift Cluster',\\n    'Production Ansible 2',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n\\n  state = {\\n    isOpen: false,\\n    isDropdownOpen: false,\\n    isKebabOpen: false,\\n    selected: this.items[0],\\n    searchValue: '',\\n    filteredItems: this.items\\n  };\\n\\n  onToggle = (event: any, isOpen: boolean) => {\\n    this.setState({\\n      isOpen\\n    });\\n  };\\n\\n  onDropdownToggle = (isDropdownOpen: boolean) => {\\n    this.setState({\\n      isDropdownOpen\\n    });\\n  };\\n\\n  onKebabToggle = (isKebabOpen: boolean) => {\\n    this.setState({\\n      isKebabOpen\\n    });\\n  };\\n\\n  onSelect = (event: any, value: string) => {\\n    this.setState({\\n      selected: value,\\n      isOpen: !this.state.isOpen\\n    });\\n  };\\n\\n  onDropdownSelect = () => {\\n    this.setState({\\n      isDropdownOpen: !this.state.isDropdownOpen\\n    });\\n  };\\n\\n  onKebabSelect = () => {\\n    this.setState({\\n      isKebabOpen: !this.state.isKebabOpen\\n    });\\n  };\\n\\n  onSearchInputChange = (value: string) => {\\n    this.setState({ searchValue: value });\\n  };\\n\\n  onSearchButtonClick = () => {\\n    const filtered =\\n      this.state.searchValue === ''\\n        ? this.items\\n        : this.items.filter(str => str.toLowerCase().indexOf(this.state.searchValue.toLowerCase()) !== -1);\\n\\n    this.setState({ filteredItems: filtered || [] });\\n  };\\n\\n  render() {\\n    const { isOpen, isDropdownOpen, isKebabOpen, selected, searchValue, filteredItems } = this.state;\\n\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"disabled link\\\" isDisabled href=\\\"www.google.com\\\">\\n        Disabled Link\\n      </DropdownItem>,\\n      <DropdownItem\\n        key=\\\"disabled action\\\"\\n        isAriaDisabled\\n        component=\\\"button\\\"\\n        tooltip=\\\"Tooltip for disabled item\\\"\\n        tooltipProps={{ position: 'top' }}\\n      >\\n        Disabled Action\\n      </DropdownItem>,\\n      <DropdownSeparator key=\\\"separator\\\" />,\\n      <DropdownItem key=\\\"separated link\\\">Separated Link</DropdownItem>,\\n      <DropdownItem key=\\\"separated action\\\" component=\\\"button\\\">\\n        Separated Action\\n      </DropdownItem>\\n    ];\\n\\n    return (\\n      <Masthead id=\\\"basic\\\">\\n        <MastheadToggle>\\n          <Button variant=\\\"plain\\\" onClick={() => {}} aria-label=\\\"Global navigation\\\">\\n            <BarsIcon />\\n          </Button>\\n        </MastheadToggle>\\n        <MastheadMain>\\n          <MastheadBrand>\\n            <Brand src={imgBrand} alt=\\\"Patternfly logo\\\" />\\n          </MastheadBrand>\\n        </MastheadMain>\\n        <MastheadContent>\\n          <Toolbar id=\\\"toolbar\\\" isFullHeight isStatic>\\n            <ToolbarContent>\\n              <ToolbarItem>\\n                <ContextSelector\\n                  toggleText={selected}\\n                  onSearchInputChange={this.onSearchInputChange}\\n                  isOpen={isOpen}\\n                  searchInputValue={searchValue}\\n                  onToggle={this.onToggle}\\n                  onSelect={this.onSelect}\\n                  onSearchButtonClick={this.onSearchButtonClick}\\n                  screenReaderLabel=\\\"Selected Project:\\\"\\n                  isFullHeight\\n                >\\n                  {filteredItems.map((item, index) => (\\n                    <ContextSelectorItem key={index}>{item}</ContextSelectorItem>\\n                  ))}\\n                </ContextSelector>\\n              </ToolbarItem>\\n              <ToolbarGroup alignment={{ default: 'alignRight' }}>\\n                <ToolbarItem visibility={{ default: 'hidden', lg: 'visible' }}>\\n                  <Dropdown\\n                    onSelect={this.onDropdownSelect}\\n                    toggle={\\n                      <DropdownToggle id=\\\"toggle-id\\\" onToggle={this.onDropdownToggle} toggleIndicator={CaretDownIcon}>\\n                        Dropdown\\n                      </DropdownToggle>\\n                    }\\n                    isOpen={isDropdownOpen}\\n                    dropdownItems={dropdownItems}\\n                    isFullHeight\\n                  />\\n                </ToolbarItem>\\n                <ToolbarItem>\\n                  <Dropdown\\n                    onSelect={this.onKebabSelect}\\n                    position=\\\"right\\\"\\n                    toggle={<KebabToggle onToggle={this.onKebabToggle} id=\\\"toggle-id-kebab\\\" />}\\n                    isOpen={isKebabOpen}\\n                    isPlain\\n                    dropdownItems={dropdownItems}\\n                  />\\n                </ToolbarItem>\\n              </ToolbarGroup>\\n            </ToolbarContent>\\n          </Toolbar>\\n        </MastheadContent>\\n      </Masthead>\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsMastheadReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,QAAP,MAAqB,2DAArB;AACA,OAAOC,QAAP,MAAqB,iDAArB;AACA,OAAOC,aAAP,MAA0B,uDAA1B;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,UADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,kCAJO;EAKf,cAAc,kHALC;EAMf,YAAY,CACV,OADU;AANG,CAAjB;AAUAA,QAAQ,CAACC,WAAT,GAAuB;EACrBJ,QAAQ,EAARA,QADqB;EAErBC,QAAQ,EAARA,QAFqB;EAGrBC,aAAa,EAAbA;AAHqB,CAAvB;AAKAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,u8KAA9C;MAAs/K,SAAQ,OAA9/K;MAAsgL,QAAO;IAA7gL,GADY;EAAA;AADI,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGZ,KAAK,CAACa,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,OAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,kCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}