{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\nvar pageData = {\n  \"id\": \"Dual list selector\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/dual-list-selector/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/DualListSelector/examples/DualListSelector.md\",\n  \"propComponents\": [{\n    \"name\": \"DualListSelector\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"addAll\",\n      \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n      \"description\": \"Optional callback for the dynamically built add all button\"\n    }, {\n      \"name\": \"addAllAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dynamically built add all button\",\n      \"defaultValue\": \"'Add all'\"\n    }, {\n      \"name\": \"addAllTooltip\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Tooltip content for the dynamically built add all button\"\n    }, {\n      \"name\": \"addAllTooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additonal tooltip properties for the dynamically built add all tooltip\"\n    }, {\n      \"name\": \"addSelected\",\n      \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n      \"description\": \"Optional callback for the dynamically built add selected button\"\n    }, {\n      \"name\": \"addSelectedAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dynamically built add selected button\",\n      \"defaultValue\": \"'Add selected'\"\n    }, {\n      \"name\": \"addSelectedTooltip\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Tooltip content for the dynamically built add selected button\"\n    }, {\n      \"name\": \"addSelectedTooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additonal tooltip properties for the dynamically built add selected tooltip\"\n    }, {\n      \"name\": \"availableOptions\",\n      \"type\": \"React.ReactNode[] | DualListSelectorTreeItemData[]\",\n      \"description\": \"Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.\",\n      \"defaultValue\": \"[]\"\n    }, {\n      \"name\": \"availableOptionsActions\",\n      \"type\": \"React.ReactNode[]\",\n      \"description\": \"Actions to be displayed above the dynamically built available options pane.\"\n    }, {\n      \"name\": \"availableOptionsSearchAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the search input on the dynamically built available options pane.\",\n      \"defaultValue\": \"'Available search input'\"\n    }, {\n      \"name\": \"availableOptionsStatus\",\n      \"type\": \"string\",\n      \"description\": \"Status message to display above the dynamically built available options pane.\"\n    }, {\n      \"name\": \"availableOptionsTitle\",\n      \"type\": \"string\",\n      \"description\": \"Title applied to the dynamically built available options pane.\",\n      \"defaultValue\": \"'Available options'\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"chosenOptions\",\n      \"type\": \"React.ReactNode[] | DualListSelectorTreeItemData[]\",\n      \"description\": \"Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.\",\n      \"defaultValue\": \"[]\"\n    }, {\n      \"name\": \"chosenOptionsActions\",\n      \"type\": \"React.ReactNode[]\",\n      \"description\": \"Actions to be displayed above the dynamically built chosen options pane.\"\n    }, {\n      \"name\": \"chosenOptionsSearchAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the search input on the dynamically built chosen options pane.\",\n      \"defaultValue\": \"'Chosen search input'\"\n    }, {\n      \"name\": \"chosenOptionsStatus\",\n      \"type\": \"string\",\n      \"description\": \"Status message to display above the dynamically built chosen options pane.\"\n    }, {\n      \"name\": \"chosenOptionsTitle\",\n      \"type\": \"string\",\n      \"description\": \"Title applied to the dynamically built chosen options pane.\",\n      \"defaultValue\": \"'Chosen options'\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the dual list selector.\"\n    }, {\n      \"name\": \"controlsAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dynamically built controls between the two panes.\",\n      \"defaultValue\": \"'Selector controls'\"\n    }, {\n      \"name\": \"filterOption\",\n      \"type\": \"(option: React.ReactNode, input: string) => boolean\",\n      \"description\": \"Optional filter function for custom filtering based on search string. Used with a dynamically built search input.\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Id of the dual list selector.\",\n      \"defaultValue\": \"getUniqueId('dual-list-selector')\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the dual list selector is in a disabled state\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isSearchable\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating a search bar should be included above both the dynamically built available and chosen panes.\"\n    }, {\n      \"name\": \"isTree\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the dual list selector uses trees instead of simple lists\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onAvailableOptionsSearchInputChanged\",\n      \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n      \"description\": \"A callback for when the search input value for the dynamically built available options changes.\"\n    }, {\n      \"name\": \"onChosenOptionsSearchInputChanged\",\n      \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n      \"description\": \"A callback for when the search input value for the dynamically built chosen options changes.\"\n    }, {\n      \"name\": \"onListChange\",\n      \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n      \"description\": \"Callback fired every time dynamically built options are chosen or removed\"\n    }, {\n      \"name\": \"onOptionCheck\",\n      \"type\": \"(\\n  e: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n  checked: boolean,\\n  checkedId: string,\\n  newCheckedItems: string[]\\n) => void\",\n      \"description\": \"Optional callback fired when a dynamically built option is checked\"\n    }, {\n      \"name\": \"onOptionSelect\",\n      \"type\": \"(\\n  e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\\n  index: number,\\n  isChosen: boolean,\\n  id: string,\\n  itemData: any,\\n  parentData: any\\n) => void\",\n      \"description\": \"Optional callback fired when a dynamically built option is selected\"\n    }, {\n      \"name\": \"removeAll\",\n      \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n      \"description\": \"Optional callback for the dynamically built remove all button\"\n    }, {\n      \"name\": \"removeAllAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dynamically built remove all button\",\n      \"defaultValue\": \"'Remove all'\"\n    }, {\n      \"name\": \"removeAllTooltip\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Tooltip content for the dynamically built remove all button\"\n    }, {\n      \"name\": \"removeAllTooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additonal tooltip properties for the dynamically built remove all tooltip\"\n    }, {\n      \"name\": \"removeSelected\",\n      \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n      \"description\": \"Optional callback for the dynamically built remove selected button\"\n    }, {\n      \"name\": \"removeSelectedAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dynamically built remove selected button\",\n      \"defaultValue\": \"'Remove selected'\"\n    }, {\n      \"name\": \"removeSelectedTooltip\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Tooltip content for the dynamically built remove selected button\"\n    }, {\n      \"name\": \"removeSelectedTooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additonal tooltip properties for the dynamically built remove selected tooltip\"\n    }]\n  }, {\n    \"name\": \"DualListSelectorPane\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"actions\",\n      \"type\": \"React.ReactNode[]\",\n      \"description\": \"Actions to place above the pane.\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"A dual list selector list or dual list selector tree to be rendered in the pane.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the dual list selector pane.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Id of the pane.\",\n      \"defaultValue\": \"getUniqueId('dual-list-selector-pane')\"\n    }, {\n      \"name\": \"isChosen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if this pane is the chosen pane.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating whether the component is disabled.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onSearch\",\n      \"type\": \"(event: React.ChangeEvent<HTMLInputElement>) => void\",\n      \"description\": \"Callback for search input. To be used when isSearchable is true.\"\n    }, {\n      \"name\": \"searchInput\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"A search input placed above the list at the top of the pane, before actions.\"\n    }, {\n      \"name\": \"status\",\n      \"type\": \"string\",\n      \"description\": \"Status to display above the pane.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"title\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Title of the pane.\",\n      \"defaultValue\": \"''\"\n    }]\n  }, {\n    \"name\": \"DualListSelectorControl\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dual list selector control.\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be rendered in the dual list selector control.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the dual list selector control.\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating the control is disabled.\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\",\n      \"description\": \"Callback fired when dual list selector control is selected.\"\n    }, {\n      \"name\": \"tooltipContent\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be displayed in a tooltip on hover of control.\"\n    }, {\n      \"name\": \"tooltipProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional tooltip properties passed to the tooltip.\"\n    }]\n  }, {\n    \"name\": \"DualListSelectorControlsWrapper\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the dual list selector controls wrapper.\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Anything that can be rendered inside of the wrapper.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the wrapper.\"\n    }]\n  }, {\n    \"name\": \"DualListSelectorTree\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"data\",\n      \"type\": \"DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[])\",\n      \"description\": \"Data of the tree view\",\n      \"required\": true\n    }, {\n      \"name\": \"defaultAllExpanded\",\n      \"type\": \"boolean\",\n      \"description\": \"Sets the default expanded behavior\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"hasBadges\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if all options should have badges\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"ID of the tree view\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Callback fired when an option is checked\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onOptionCheck\",\n      \"type\": \"(\\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n  isChecked: boolean,\\n  itemData: DualListSelectorTreeItemData\\n) => void\",\n      \"description\": \"\"\n    }]\n  }, {\n    \"name\": \"DualListSelectorTreeItemData\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"badgeProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional properties to pass to the option badge\"\n    }, {\n      \"name\": \"checkProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional properties to pass to the option checkbox\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"DualListSelectorTreeItemData[]\",\n      \"description\": \"Content rendered inside the dual list selector.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes applied to the dual list selector.\"\n    }, {\n      \"name\": \"defaultExpanded\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating this option is expanded by default.\"\n    }, {\n      \"name\": \"hasBadge\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating this option has a badge\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"ID of the option\",\n      \"required\": true\n    }, {\n      \"name\": \"isChecked\",\n      \"type\": \"boolean\",\n      \"description\": \"Checked state of the option\",\n      \"required\": true\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating whether the component is disabled.\"\n    }, {\n      \"name\": \"onOptionCheck\",\n      \"type\": \"(\\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n    isChecked: boolean,\\n    isChosen: boolean,\\n    itemData: DualListSelectorTreeItemData\\n  ) => void\",\n      \"description\": \"Callback fired when an option is checked\"\n    }, {\n      \"name\": \"parentId\",\n      \"type\": \"string\",\n      \"description\": \"Parent id of an option\"\n    }, {\n      \"name\": \"text\",\n      \"type\": \"string\",\n      \"description\": \"Text of the option\",\n      \"required\": true\n    }]\n  }],\n  \"beta\": true,\n  \"cssPrefix\": [\"pf-c-dual-list-selector\"],\n  \"examples\": [\"Basic\", \"Basic with tooltips\", \"Basic with search\", \"Using more complex options with actions\", \"Expandable options\", \"Composable dual list selector\", \"Reordering lists using drag and drop\", \"Composable dual list selector tree\"]\n};\npageData.liveContext = {\n  AngleDoubleLeftIcon: AngleDoubleLeftIcon,\n  AngleLeftIcon: AngleLeftIcon,\n  AngleDoubleRightIcon: AngleDoubleRightIcon,\n  AngleRightIcon: AngleRightIcon,\n  PficonSortCommonAscIcon: PficonSortCommonAscIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelector\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Basic with tooltips': function BasicWithTooltips(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        addAllTooltip=\\\"Add all options\\\"\\n        addAllTooltipProps={{ position: 'top' }}\\n        addSelectedTooltip=\\\"Add selected options\\\"\\n        addSelectedTooltipProps={{ position: 'right' }}\\n        removeSelectedTooltip=\\\"Remove selected options\\\"\\n        removeSelectedTooltipProps={{ position: 'left' }}\\n        removeAllTooltip=\\\"Remove all options\\\"\\n        removeAllTooltipProps={{ position: 'bottom' }}\\n        id=\\\"basicSelector\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Basic with tooltips\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Basic with search': function BasicWithSearch(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelectorWithSearch extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        isSearchable\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelectorWithSearch\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Basic with search\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Using more complex options with actions': function UsingMoreComplexOptionsWithActions(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, ButtonVariant, Checkbox, Dropdown, DropdownItem, DualListSelector, KebabToggle } from '@patternfly/react-core';\\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\\n\\nclass ComplexDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: [<span>Option 1</span>, <span>Option 3</span>, <span>Option 4</span>, <span>Option 2</span>],\\n      chosenOptions: [],\\n      isAvailableKebabOpen: false,\\n      isChosenKebabOpen: false,\\n      isDisabled: false\\n    };\\n\\n    this.onSort = panel => {\\n      if (panel === 'available') {\\n        this.setState(prevState => {\\n          const available = prevState.availableOptions.sort((a, b) => {\\n            let returnValue = 0;\\n            if (a.props.children > b.props.children) returnValue = 1;\\n            if (a.props.children < b.props.children) returnValue = -1;\\n            return returnValue;\\n          });\\n          return {\\n            availableOptions: available\\n          };\\n        });\\n      }\\n\\n      if (panel === 'chosen') {\\n        this.setState(prevState => {\\n          const chosen = prevState.chosenOptions.sort((a, b) => {\\n            let returnValue = 0;\\n            if (a.props.children > b.props.children) returnValue = 1;\\n            if (a.props.children < b.props.children) returnValue = -1;\\n            return returnValue;\\n          });\\n          return {\\n            chosenOptions: chosen\\n          };\\n        });\\n      }\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions,\\n        chosenOptions: newChosenOptions\\n      });\\n    };\\n\\n    this.onToggle = (isOpen, pane) => {\\n      this.setState(prevState => {\\n        return {\\n          isAvailableKebabOpen: pane === 'available' ? isOpen : prevState.isAvailableKebabOpen,\\n          isChosenKebabOpen: pane === 'chosen' ? isOpen : prevState.isChosenKebabOpen\\n        };\\n      });\\n    };\\n\\n    this.filterOption = (option, input) => {\\n      return option.props.children.includes(input);\\n    };\\n  }\\n\\n  render() {\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"second action\\\" component=\\\"button\\\">\\n        Second Action\\n      </DropdownItem>\\n    ];\\n\\n    const availableOptionsActions = [\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={() => this.onSort('available')}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"availableSortButton\\\"\\n        isDisabled={this.state.isDisabled}\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>,\\n      <Dropdown\\n        toggle={<KebabToggle isDisabled={this.state.isDisabled} onToggle={isOpen => this.onToggle(isOpen, 'available')} id=\\\"toggle-id-1\\\" />}\\n        isOpen={this.state.isAvailableKebabOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n        key=\\\"availableDropdown\\\"\\n      />\\n    ];\\n\\n    const chosenOptionsActions = [\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={() => this.onSort('chosen')}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"chosenSortButton\\\"\\n        isDisabled={this.state.isDisabled}\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>,\\n      <Dropdown\\n        toggle={<KebabToggle isDisabled={this.state.isDisabled} onToggle={isOpen => this.onToggle(isOpen, 'chosen')} id=\\\"toggle-id-2\\\" />}\\n        isOpen={this.state.isChosenKebabOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n        key=\\\"chosenDropdown\\\"\\n      />\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n          <DualListSelector\\n            isSearchable\\n            availableOptions={this.state.availableOptions}\\n            availableOptionsActions={availableOptionsActions}\\n            chosenOptions={this.state.chosenOptions}\\n            chosenOptionsActions={chosenOptionsActions}\\n            addAll={this.onListChange}\\n            removeAll={this.onListChange}\\n            addSelected={this.onListChange}\\n            removeSelected={this.onListChange}\\n            filterOption={this.filterOption}\\n            isDisabled={this.state.isDisabled}\\n            id=\\\"withActions\\\"\\n          />\\n        <Checkbox\\n          key=\\\"isDisabled\\\"\\n          id=\\\"isDisabled\\\"\\n          label=\\\"isDisabled\\\"\\n          aria-label=\\\"isDisabled\\\"\\n          isChecked={this.state.isDisabled}\\n          onChange={() =>\\n            this.setState({\\n              isDisabled: !this.state.isDisabled\\n            })\\n          }\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Using more complex options with actions\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Expandable options': function ExpandableOptions(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass TreeDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      chosenOptions: [\\n        {\\n          id: 'CF1',\\n          text: 'Chosen Folder 1',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Chosen Folder 1' },\\n          hasBadge: true,\\n          badgeProps: { isRead: true },\\n          children: [\\n            { id: 'CO1', text: 'Chosen Option 1', isChecked: false, checkProps: { 'aria-label': 'Chosen Option 1' } },\\n            {\\n              id: 'CF1A',\\n              text: 'Chosen Folder 1A',\\n              isChecked: false,\\n              checkProps: { 'aria-label': 'Chosen Folder 1A' },\\n              children: [\\n                {\\n                  id: 'CO2',\\n                  text: 'Chosen Option 2',\\n                  isChecked: false,\\n                  checkProps: { 'aria-label': 'Chosen Option 2' }\\n                },\\n                {\\n                  id: 'CO3',\\n                  text: 'Chosen Option 3',\\n                  isChecked: false,\\n                  checkProps: { 'aria-label': 'Chosen Option 3' }\\n                }\\n              ]\\n            },\\n            { id: 'CO4', text: 'Chosen Option 4', isChecked: false, checkProps: { 'aria-label': 'Chosen Option 4' } }\\n          ]\\n        }\\n      ],\\n      availableOptions: [\\n        {\\n          id: 'F1',\\n          text: 'Folder 1',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Folder 1' },\\n          hasBadge: true,\\n          badgeProps: { isRead: true },\\n          children: [\\n            { id: 'O1', text: 'Option 1', isChecked: false, checkProps: { 'aria-label': 'Option 1' } },\\n            {\\n              id: 'F1A',\\n              text: 'Folder 1A',\\n              isChecked: false,\\n              checkProps: { 'aria-label': 'Folder 1A' },\\n              children: [\\n                { id: 'O2', text: 'Option 2', isChecked: false, checkProps: { 'aria-label': 'Option 2' } },\\n                { id: 'O3', text: 'Option 3', isChecked: false, checkProps: { 'aria-label': 'Option 3' } }\\n              ]\\n            },\\n            { id: 'O4', text: 'Option 4', isChecked: false, checkProps: { 'aria-label': 'Option 4' } }\\n          ]\\n        },\\n        { id: 'O5', text: 'Option 5', isChecked: false, checkProps: { 'aria-label': 'Option 5' } },\\n        {\\n          id: 'F2',\\n          text: 'Folder 2',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Folder 2' },\\n          children: [\\n            { id: 'O6', text: 'Option 6', isChecked: false, checkProps: { 'aria-label': 'Option 6' } },\\n            { id: 'O7', text: 'Option 5', isChecked: false, checkProps: { 'aria-label': 'Option 5 duplicate' } }\\n          ]\\n        }\\n      ]\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions,\\n        chosenOptions: newChosenOptions\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelector\\\"\\n        isSearchable\\n        isTree\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Expandable options\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Composable dual list selector': function ComposableDualListSelector(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { \\n  Button,\\n  ButtonVariant,\\n  DualListSelector, \\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorListItem,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n  SearchInput\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\\n\\nconst ComposableDualListSelector = () => {\\n  const [availableOptions, setAvailableOptions] = React.useState([\\n    { text: 'Apple', selected: false, isVisible: true },\\n    { text: 'Banana', selected: false, isVisible: true },\\n    { text: 'Pineapple', selected: false, isVisible: true },\\n    { text: 'Orange', selected: false, isVisible: true },\\n    { text: 'Grape', selected: false, isVisible: true },\\n    { text: 'Peach', selected: false, isVisible: true },\\n    { text: 'Strawberry', selected: false, isVisible: true }\\n    ]);\\n  const [chosenOptions, setChosenOptions] = React.useState([]);\\n  const [availableFilter, setAvailableFilter] = React.useState('');\\n  const [chosenFilter, setChosenFilter] = React.useState('');\\n\\n  // callback for moving selected options between lists\\n  const moveSelected = (fromAvailable) => {\\n    const sourceOptions = fromAvailable ? availableOptions : chosenOptions;\\n    const destinationOptions = fromAvailable ? chosenOptions : availableOptions;\\n    for (let i = 0; i < sourceOptions.length; i++) {\\n      const option = sourceOptions[i];\\n      if (option.selected && option.isVisible) {\\n        sourceOptions.splice(i, 1);\\n        destinationOptions.push(option);\\n        option.selected = false;\\n        i--;\\n      }\\n    }\\n    if (fromAvailable) {\\n      setAvailableOptions([...sourceOptions]);\\n      setChosenOptions([...destinationOptions]);\\n    } else {\\n      setChosenOptions([...sourceOptions]);\\n      setAvailableOptions([...destinationOptions]);\\n    }\\n  };\\n  \\n  // callback for moving all options between lists\\n  const moveAll = (fromAvailable) => {\\n    if (fromAvailable) {\\n      setChosenOptions([...availableOptions.filter(x => x.isVisible), ...chosenOptions]);\\n      setAvailableOptions([...availableOptions.filter(x => !x.isVisible)]);\\n    } else {\\n      setAvailableOptions([...chosenOptions.filter(x => x.isVisible), ...availableOptions]);\\n      setChosenOptions([...chosenOptions.filter(x => !x.isVisible)]);\\n    }\\n  };\\n  \\n  // callback when option is selected\\n  const onOptionSelect = (event, index, isChosen) => {\\n    if (isChosen) {\\n      const newChosen = [...chosenOptions];\\n      newChosen[index].selected = !chosenOptions[index].selected;\\n      setChosenOptions(newChosen);\\n    } else {\\n      const newAvailable = [...availableOptions];\\n      newAvailable[index].selected = !availableOptions[index].selected;\\n      setAvailableOptions(newAvailable);\\n    }\\n  };\\n  \\n  // builds a search input - used in each dual list selector pane\\n  const buildSearchInput = (isAvailable) => {\\n    const onChange = (value) => {\\n      isAvailable ? setAvailableFilter(value) : setChosenFilter(value);\\n      const toFilter = isAvailable ? [...availableOptions] : [...chosenOptions];\\n      toFilter.forEach((option) => {\\n        option.isVisible = value === '' || option.text.toLowerCase().includes(value.toLowerCase());\\n      })\\n    };\\n    \\n    return (\\n      <SearchInput\\n        value={isAvailable ? availableFilter : chosenFilter}\\n        onChange={onChange}\\n        onClear={() => onChange('')}\\n      />\\n    );\\n  };\\n  \\n  // builds a sort control - passed to both dual list selector panes\\n  const buildSort = (isAvailable) => {\\n    const onSort = () => {\\n      const toSort = isAvailable ? [...availableOptions] : [...chosenOptions];\\n      toSort.sort((a,b) => {\\n        if (a.text > b.text) return 1;\\n        if (a.text < b.text) return -1;\\n        return 0;\\n      });\\n      if (isAvailable) {\\n        setAvailableOptions(toSort);\\n      } else {\\n        setChosenOptions(toSort);\\n      }\\n    };\\n    \\n    return (\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={onSort}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"sortButton\\\"\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>\\n    );\\n  };\\n\\n  return (\\n    <DualListSelector>\\n      <DualListSelectorPane\\n        title=\\\"Available\\\"\\n        status={`${availableOptions.filter(x => x.selected && x.isVisible).length} of ${availableOptions.filter(x => x.isVisible).length} options selected`}\\n        searchInput={buildSearchInput(true)}\\n        actions={[buildSort(true)]}\\n      >\\n        <DualListSelectorList>\\n          {availableOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, false)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n      <DualListSelectorControlsWrapper\\n        aria-label=\\\"Selector controls\\\"\\n      >\\n        <DualListSelectorControl\\n          isDisabled={!availableOptions.some(option => option.selected)}\\n          onClick={() => moveSelected(true)}\\n          aria-label=\\\"Add selected\\\"\\n          tooltipContent=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={availableOptions.length === 0}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n          tooltipContent=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenOptions.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n          tooltipContent=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveSelected(false)}\\n          isDisabled={!chosenOptions.some(option => option.selected)}\\n          aria-label=\\\"Remove selected\\\"\\n          tooltipContent=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      <DualListSelectorPane\\n        title=\\\"Chosen\\\"\\n        status={`${chosenOptions.filter(x => x.selected && x.isVisible).length} of ${chosenOptions.filter(x => x.isVisible).length} options selected`}\\n        searchInput={buildSearchInput(false)}\\n        actions={[buildSort(false)]}\\n        isChosen\\n      >\\n        <DualListSelectorList>\\n          {chosenOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, true)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n    </DualListSelector>\\n  );\\n}\",\n      \"title\": \"Composable dual list selector\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"For more flexibility, a Dual list selector can be built using sub components. When doing so, the intended component\\nrelationships are arranged as follows:\"), /*#__PURE__*/React.createElement(Example, {\n      \"code\": \"import React from 'react';\\nimport { DualListSelector, DualListSelectorPane, DualListSelectorList, DualListSelectorListItem, DualListSelectorControlsWrapper, DualListSelectorControl } from '@patternfly/react-core';\\n\\n<DualListSelector>\\n\\n  <DualListSelectorPane>\\n    <DualListSelectorList>\\n      <DualListSelectorListItem/>\\n    </DualListSelectorList>\\n  </DualListSelectorPane>\\n  \\n  <DualListSelectorControlsWrapper>\\n    <DualListSelectorControl/> {/* The standard Dual list selector has 4 controls */}\\n  </DualListSelectorControlsWrapper>\\n  \\n  <DualListSelectorPane isChosen>\\n    <DualListSelectorList>\\n      <DualListSelectorListItem/>\\n    </DualListSelectorList>\\n  </DualListSelectorPane>\\n  \\n</DualListSelector>\",\n      \"lang\": \"js\",\n      \"noLive\": true\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"Note: Keyboard accessibility and screen reader accessibility for the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"DragDrop\"), \" component are still in development.\"));\n  },\n  'Reordering lists using drag and drop': function ReorderingListsUsingDragAndDrop(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { \\n  DragDrop,\\n  Droppable,\\n  Draggable,\\n  DualListSelector, \\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorListItem,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\nconst ComposableDualListSelector = () => {\\n  const [ignoreNextOptionSelect, setIgnoreNextOptionSelect] = React.useState(false);\\n  const [availableOptions, setAvailableOptions] = React.useState([\\n    { text: 'Apple', selected: false, isVisible: true },\\n    { text: 'Banana', selected: false, isVisible: true },\\n    { text: 'Pineapple', selected: false, isVisible: true }\\n  ]);\\n  const [chosenOptions, setChosenOptions] = React.useState([\\n    { text: 'Orange', selected: false, isVisible: true },\\n    { text: 'Grape', selected: false, isVisible: true },\\n    { text: 'Peach', selected: false, isVisible: true },\\n    { text: 'Strawberry', selected: false, isVisible: true }\\n  ]);\\n\\n  const moveSelected = (fromAvailable) => {\\n    const sourceOptions = fromAvailable ? availableOptions : chosenOptions;\\n    const destinationOptions = fromAvailable ? chosenOptions : availableOptions;\\n    for (let i = 0; i < sourceOptions.length; i++) {\\n      const option = sourceOptions[i];\\n      if (option.selected && option.isVisible) {\\n        sourceOptions.splice(i, 1);\\n        destinationOptions.push(option);\\n        option.selected = false;\\n        i--;\\n      }\\n    }\\n    if (fromAvailable) {\\n      setAvailableOptions([...sourceOptions]);\\n      setChosenOptions([...destinationOptions]);\\n    } else {\\n      setChosenOptions([...sourceOptions]);\\n      setAvailableOptions([...destinationOptions]);\\n    }\\n  };\\n  \\n  const moveAll = (fromAvailable) => {\\n    if (fromAvailable) {\\n      setChosenOptions([...availableOptions.filter(x => x.isVisible), ...chosenOptions]);\\n      setAvailableOptions([...availableOptions.filter(x => !x.isVisible)]);\\n    } else {\\n      setAvailableOptions([...chosenOptions.filter(x => x.isVisible), ...availableOptions]);\\n      setChosenOptions([...chosenOptions.filter(x => !x.isVisible)]);\\n    }\\n  };\\n  \\n  const onOptionSelect = (event, index, isChosen) => {\\n    if (ignoreNextOptionSelect) {\\n      setIgnoreNextOptionSelect(false);\\n      return;\\n    }\\n    if (isChosen) {\\n      const newChosen = [...chosenOptions];\\n      newChosen[index].selected = !chosenOptions[index].selected;\\n      setChosenOptions(newChosen);\\n    } else {\\n      const newAvailable = [...availableOptions];\\n      newAvailable[index].selected = !availableOptions[index].selected;\\n      setAvailableOptions(newAvailable);\\n    }\\n  };\\n  \\n  const onDrop = (source, dest) => {\\n    if (dest){\\n      const newList = [...chosenOptions];\\n      const [removed] = newList.splice(source.index, 1);\\n      newList.splice(dest.index, 0, removed);\\n      setChosenOptions(newList);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  return (\\n    <DualListSelector>\\n      <DualListSelectorPane\\n        title=\\\"Available\\\"\\n        status={`${availableOptions.filter(x => x.selected && x.isVisible).length} of ${availableOptions.filter(x => x.isVisible).length} options selected`}\\n      >\\n        <DualListSelectorList>\\n          {availableOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-available-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, false)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n      <DualListSelectorControlsWrapper\\n        aria-label=\\\"Selector controls\\\"\\n      >\\n        <DualListSelectorControl\\n          isDisabled={!availableOptions.some(option => option.selected)}\\n          onClick={() => moveSelected(true)}\\n          aria-label=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={availableOptions.length === 0}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenOptions.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveSelected(false)}\\n          isDisabled={!chosenOptions.some(option => option.selected)}\\n          aria-label=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      <DragDrop onDrag={() => { setIgnoreNextOptionSelect(true); return true; }} onDrop={onDrop}>\\n        <DualListSelectorPane\\n          title=\\\"Chosen\\\"\\n          status={`${chosenOptions.filter(x => x.selected && x.isVisible).length} of ${chosenOptions.filter(x => x.isVisible).length} options selected`}\\n          isChosen\\n        >\\n          <Droppable hasNoWrapper>\\n            <DualListSelectorList>\\n            {chosenOptions.map((option, index) => {\\n              return option.isVisible ? (\\n                <Draggable key={index} hasNoWrapper>\\n                  <DualListSelectorListItem\\n                    isSelected={option.selected}\\n                    id={`composable-chosen-option-${index}`}\\n                    onOptionSelect={(e) => onOptionSelect(e, index, true)}\\n                    isDraggable\\n                  >\\n                    {option.text}\\n                  </DualListSelectorListItem>\\n                </Draggable>\\n              ) : null;\\n            })}\\n            </DualListSelectorList>\\n          </Droppable>\\n        </DualListSelectorPane>\\n      </DragDrop>\\n    </DualListSelector>\\n  );\\n}\",\n      \"title\": \"Reordering lists using drag and drop\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"To make a pane able to be reordered:\"), /*#__PURE__*/React.createElement(\"ul\", {\n      \"className\": \"ws-ul\"\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"wrap the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"DualListSelectorPane\"), \" in a \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"DragDrop\"), \" component\"), /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"wrap the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"DualListSelectorList\"), \" in a \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"Droppable\"), \" component\"), /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"wrap the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"DualListSelectorListItem\"), \" components in a \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"Draggable\"), \" component\"), /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"define an \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"onDrop\"), \" callback which reorders the sortable options.\", /*#__PURE__*/React.createElement(\"ul\", {\n      \"className\": \"ws-ul\"\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"The \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"onDrop\"), \" function provides the starting location and destination location for a dragged item. It should return\\ntrue to enable the 'drop' animation in the new location and false to enable the 'drop' animation back to the item's\\nold position.\"), /*#__PURE__*/React.createElement(\"li\", {\n      \"className\": \"ws-li\"\n    }, \"define an \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"onDrag\"), \" callback which ensures that the drag event will not cross hairs with the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"onOptionSelect\"), \" click\\nevent set on the option. Note: the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"ignoreNextOptionSelect\"), \" state value is used to prevent selection while dragging.\")))));\n  },\n  'Composable dual list selector tree': function ComposableDualListSelectorTree(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  DualListSelector,\\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n  DualListSelectorTree,\\n  DualListSelectorTreeItemData,\\n  SearchInput\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\ninterface FoodNode {\\n  id: string;\\n  text: string;\\n  children?: FoodNode[];\\n}\\n\\ninterface ExampleProps {\\n  data: FoodNode[];\\n}\\n\\nexport const ComposableDualListSelectorTree: React.FunctionComponent<ExampleProps> = ({ data }: ExampleProps) => {\\n  const [checkedLeafIds, setCheckedLeafIds] = React.useState<string[]>([]);\\n  const [chosenLeafIds, setChosenLeafIds] = React.useState<string[]>(['beans', 'beef', 'chicken', 'tofu']);\\n  const [chosenFilter, setChosenFilter] = React.useState<string>('');\\n  const [availableFilter, setAvailableFilter] = React.useState<string>('');\\n  let hiddenChosen: string[] = [];\\n  let hiddenAvailable: string[] = [];\\n\\n  // helper function to build memoized lists\\n  const buildTextById = (node: FoodNode): { [key: string]: string } => {\\n    let textById = {};\\n    if (!node) {\\n      return textById;\\n    }\\n    textById[node.id] = node.text;\\n    if (node.children) {\\n      node.children.forEach(child => {\\n        textById = { ...textById, ...buildTextById(child) };\\n      });\\n    }\\n    return textById;\\n  };\\n\\n  // helper function to build memoized lists\\n  const getDescendantLeafIds = (node: FoodNode): string[] => {\\n    if (!node.children || !node.children.length) {\\n      return [node.id];\\n    } else {\\n      let childrenIds = [];\\n      node.children.forEach(child => {\\n        childrenIds = [...childrenIds, ...getDescendantLeafIds(child)];\\n      });\\n      return childrenIds;\\n    }\\n  };\\n\\n  // helper function to build memoized lists\\n  const getLeavesById = (node: FoodNode): { [key: string]: string[] } => {\\n    let leavesById = {};\\n    if (!node.children || !node.children.length) {\\n      leavesById[node.id] = [node.id];\\n    } else {\\n      node.children.forEach(child => {\\n        leavesById[node.id] = getDescendantLeafIds(node);\\n        leavesById = { ...leavesById, ...getLeavesById(child) };\\n      });\\n    }\\n    return leavesById;\\n  };\\n\\n  // Builds a map of child leaf nodes by node id - memoized so that it only rebuilds the list if the data changes.\\n  const { memoizedLeavesById, memoizedAllLeaves, memoizedNodeText } = React.useMemo(() => {\\n    let leavesById = {};\\n    let allLeaves = [];\\n    let nodeTexts = {};\\n    data.forEach(foodNode => {\\n      nodeTexts = { ...nodeTexts, ...buildTextById(foodNode) };\\n      leavesById = { ...leavesById, ...getLeavesById(foodNode) };\\n      allLeaves = [...allLeaves, ...getDescendantLeafIds(foodNode)];\\n    });\\n    return {\\n      memoizedLeavesById: leavesById,\\n      memoizedAllLeaves: allLeaves,\\n      memoizedNodeText: nodeTexts\\n    };\\n  }, [data]);\\n\\n  const moveChecked = (toChosen: boolean) => {\\n    setChosenLeafIds(\\n      prevChosenIds =>\\n        toChosen\\n          ? [...prevChosenIds, ...checkedLeafIds] // add checked ids to chosen list\\n          : [...prevChosenIds.filter(x => !checkedLeafIds.includes(x))] // remove checked ids from chosen list\\n    );\\n\\n    // uncheck checked ids that just moved\\n    setCheckedLeafIds(prevChecked =>\\n      toChosen\\n        ? [...prevChecked.filter(x => chosenLeafIds.includes(x))]\\n        : [...prevChecked.filter(x => !chosenLeafIds.includes(x))]\\n    );\\n  };\\n\\n  const moveAll = (toChosen: boolean) => {\\n    if (toChosen) {\\n      setChosenLeafIds(memoizedAllLeaves);\\n    } else {\\n      setChosenLeafIds([]);\\n    }\\n  };\\n\\n  const areAllDescendantsSelected = (node: FoodNode, isChosen: boolean) =>\\n    memoizedLeavesById[node.id].every(\\n      id => checkedLeafIds.includes(id) && (isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id))\\n    );\\n  const areSomeDescendantsSelected = (node: FoodNode, isChosen: boolean) =>\\n    memoizedLeavesById[node.id].some(\\n      id => checkedLeafIds.includes(id) && (isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id))\\n    );\\n\\n  const isNodeChecked = (node: FoodNode, isChosen: boolean) => {\\n    if (areAllDescendantsSelected(node, isChosen)) {\\n      return true;\\n    }\\n    if (areSomeDescendantsSelected(node, isChosen)) {\\n      return null;\\n    }\\n    return false;\\n  };\\n\\n  const onOptionCheck = (\\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n    isChecked: boolean,\\n    node: DualListSelectorTreeItemData,\\n    isChosen: boolean\\n  ) => {\\n    const nodeIdsToCheck = memoizedLeavesById[node.id].filter(id =>\\n      isChosen\\n        ? chosenLeafIds.includes(id) && !hiddenChosen.includes(id)\\n        : !chosenLeafIds.includes(id) && !hiddenAvailable.includes(id)\\n    );\\n    if (isChosen) {\\n      hiddenChosen = [];\\n    } else {\\n      hiddenAvailable = [];\\n    }\\n    setCheckedLeafIds(prevChecked => {\\n      const otherCheckedNodeNames = prevChecked.filter(id => !nodeIdsToCheck.includes(id));\\n      return !isChecked ? otherCheckedNodeNames : [...otherCheckedNodeNames, ...nodeIdsToCheck];\\n    });\\n  };\\n\\n  // builds a search input - used in each dual list selector pane\\n  const buildSearchInput = (isChosen: boolean) => {\\n    const onChange = value => (isChosen ? setChosenFilter(value) : setAvailableFilter(value));\\n\\n    return (\\n      <SearchInput value={isChosen ? chosenFilter : availableFilter} onChange={onChange} onClear={() => onChange('')} />\\n    );\\n  };\\n\\n  // Builds the DualListSelectorTreeItems from the FoodNodes\\n  const buildOptions = (\\n    isChosen: boolean,\\n    [node, ...remainingNodes]: FoodNode[],\\n    hasParentMatch: boolean\\n  ): DualListSelectorTreeItemData[] => {\\n    if (!node) {\\n      return [];\\n    }\\n\\n    const isChecked = isNodeChecked(node, isChosen);\\n\\n    const filterValue = isChosen ? chosenFilter : availableFilter;\\n    const descendentLeafIds = memoizedLeavesById[node.id];\\n    const descendentsOnThisPane = isChosen\\n      ? descendentLeafIds.filter(id => chosenLeafIds.includes(id))\\n      : descendentLeafIds.filter(id => !chosenLeafIds.includes(id));\\n\\n    const hasMatchingChildren =\\n      filterValue && descendentsOnThisPane.some(id => memoizedNodeText[id].includes(filterValue));\\n    const isFilterMatch = filterValue && node.text.includes(filterValue) && descendentsOnThisPane.length > 0;\\n\\n    // A node is displayed if either of the following is true:\\n    //   - There is no filter value and this node or its descendents belong on this pane\\n    //   - There is a filter value and this node or one of this node's descendents or ancestors match on this pane\\n    const isDisplayed =\\n      (!filterValue && descendentsOnThisPane.length > 0) ||\\n      hasMatchingChildren ||\\n      (hasParentMatch && descendentsOnThisPane.length > 0) ||\\n      isFilterMatch;\\n\\n    if (!isDisplayed) {\\n      if (isChosen) {\\n        hiddenChosen.push(node.id);\\n      } else {\\n        hiddenAvailable.push(node.id);\\n      }\\n    }\\n\\n    return [\\n      ...(isDisplayed\\n        ? [\\n            {\\n              id: node.id,\\n              text: node.text,\\n              isChecked,\\n              checkProps: { 'aria-label': `Select ${node.text}` },\\n              hasBadge: node.children && node.children.length > 0,\\n              badgeProps: { isRead: true },\\n              defaultExpanded: isChosen ? !!chosenFilter : !!availableFilter,\\n              children: node.children\\n                ? buildOptions(isChosen, node.children, isFilterMatch || hasParentMatch)\\n                : undefined\\n            }\\n          ]\\n        : []),\\n      ...(!isDisplayed && node.children && node.children.length\\n        ? buildOptions(isChosen, node.children, hasParentMatch)\\n        : []),\\n      ...(remainingNodes ? buildOptions(isChosen, remainingNodes, hasParentMatch) : [])\\n    ];\\n  };\\n\\n  const buildPane = (isChosen: boolean): React.ReactNode => {\\n    const options: DualListSelectorTreeItemData[] = buildOptions(isChosen, data, false);\\n    const numOptions = isChosen ? chosenLeafIds.length : memoizedAllLeaves.length - chosenLeafIds.length;\\n    const numSelected = checkedLeafIds.filter(id =>\\n      isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id)\\n    ).length;\\n    const status = `${numSelected} of ${numOptions} options selected`;\\n    return (\\n      <DualListSelectorPane\\n        title={isChosen ? 'Chosen' : 'Available'}\\n        status={status}\\n        searchInput={buildSearchInput(isChosen)}\\n        isChosen={isChosen}\\n      >\\n        <DualListSelectorList>\\n          <DualListSelectorTree\\n            data={options}\\n            onOptionCheck={(e, isChecked, itemData) => onOptionCheck(e, isChecked, itemData, isChosen)}\\n          />\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n    );\\n  };\\n\\n  return (\\n    <DualListSelector isTree>\\n      {buildPane(false)}\\n      <DualListSelectorControlsWrapper aria-label=\\\"Selector controls\\\">\\n        <DualListSelectorControl\\n          isDisabled={!checkedLeafIds.filter(x => !chosenLeafIds.includes(x)).length}\\n          onClick={() => moveChecked(true)}\\n          aria-label=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenLeafIds.length === memoizedAllLeaves.length}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenLeafIds.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveChecked(false)}\\n          isDisabled={!checkedLeafIds.filter(x => !!chosenLeafIds.includes(x)).length}\\n          aria-label=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      {buildPane(true)}\\n    </DualListSelector>\\n  );\\n};\\n\\nexport const ComposableDualListSelectorTreeExample: React.FunctionComponent = () => (\\n  <ComposableDualListSelectorTree\\n    data={[\\n      {\\n        id: 'fruits',\\n        text: 'Fruits',\\n        children: [\\n          { id: 'apple', text: 'Apple' },\\n          {\\n            id: 'berries',\\n            text: 'Berries',\\n            children: [\\n              { id: 'blueberry', text: 'Blueberry' },\\n              { id: 'strawberry', text: 'Strawberry' }\\n            ]\\n          },\\n          { id: 'banana', text: 'Banana' }\\n        ]\\n      },\\n      { id: 'bread', text: 'Bread' },\\n      {\\n        id: 'vegetables',\\n        text: 'Vegetables',\\n        children: [\\n          { id: 'broccoli', text: 'Broccoli' },\\n          { id: 'cauliflower', text: 'Cauliflower' }\\n        ]\\n      },\\n      {\\n        id: 'proteins',\\n        text: 'Proteins',\\n        children: [\\n          { id: 'beans', text: 'Beans' },\\n          {\\n            id: 'meats',\\n            text: 'Meats',\\n            children: [\\n              {\\n                id: 'beef',\\n                text: 'Beef'\\n              },\\n              {\\n                id: 'chicken',\\n                text: 'Chicken'\\n              }\\n            ]\\n          },\\n          { id: 'tofu', text: 'Tofu' }\\n        ]\\n      }\\n    ]}\\n  />\\n);\\n\",\n      \"title\": \"Composable dual list selector tree\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Basic with tooltips\"]), React.createElement(pageData.examples[\"Basic with search\"]), React.createElement(pageData.examples[\"Using more complex options with actions\"]), React.createElement(pageData.examples[\"Expandable options\"]), React.createElement(pageData.examples[\"Composable dual list selector\"]), React.createElement(pageData.examples[\"Reordering lists using drag and drop\"]), React.createElement(pageData.examples[\"Composable dual list selector tree\"]));\n};\n\nComponent.displayName = 'ComponentsDualListSelectorReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","AngleDoubleLeftIcon","AngleLeftIcon","AngleDoubleRightIcon","AngleRightIcon","PficonSortCommonAscIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/dual-list-selector/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\nconst pageData = {\n  \"id\": \"Dual list selector\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/dual-list-selector/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/DualListSelector/examples/DualListSelector.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"DualListSelector\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"addAll\",\n          \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n          \"description\": \"Optional callback for the dynamically built add all button\"\n        },\n        {\n          \"name\": \"addAllAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dynamically built add all button\",\n          \"defaultValue\": \"'Add all'\"\n        },\n        {\n          \"name\": \"addAllTooltip\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Tooltip content for the dynamically built add all button\"\n        },\n        {\n          \"name\": \"addAllTooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additonal tooltip properties for the dynamically built add all tooltip\"\n        },\n        {\n          \"name\": \"addSelected\",\n          \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n          \"description\": \"Optional callback for the dynamically built add selected button\"\n        },\n        {\n          \"name\": \"addSelectedAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dynamically built add selected button\",\n          \"defaultValue\": \"'Add selected'\"\n        },\n        {\n          \"name\": \"addSelectedTooltip\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Tooltip content for the dynamically built add selected button\"\n        },\n        {\n          \"name\": \"addSelectedTooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additonal tooltip properties for the dynamically built add selected tooltip\"\n        },\n        {\n          \"name\": \"availableOptions\",\n          \"type\": \"React.ReactNode[] | DualListSelectorTreeItemData[]\",\n          \"description\": \"Options to display in the dynamically built available options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.\",\n          \"defaultValue\": \"[]\"\n        },\n        {\n          \"name\": \"availableOptionsActions\",\n          \"type\": \"React.ReactNode[]\",\n          \"description\": \"Actions to be displayed above the dynamically built available options pane.\"\n        },\n        {\n          \"name\": \"availableOptionsSearchAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the search input on the dynamically built available options pane.\",\n          \"defaultValue\": \"'Available search input'\"\n        },\n        {\n          \"name\": \"availableOptionsStatus\",\n          \"type\": \"string\",\n          \"description\": \"Status message to display above the dynamically built available options pane.\"\n        },\n        {\n          \"name\": \"availableOptionsTitle\",\n          \"type\": \"string\",\n          \"description\": \"Title applied to the dynamically built available options pane.\",\n          \"defaultValue\": \"'Available options'\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be rendered in the dual list selector. Panes & controls will not be built dynamically when children are provided.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"chosenOptions\",\n          \"type\": \"React.ReactNode[] | DualListSelectorTreeItemData[]\",\n          \"description\": \"Options to display in the dynamically built chosen options pane. When using trees, the options should be in the DualListSelectorTreeItemData[] format.\",\n          \"defaultValue\": \"[]\"\n        },\n        {\n          \"name\": \"chosenOptionsActions\",\n          \"type\": \"React.ReactNode[]\",\n          \"description\": \"Actions to be displayed above the dynamically built chosen options pane.\"\n        },\n        {\n          \"name\": \"chosenOptionsSearchAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the search input on the dynamically built chosen options pane.\",\n          \"defaultValue\": \"'Chosen search input'\"\n        },\n        {\n          \"name\": \"chosenOptionsStatus\",\n          \"type\": \"string\",\n          \"description\": \"Status message to display above the dynamically built chosen options pane.\"\n        },\n        {\n          \"name\": \"chosenOptionsTitle\",\n          \"type\": \"string\",\n          \"description\": \"Title applied to the dynamically built chosen options pane.\",\n          \"defaultValue\": \"'Chosen options'\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the dual list selector.\"\n        },\n        {\n          \"name\": \"controlsAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dynamically built controls between the two panes.\",\n          \"defaultValue\": \"'Selector controls'\"\n        },\n        {\n          \"name\": \"filterOption\",\n          \"type\": \"(option: React.ReactNode, input: string) => boolean\",\n          \"description\": \"Optional filter function for custom filtering based on search string. Used with a dynamically built search input.\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"Id of the dual list selector.\",\n          \"defaultValue\": \"getUniqueId('dual-list-selector')\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the dual list selector is in a disabled state\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isSearchable\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating a search bar should be included above both the dynamically built available and chosen panes.\"\n        },\n        {\n          \"name\": \"isTree\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the dual list selector uses trees instead of simple lists\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onAvailableOptionsSearchInputChanged\",\n          \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n          \"description\": \"A callback for when the search input value for the dynamically built available options changes.\"\n        },\n        {\n          \"name\": \"onChosenOptionsSearchInputChanged\",\n          \"type\": \"(value: string, event: React.FormEvent<HTMLInputElement>) => void\",\n          \"description\": \"A callback for when the search input value for the dynamically built chosen options changes.\"\n        },\n        {\n          \"name\": \"onListChange\",\n          \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n          \"description\": \"Callback fired every time dynamically built options are chosen or removed\"\n        },\n        {\n          \"name\": \"onOptionCheck\",\n          \"type\": \"(\\n  e: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n  checked: boolean,\\n  checkedId: string,\\n  newCheckedItems: string[]\\n) => void\",\n          \"description\": \"Optional callback fired when a dynamically built option is checked\"\n        },\n        {\n          \"name\": \"onOptionSelect\",\n          \"type\": \"(\\n  e: React.MouseEvent | React.ChangeEvent | React.KeyboardEvent,\\n  index: number,\\n  isChosen: boolean,\\n  id: string,\\n  itemData: any,\\n  parentData: any\\n) => void\",\n          \"description\": \"Optional callback fired when a dynamically built option is selected\"\n        },\n        {\n          \"name\": \"removeAll\",\n          \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n          \"description\": \"Optional callback for the dynamically built remove all button\"\n        },\n        {\n          \"name\": \"removeAllAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dynamically built remove all button\",\n          \"defaultValue\": \"'Remove all'\"\n        },\n        {\n          \"name\": \"removeAllTooltip\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Tooltip content for the dynamically built remove all button\"\n        },\n        {\n          \"name\": \"removeAllTooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additonal tooltip properties for the dynamically built remove all tooltip\"\n        },\n        {\n          \"name\": \"removeSelected\",\n          \"type\": \"(newAvailableOptions: React.ReactNode[], newChosenOptions: React.ReactNode[]) => void\",\n          \"description\": \"Optional callback for the dynamically built remove selected button\"\n        },\n        {\n          \"name\": \"removeSelectedAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dynamically built remove selected button\",\n          \"defaultValue\": \"'Remove selected'\"\n        },\n        {\n          \"name\": \"removeSelectedTooltip\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Tooltip content for the dynamically built remove selected button\"\n        },\n        {\n          \"name\": \"removeSelectedTooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additonal tooltip properties for the dynamically built remove selected tooltip\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DualListSelectorPane\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"actions\",\n          \"type\": \"React.ReactNode[]\",\n          \"description\": \"Actions to place above the pane.\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"A dual list selector list or dual list selector tree to be rendered in the pane.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the dual list selector pane.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"Id of the pane.\",\n          \"defaultValue\": \"getUniqueId('dual-list-selector-pane')\"\n        },\n        {\n          \"name\": \"isChosen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if this pane is the chosen pane.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating whether the component is disabled.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onSearch\",\n          \"type\": \"(event: React.ChangeEvent<HTMLInputElement>) => void\",\n          \"description\": \"Callback for search input. To be used when isSearchable is true.\"\n        },\n        {\n          \"name\": \"searchInput\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"A search input placed above the list at the top of the pane, before actions.\"\n        },\n        {\n          \"name\": \"status\",\n          \"type\": \"string\",\n          \"description\": \"Status to display above the pane.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"title\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Title of the pane.\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DualListSelectorControl\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dual list selector control.\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be rendered in the dual list selector control.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the dual list selector control.\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating the control is disabled.\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => void\",\n          \"description\": \"Callback fired when dual list selector control is selected.\"\n        },\n        {\n          \"name\": \"tooltipContent\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be displayed in a tooltip on hover of control.\"\n        },\n        {\n          \"name\": \"tooltipProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional tooltip properties passed to the tooltip.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DualListSelectorControlsWrapper\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the dual list selector controls wrapper.\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Anything that can be rendered inside of the wrapper.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the wrapper.\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DualListSelectorTree\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"data\",\n          \"type\": \"DualListSelectorTreeItemData[] | (() => DualListSelectorTreeItemData[])\",\n          \"description\": \"Data of the tree view\",\n          \"required\": true\n        },\n        {\n          \"name\": \"defaultAllExpanded\",\n          \"type\": \"boolean\",\n          \"description\": \"Sets the default expanded behavior\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"hasBadges\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if all options should have badges\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"ID of the tree view\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Callback fired when an option is checked\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onOptionCheck\",\n          \"type\": \"(\\n  event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n  isChecked: boolean,\\n  itemData: DualListSelectorTreeItemData\\n) => void\",\n          \"description\": \"\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DualListSelectorTreeItemData\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"badgeProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional properties to pass to the option badge\"\n        },\n        {\n          \"name\": \"checkProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional properties to pass to the option checkbox\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"DualListSelectorTreeItemData[]\",\n          \"description\": \"Content rendered inside the dual list selector.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes applied to the dual list selector.\"\n        },\n        {\n          \"name\": \"defaultExpanded\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating this option is expanded by default.\"\n        },\n        {\n          \"name\": \"hasBadge\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating this option has a badge\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"ID of the option\",\n          \"required\": true\n        },\n        {\n          \"name\": \"isChecked\",\n          \"type\": \"boolean\",\n          \"description\": \"Checked state of the option\",\n          \"required\": true\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating whether the component is disabled.\"\n        },\n        {\n          \"name\": \"onOptionCheck\",\n          \"type\": \"(\\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n    isChecked: boolean,\\n    isChosen: boolean,\\n    itemData: DualListSelectorTreeItemData\\n  ) => void\",\n          \"description\": \"Callback fired when an option is checked\"\n        },\n        {\n          \"name\": \"parentId\",\n          \"type\": \"string\",\n          \"description\": \"Parent id of an option\"\n        },\n        {\n          \"name\": \"text\",\n          \"type\": \"string\",\n          \"description\": \"Text of the option\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"beta\": true,\n  \"cssPrefix\": [\n    \"pf-c-dual-list-selector\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Basic with tooltips\",\n    \"Basic with search\",\n    \"Using more complex options with actions\",\n    \"Expandable options\",\n    \"Composable dual list selector\",\n    \"Reordering lists using drag and drop\",\n    \"Composable dual list selector tree\"\n  ]\n};\npageData.liveContext = {\n  AngleDoubleLeftIcon,\n  AngleLeftIcon,\n  AngleDoubleRightIcon,\n  AngleRightIcon,\n  PficonSortCommonAscIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelector\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Basic with tooltips': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        addAllTooltip=\\\"Add all options\\\"\\n        addAllTooltipProps={{ position: 'top' }}\\n        addSelectedTooltip=\\\"Add selected options\\\"\\n        addSelectedTooltipProps={{ position: 'right' }}\\n        removeSelectedTooltip=\\\"Remove selected options\\\"\\n        removeSelectedTooltipProps={{ position: 'left' }}\\n        removeAllTooltip=\\\"Remove all options\\\"\\n        removeAllTooltipProps={{ position: 'bottom' }}\\n        id=\\\"basicSelector\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Basic with tooltips\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Basic with search': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass BasicDualListSelectorWithSearch extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: ['Option 1', 'Option 2', 'Option 3', 'Option 4'],\\n      chosenOptions: []\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions.sort(),\\n        chosenOptions: newChosenOptions.sort()\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        isSearchable\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelectorWithSearch\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Basic with search\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Using more complex options with actions': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, ButtonVariant, Checkbox, Dropdown, DropdownItem, DualListSelector, KebabToggle } from '@patternfly/react-core';\\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\\n\\nclass ComplexDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      availableOptions: [<span>Option 1</span>, <span>Option 3</span>, <span>Option 4</span>, <span>Option 2</span>],\\n      chosenOptions: [],\\n      isAvailableKebabOpen: false,\\n      isChosenKebabOpen: false,\\n      isDisabled: false\\n    };\\n\\n    this.onSort = panel => {\\n      if (panel === 'available') {\\n        this.setState(prevState => {\\n          const available = prevState.availableOptions.sort((a, b) => {\\n            let returnValue = 0;\\n            if (a.props.children > b.props.children) returnValue = 1;\\n            if (a.props.children < b.props.children) returnValue = -1;\\n            return returnValue;\\n          });\\n          return {\\n            availableOptions: available\\n          };\\n        });\\n      }\\n\\n      if (panel === 'chosen') {\\n        this.setState(prevState => {\\n          const chosen = prevState.chosenOptions.sort((a, b) => {\\n            let returnValue = 0;\\n            if (a.props.children > b.props.children) returnValue = 1;\\n            if (a.props.children < b.props.children) returnValue = -1;\\n            return returnValue;\\n          });\\n          return {\\n            chosenOptions: chosen\\n          };\\n        });\\n      }\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions,\\n        chosenOptions: newChosenOptions\\n      });\\n    };\\n\\n    this.onToggle = (isOpen, pane) => {\\n      this.setState(prevState => {\\n        return {\\n          isAvailableKebabOpen: pane === 'available' ? isOpen : prevState.isAvailableKebabOpen,\\n          isChosenKebabOpen: pane === 'chosen' ? isOpen : prevState.isChosenKebabOpen\\n        };\\n      });\\n    };\\n\\n    this.filterOption = (option, input) => {\\n      return option.props.children.includes(input);\\n    };\\n  }\\n\\n  render() {\\n    const dropdownItems = [\\n      <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n      <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n        Action\\n      </DropdownItem>,\\n      <DropdownItem key=\\\"second action\\\" component=\\\"button\\\">\\n        Second Action\\n      </DropdownItem>\\n    ];\\n\\n    const availableOptionsActions = [\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={() => this.onSort('available')}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"availableSortButton\\\"\\n        isDisabled={this.state.isDisabled}\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>,\\n      <Dropdown\\n        toggle={<KebabToggle isDisabled={this.state.isDisabled} onToggle={isOpen => this.onToggle(isOpen, 'available')} id=\\\"toggle-id-1\\\" />}\\n        isOpen={this.state.isAvailableKebabOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n        key=\\\"availableDropdown\\\"\\n      />\\n    ];\\n\\n    const chosenOptionsActions = [\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={() => this.onSort('chosen')}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"chosenSortButton\\\"\\n        isDisabled={this.state.isDisabled}\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>,\\n      <Dropdown\\n        toggle={<KebabToggle isDisabled={this.state.isDisabled} onToggle={isOpen => this.onToggle(isOpen, 'chosen')} id=\\\"toggle-id-2\\\" />}\\n        isOpen={this.state.isChosenKebabOpen}\\n        isPlain\\n        dropdownItems={dropdownItems}\\n        key=\\\"chosenDropdown\\\"\\n      />\\n    ];\\n\\n    return (\\n      <React.Fragment>\\n          <DualListSelector\\n            isSearchable\\n            availableOptions={this.state.availableOptions}\\n            availableOptionsActions={availableOptionsActions}\\n            chosenOptions={this.state.chosenOptions}\\n            chosenOptionsActions={chosenOptionsActions}\\n            addAll={this.onListChange}\\n            removeAll={this.onListChange}\\n            addSelected={this.onListChange}\\n            removeSelected={this.onListChange}\\n            filterOption={this.filterOption}\\n            isDisabled={this.state.isDisabled}\\n            id=\\\"withActions\\\"\\n          />\\n        <Checkbox\\n          key=\\\"isDisabled\\\"\\n          id=\\\"isDisabled\\\"\\n          label=\\\"isDisabled\\\"\\n          aria-label=\\\"isDisabled\\\"\\n          isChecked={this.state.isDisabled}\\n          onChange={() =>\\n            this.setState({\\n              isDisabled: !this.state.isDisabled\\n            })\\n          }\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Using more complex options with actions\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Expandable options': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DualListSelector } from '@patternfly/react-core';\\n\\nclass TreeDualListSelector extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      chosenOptions: [\\n        {\\n          id: 'CF1',\\n          text: 'Chosen Folder 1',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Chosen Folder 1' },\\n          hasBadge: true,\\n          badgeProps: { isRead: true },\\n          children: [\\n            { id: 'CO1', text: 'Chosen Option 1', isChecked: false, checkProps: { 'aria-label': 'Chosen Option 1' } },\\n            {\\n              id: 'CF1A',\\n              text: 'Chosen Folder 1A',\\n              isChecked: false,\\n              checkProps: { 'aria-label': 'Chosen Folder 1A' },\\n              children: [\\n                {\\n                  id: 'CO2',\\n                  text: 'Chosen Option 2',\\n                  isChecked: false,\\n                  checkProps: { 'aria-label': 'Chosen Option 2' }\\n                },\\n                {\\n                  id: 'CO3',\\n                  text: 'Chosen Option 3',\\n                  isChecked: false,\\n                  checkProps: { 'aria-label': 'Chosen Option 3' }\\n                }\\n              ]\\n            },\\n            { id: 'CO4', text: 'Chosen Option 4', isChecked: false, checkProps: { 'aria-label': 'Chosen Option 4' } }\\n          ]\\n        }\\n      ],\\n      availableOptions: [\\n        {\\n          id: 'F1',\\n          text: 'Folder 1',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Folder 1' },\\n          hasBadge: true,\\n          badgeProps: { isRead: true },\\n          children: [\\n            { id: 'O1', text: 'Option 1', isChecked: false, checkProps: { 'aria-label': 'Option 1' } },\\n            {\\n              id: 'F1A',\\n              text: 'Folder 1A',\\n              isChecked: false,\\n              checkProps: { 'aria-label': 'Folder 1A' },\\n              children: [\\n                { id: 'O2', text: 'Option 2', isChecked: false, checkProps: { 'aria-label': 'Option 2' } },\\n                { id: 'O3', text: 'Option 3', isChecked: false, checkProps: { 'aria-label': 'Option 3' } }\\n              ]\\n            },\\n            { id: 'O4', text: 'Option 4', isChecked: false, checkProps: { 'aria-label': 'Option 4' } }\\n          ]\\n        },\\n        { id: 'O5', text: 'Option 5', isChecked: false, checkProps: { 'aria-label': 'Option 5' } },\\n        {\\n          id: 'F2',\\n          text: 'Folder 2',\\n          isChecked: false,\\n          checkProps: { 'aria-label': 'Folder 2' },\\n          children: [\\n            { id: 'O6', text: 'Option 6', isChecked: false, checkProps: { 'aria-label': 'Option 6' } },\\n            { id: 'O7', text: 'Option 5', isChecked: false, checkProps: { 'aria-label': 'Option 5 duplicate' } }\\n          ]\\n        }\\n      ]\\n    };\\n\\n    this.onListChange = (newAvailableOptions, newChosenOptions) => {\\n      this.setState({\\n        availableOptions: newAvailableOptions,\\n        chosenOptions: newChosenOptions\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <DualListSelector\\n        availableOptions={this.state.availableOptions}\\n        chosenOptions={this.state.chosenOptions}\\n        onListChange={this.onListChange}\\n        id=\\\"basicSelector\\\"\\n        isSearchable\\n        isTree\\n      />\\n    );\\n  }\\n}\",\"title\":\"Expandable options\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Composable dual list selector': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { \\n  Button,\\n  ButtonVariant,\\n  DualListSelector, \\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorListItem,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n  SearchInput\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\nimport PficonSortCommonAscIcon from '@patternfly/react-icons/dist/esm/icons/pficon-sort-common-asc-icon';\\n\\nconst ComposableDualListSelector = () => {\\n  const [availableOptions, setAvailableOptions] = React.useState([\\n    { text: 'Apple', selected: false, isVisible: true },\\n    { text: 'Banana', selected: false, isVisible: true },\\n    { text: 'Pineapple', selected: false, isVisible: true },\\n    { text: 'Orange', selected: false, isVisible: true },\\n    { text: 'Grape', selected: false, isVisible: true },\\n    { text: 'Peach', selected: false, isVisible: true },\\n    { text: 'Strawberry', selected: false, isVisible: true }\\n    ]);\\n  const [chosenOptions, setChosenOptions] = React.useState([]);\\n  const [availableFilter, setAvailableFilter] = React.useState('');\\n  const [chosenFilter, setChosenFilter] = React.useState('');\\n\\n  // callback for moving selected options between lists\\n  const moveSelected = (fromAvailable) => {\\n    const sourceOptions = fromAvailable ? availableOptions : chosenOptions;\\n    const destinationOptions = fromAvailable ? chosenOptions : availableOptions;\\n    for (let i = 0; i < sourceOptions.length; i++) {\\n      const option = sourceOptions[i];\\n      if (option.selected && option.isVisible) {\\n        sourceOptions.splice(i, 1);\\n        destinationOptions.push(option);\\n        option.selected = false;\\n        i--;\\n      }\\n    }\\n    if (fromAvailable) {\\n      setAvailableOptions([...sourceOptions]);\\n      setChosenOptions([...destinationOptions]);\\n    } else {\\n      setChosenOptions([...sourceOptions]);\\n      setAvailableOptions([...destinationOptions]);\\n    }\\n  };\\n  \\n  // callback for moving all options between lists\\n  const moveAll = (fromAvailable) => {\\n    if (fromAvailable) {\\n      setChosenOptions([...availableOptions.filter(x => x.isVisible), ...chosenOptions]);\\n      setAvailableOptions([...availableOptions.filter(x => !x.isVisible)]);\\n    } else {\\n      setAvailableOptions([...chosenOptions.filter(x => x.isVisible), ...availableOptions]);\\n      setChosenOptions([...chosenOptions.filter(x => !x.isVisible)]);\\n    }\\n  };\\n  \\n  // callback when option is selected\\n  const onOptionSelect = (event, index, isChosen) => {\\n    if (isChosen) {\\n      const newChosen = [...chosenOptions];\\n      newChosen[index].selected = !chosenOptions[index].selected;\\n      setChosenOptions(newChosen);\\n    } else {\\n      const newAvailable = [...availableOptions];\\n      newAvailable[index].selected = !availableOptions[index].selected;\\n      setAvailableOptions(newAvailable);\\n    }\\n  };\\n  \\n  // builds a search input - used in each dual list selector pane\\n  const buildSearchInput = (isAvailable) => {\\n    const onChange = (value) => {\\n      isAvailable ? setAvailableFilter(value) : setChosenFilter(value);\\n      const toFilter = isAvailable ? [...availableOptions] : [...chosenOptions];\\n      toFilter.forEach((option) => {\\n        option.isVisible = value === '' || option.text.toLowerCase().includes(value.toLowerCase());\\n      })\\n    };\\n    \\n    return (\\n      <SearchInput\\n        value={isAvailable ? availableFilter : chosenFilter}\\n        onChange={onChange}\\n        onClear={() => onChange('')}\\n      />\\n    );\\n  };\\n  \\n  // builds a sort control - passed to both dual list selector panes\\n  const buildSort = (isAvailable) => {\\n    const onSort = () => {\\n      const toSort = isAvailable ? [...availableOptions] : [...chosenOptions];\\n      toSort.sort((a,b) => {\\n        if (a.text > b.text) return 1;\\n        if (a.text < b.text) return -1;\\n        return 0;\\n      });\\n      if (isAvailable) {\\n        setAvailableOptions(toSort);\\n      } else {\\n        setChosenOptions(toSort);\\n      }\\n    };\\n    \\n    return (\\n      <Button\\n        variant={ButtonVariant.plain}\\n        onClick={onSort}\\n        aria-label=\\\"Sort\\\"\\n        key=\\\"sortButton\\\"\\n      >\\n        <PficonSortCommonAscIcon />\\n      </Button>\\n    );\\n  };\\n\\n  return (\\n    <DualListSelector>\\n      <DualListSelectorPane\\n        title=\\\"Available\\\"\\n        status={`${availableOptions.filter(x => x.selected && x.isVisible).length} of ${availableOptions.filter(x => x.isVisible).length} options selected`}\\n        searchInput={buildSearchInput(true)}\\n        actions={[buildSort(true)]}\\n      >\\n        <DualListSelectorList>\\n          {availableOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, false)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n      <DualListSelectorControlsWrapper\\n        aria-label=\\\"Selector controls\\\"\\n      >\\n        <DualListSelectorControl\\n          isDisabled={!availableOptions.some(option => option.selected)}\\n          onClick={() => moveSelected(true)}\\n          aria-label=\\\"Add selected\\\"\\n          tooltipContent=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={availableOptions.length === 0}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n          tooltipContent=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenOptions.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n          tooltipContent=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveSelected(false)}\\n          isDisabled={!chosenOptions.some(option => option.selected)}\\n          aria-label=\\\"Remove selected\\\"\\n          tooltipContent=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      <DualListSelectorPane\\n        title=\\\"Chosen\\\"\\n        status={`${chosenOptions.filter(x => x.selected && x.isVisible).length} of ${chosenOptions.filter(x => x.isVisible).length} options selected`}\\n        searchInput={buildSearchInput(false)}\\n        actions={[buildSort(false)]}\\n        isChosen\\n      >\\n        <DualListSelectorList>\\n          {chosenOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, true)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n    </DualListSelector>\\n  );\\n}\",\"title\":\"Composable dual list selector\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`For more flexibility, a Dual list selector can be built using sub components. When doing so, the intended component\nrelationships are arranged as follows:`}\n      </p>\n      \n      <Example {...{\"code\":\"import React from 'react';\\nimport { DualListSelector, DualListSelectorPane, DualListSelectorList, DualListSelectorListItem, DualListSelectorControlsWrapper, DualListSelectorControl } from '@patternfly/react-core';\\n\\n<DualListSelector>\\n\\n  <DualListSelectorPane>\\n    <DualListSelectorList>\\n      <DualListSelectorListItem/>\\n    </DualListSelectorList>\\n  </DualListSelectorPane>\\n  \\n  <DualListSelectorControlsWrapper>\\n    <DualListSelectorControl/> {/* The standard Dual list selector has 4 controls */}\\n  </DualListSelectorControlsWrapper>\\n  \\n  <DualListSelectorPane isChosen>\\n    <DualListSelectorList>\\n      <DualListSelectorListItem/>\\n    </DualListSelectorList>\\n  </DualListSelectorPane>\\n  \\n</DualListSelector>\",\"lang\":\"js\",\"noLive\":true}}>\n        \n      </Example>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`Note: Keyboard accessibility and screen reader accessibility for the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`DragDrop`}\n        </code>\n        {` component are still in development.`}\n      </p>\n    </Example>,\n  'Reordering lists using drag and drop': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { \\n  DragDrop,\\n  Droppable,\\n  Draggable,\\n  DualListSelector, \\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorListItem,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\nconst ComposableDualListSelector = () => {\\n  const [ignoreNextOptionSelect, setIgnoreNextOptionSelect] = React.useState(false);\\n  const [availableOptions, setAvailableOptions] = React.useState([\\n    { text: 'Apple', selected: false, isVisible: true },\\n    { text: 'Banana', selected: false, isVisible: true },\\n    { text: 'Pineapple', selected: false, isVisible: true }\\n  ]);\\n  const [chosenOptions, setChosenOptions] = React.useState([\\n    { text: 'Orange', selected: false, isVisible: true },\\n    { text: 'Grape', selected: false, isVisible: true },\\n    { text: 'Peach', selected: false, isVisible: true },\\n    { text: 'Strawberry', selected: false, isVisible: true }\\n  ]);\\n\\n  const moveSelected = (fromAvailable) => {\\n    const sourceOptions = fromAvailable ? availableOptions : chosenOptions;\\n    const destinationOptions = fromAvailable ? chosenOptions : availableOptions;\\n    for (let i = 0; i < sourceOptions.length; i++) {\\n      const option = sourceOptions[i];\\n      if (option.selected && option.isVisible) {\\n        sourceOptions.splice(i, 1);\\n        destinationOptions.push(option);\\n        option.selected = false;\\n        i--;\\n      }\\n    }\\n    if (fromAvailable) {\\n      setAvailableOptions([...sourceOptions]);\\n      setChosenOptions([...destinationOptions]);\\n    } else {\\n      setChosenOptions([...sourceOptions]);\\n      setAvailableOptions([...destinationOptions]);\\n    }\\n  };\\n  \\n  const moveAll = (fromAvailable) => {\\n    if (fromAvailable) {\\n      setChosenOptions([...availableOptions.filter(x => x.isVisible), ...chosenOptions]);\\n      setAvailableOptions([...availableOptions.filter(x => !x.isVisible)]);\\n    } else {\\n      setAvailableOptions([...chosenOptions.filter(x => x.isVisible), ...availableOptions]);\\n      setChosenOptions([...chosenOptions.filter(x => !x.isVisible)]);\\n    }\\n  };\\n  \\n  const onOptionSelect = (event, index, isChosen) => {\\n    if (ignoreNextOptionSelect) {\\n      setIgnoreNextOptionSelect(false);\\n      return;\\n    }\\n    if (isChosen) {\\n      const newChosen = [...chosenOptions];\\n      newChosen[index].selected = !chosenOptions[index].selected;\\n      setChosenOptions(newChosen);\\n    } else {\\n      const newAvailable = [...availableOptions];\\n      newAvailable[index].selected = !availableOptions[index].selected;\\n      setAvailableOptions(newAvailable);\\n    }\\n  };\\n  \\n  const onDrop = (source, dest) => {\\n    if (dest){\\n      const newList = [...chosenOptions];\\n      const [removed] = newList.splice(source.index, 1);\\n      newList.splice(dest.index, 0, removed);\\n      setChosenOptions(newList);\\n      return true;\\n    }\\n    return false;\\n  };\\n\\n  return (\\n    <DualListSelector>\\n      <DualListSelectorPane\\n        title=\\\"Available\\\"\\n        status={`${availableOptions.filter(x => x.selected && x.isVisible).length} of ${availableOptions.filter(x => x.isVisible).length} options selected`}\\n      >\\n        <DualListSelectorList>\\n          {availableOptions.map((option, index) => {\\n            return option.isVisible ? (\\n              <DualListSelectorListItem\\n                key={index}\\n                isSelected={option.selected}\\n                id={`composable-available-option-${index}`}\\n                onOptionSelect={(e) => onOptionSelect(e, index, false)}\\n              >\\n                {option.text}\\n              </DualListSelectorListItem>\\n            ) : null;\\n          })}\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n      <DualListSelectorControlsWrapper\\n        aria-label=\\\"Selector controls\\\"\\n      >\\n        <DualListSelectorControl\\n          isDisabled={!availableOptions.some(option => option.selected)}\\n          onClick={() => moveSelected(true)}\\n          aria-label=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={availableOptions.length === 0}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenOptions.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveSelected(false)}\\n          isDisabled={!chosenOptions.some(option => option.selected)}\\n          aria-label=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      <DragDrop onDrag={() => { setIgnoreNextOptionSelect(true); return true; }} onDrop={onDrop}>\\n        <DualListSelectorPane\\n          title=\\\"Chosen\\\"\\n          status={`${chosenOptions.filter(x => x.selected && x.isVisible).length} of ${chosenOptions.filter(x => x.isVisible).length} options selected`}\\n          isChosen\\n        >\\n          <Droppable hasNoWrapper>\\n            <DualListSelectorList>\\n            {chosenOptions.map((option, index) => {\\n              return option.isVisible ? (\\n                <Draggable key={index} hasNoWrapper>\\n                  <DualListSelectorListItem\\n                    isSelected={option.selected}\\n                    id={`composable-chosen-option-${index}`}\\n                    onOptionSelect={(e) => onOptionSelect(e, index, true)}\\n                    isDraggable\\n                  >\\n                    {option.text}\\n                  </DualListSelectorListItem>\\n                </Draggable>\\n              ) : null;\\n            })}\\n            </DualListSelectorList>\\n          </Droppable>\\n        </DualListSelectorPane>\\n      </DragDrop>\\n    </DualListSelector>\\n  );\\n}\",\"title\":\"Reordering lists using drag and drop\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`To make a pane able to be reordered:`}\n      </p>\n      \n      <ul {...{\"className\":\"ws-ul\"}}>\n        \n\n        \n        <li {...{\"className\":\"ws-li\"}}>\n          {`wrap the `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`DualListSelectorPane`}\n          </code>\n          {` in a `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`DragDrop`}\n          </code>\n          {` component`}\n        </li>\n        \n\n        \n        <li {...{\"className\":\"ws-li\"}}>\n          {`wrap the `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`DualListSelectorList`}\n          </code>\n          {` in a `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`Droppable`}\n          </code>\n          {` component`}\n        </li>\n        \n\n        \n        <li {...{\"className\":\"ws-li\"}}>\n          {`wrap the `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`DualListSelectorListItem`}\n          </code>\n          {` components in a `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`Draggable`}\n          </code>\n          {` component`}\n        </li>\n        \n\n        \n        <li {...{\"className\":\"ws-li\"}}>\n          {`define an `}\n          \n          <code {...{\"className\":\"ws-code\"}}>\n            {`onDrop`}\n          </code>\n          {` callback which reorders the sortable options.`}\n          \n\n          \n          <ul {...{\"className\":\"ws-ul\"}}>\n            \n\n            \n            <li {...{\"className\":\"ws-li\"}}>\n              {`The `}\n              \n              <code {...{\"className\":\"ws-code\"}}>\n                {`onDrop`}\n              </code>\n              {` function provides the starting location and destination location for a dragged item. It should return\ntrue to enable the 'drop' animation in the new location and false to enable the 'drop' animation back to the item's\nold position.`}\n            </li>\n            \n\n            \n            <li {...{\"className\":\"ws-li\"}}>\n              {`define an `}\n              \n              <code {...{\"className\":\"ws-code\"}}>\n                {`onDrag`}\n              </code>\n              {` callback which ensures that the drag event will not cross hairs with the `}\n              \n              <code {...{\"className\":\"ws-code\"}}>\n                {`onOptionSelect`}\n              </code>\n              {` click\nevent set on the option. Note: the `}\n              \n              <code {...{\"className\":\"ws-code\"}}>\n                {`ignoreNextOptionSelect`}\n              </code>\n              {` state value is used to prevent selection while dragging.`}\n            </li>\n            \n\n          </ul>\n          \n\n        </li>\n        \n\n      </ul>\n    </Example>,\n  'Composable dual list selector tree': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  DualListSelector,\\n  DualListSelectorPane,\\n  DualListSelectorList,\\n  DualListSelectorControlsWrapper,\\n  DualListSelectorControl,\\n  DualListSelectorTree,\\n  DualListSelectorTreeItemData,\\n  SearchInput\\n} from '@patternfly/react-core';\\nimport AngleDoubleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-left-icon';\\nimport AngleLeftIcon from '@patternfly/react-icons/dist/esm/icons/angle-left-icon';\\nimport AngleDoubleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-double-right-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\ninterface FoodNode {\\n  id: string;\\n  text: string;\\n  children?: FoodNode[];\\n}\\n\\ninterface ExampleProps {\\n  data: FoodNode[];\\n}\\n\\nexport const ComposableDualListSelectorTree: React.FunctionComponent<ExampleProps> = ({ data }: ExampleProps) => {\\n  const [checkedLeafIds, setCheckedLeafIds] = React.useState<string[]>([]);\\n  const [chosenLeafIds, setChosenLeafIds] = React.useState<string[]>(['beans', 'beef', 'chicken', 'tofu']);\\n  const [chosenFilter, setChosenFilter] = React.useState<string>('');\\n  const [availableFilter, setAvailableFilter] = React.useState<string>('');\\n  let hiddenChosen: string[] = [];\\n  let hiddenAvailable: string[] = [];\\n\\n  // helper function to build memoized lists\\n  const buildTextById = (node: FoodNode): { [key: string]: string } => {\\n    let textById = {};\\n    if (!node) {\\n      return textById;\\n    }\\n    textById[node.id] = node.text;\\n    if (node.children) {\\n      node.children.forEach(child => {\\n        textById = { ...textById, ...buildTextById(child) };\\n      });\\n    }\\n    return textById;\\n  };\\n\\n  // helper function to build memoized lists\\n  const getDescendantLeafIds = (node: FoodNode): string[] => {\\n    if (!node.children || !node.children.length) {\\n      return [node.id];\\n    } else {\\n      let childrenIds = [];\\n      node.children.forEach(child => {\\n        childrenIds = [...childrenIds, ...getDescendantLeafIds(child)];\\n      });\\n      return childrenIds;\\n    }\\n  };\\n\\n  // helper function to build memoized lists\\n  const getLeavesById = (node: FoodNode): { [key: string]: string[] } => {\\n    let leavesById = {};\\n    if (!node.children || !node.children.length) {\\n      leavesById[node.id] = [node.id];\\n    } else {\\n      node.children.forEach(child => {\\n        leavesById[node.id] = getDescendantLeafIds(node);\\n        leavesById = { ...leavesById, ...getLeavesById(child) };\\n      });\\n    }\\n    return leavesById;\\n  };\\n\\n  // Builds a map of child leaf nodes by node id - memoized so that it only rebuilds the list if the data changes.\\n  const { memoizedLeavesById, memoizedAllLeaves, memoizedNodeText } = React.useMemo(() => {\\n    let leavesById = {};\\n    let allLeaves = [];\\n    let nodeTexts = {};\\n    data.forEach(foodNode => {\\n      nodeTexts = { ...nodeTexts, ...buildTextById(foodNode) };\\n      leavesById = { ...leavesById, ...getLeavesById(foodNode) };\\n      allLeaves = [...allLeaves, ...getDescendantLeafIds(foodNode)];\\n    });\\n    return {\\n      memoizedLeavesById: leavesById,\\n      memoizedAllLeaves: allLeaves,\\n      memoizedNodeText: nodeTexts\\n    };\\n  }, [data]);\\n\\n  const moveChecked = (toChosen: boolean) => {\\n    setChosenLeafIds(\\n      prevChosenIds =>\\n        toChosen\\n          ? [...prevChosenIds, ...checkedLeafIds] // add checked ids to chosen list\\n          : [...prevChosenIds.filter(x => !checkedLeafIds.includes(x))] // remove checked ids from chosen list\\n    );\\n\\n    // uncheck checked ids that just moved\\n    setCheckedLeafIds(prevChecked =>\\n      toChosen\\n        ? [...prevChecked.filter(x => chosenLeafIds.includes(x))]\\n        : [...prevChecked.filter(x => !chosenLeafIds.includes(x))]\\n    );\\n  };\\n\\n  const moveAll = (toChosen: boolean) => {\\n    if (toChosen) {\\n      setChosenLeafIds(memoizedAllLeaves);\\n    } else {\\n      setChosenLeafIds([]);\\n    }\\n  };\\n\\n  const areAllDescendantsSelected = (node: FoodNode, isChosen: boolean) =>\\n    memoizedLeavesById[node.id].every(\\n      id => checkedLeafIds.includes(id) && (isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id))\\n    );\\n  const areSomeDescendantsSelected = (node: FoodNode, isChosen: boolean) =>\\n    memoizedLeavesById[node.id].some(\\n      id => checkedLeafIds.includes(id) && (isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id))\\n    );\\n\\n  const isNodeChecked = (node: FoodNode, isChosen: boolean) => {\\n    if (areAllDescendantsSelected(node, isChosen)) {\\n      return true;\\n    }\\n    if (areSomeDescendantsSelected(node, isChosen)) {\\n      return null;\\n    }\\n    return false;\\n  };\\n\\n  const onOptionCheck = (\\n    event: React.MouseEvent | React.ChangeEvent<HTMLInputElement> | React.KeyboardEvent,\\n    isChecked: boolean,\\n    node: DualListSelectorTreeItemData,\\n    isChosen: boolean\\n  ) => {\\n    const nodeIdsToCheck = memoizedLeavesById[node.id].filter(id =>\\n      isChosen\\n        ? chosenLeafIds.includes(id) && !hiddenChosen.includes(id)\\n        : !chosenLeafIds.includes(id) && !hiddenAvailable.includes(id)\\n    );\\n    if (isChosen) {\\n      hiddenChosen = [];\\n    } else {\\n      hiddenAvailable = [];\\n    }\\n    setCheckedLeafIds(prevChecked => {\\n      const otherCheckedNodeNames = prevChecked.filter(id => !nodeIdsToCheck.includes(id));\\n      return !isChecked ? otherCheckedNodeNames : [...otherCheckedNodeNames, ...nodeIdsToCheck];\\n    });\\n  };\\n\\n  // builds a search input - used in each dual list selector pane\\n  const buildSearchInput = (isChosen: boolean) => {\\n    const onChange = value => (isChosen ? setChosenFilter(value) : setAvailableFilter(value));\\n\\n    return (\\n      <SearchInput value={isChosen ? chosenFilter : availableFilter} onChange={onChange} onClear={() => onChange('')} />\\n    );\\n  };\\n\\n  // Builds the DualListSelectorTreeItems from the FoodNodes\\n  const buildOptions = (\\n    isChosen: boolean,\\n    [node, ...remainingNodes]: FoodNode[],\\n    hasParentMatch: boolean\\n  ): DualListSelectorTreeItemData[] => {\\n    if (!node) {\\n      return [];\\n    }\\n\\n    const isChecked = isNodeChecked(node, isChosen);\\n\\n    const filterValue = isChosen ? chosenFilter : availableFilter;\\n    const descendentLeafIds = memoizedLeavesById[node.id];\\n    const descendentsOnThisPane = isChosen\\n      ? descendentLeafIds.filter(id => chosenLeafIds.includes(id))\\n      : descendentLeafIds.filter(id => !chosenLeafIds.includes(id));\\n\\n    const hasMatchingChildren =\\n      filterValue && descendentsOnThisPane.some(id => memoizedNodeText[id].includes(filterValue));\\n    const isFilterMatch = filterValue && node.text.includes(filterValue) && descendentsOnThisPane.length > 0;\\n\\n    // A node is displayed if either of the following is true:\\n    //   - There is no filter value and this node or its descendents belong on this pane\\n    //   - There is a filter value and this node or one of this node's descendents or ancestors match on this pane\\n    const isDisplayed =\\n      (!filterValue && descendentsOnThisPane.length > 0) ||\\n      hasMatchingChildren ||\\n      (hasParentMatch && descendentsOnThisPane.length > 0) ||\\n      isFilterMatch;\\n\\n    if (!isDisplayed) {\\n      if (isChosen) {\\n        hiddenChosen.push(node.id);\\n      } else {\\n        hiddenAvailable.push(node.id);\\n      }\\n    }\\n\\n    return [\\n      ...(isDisplayed\\n        ? [\\n            {\\n              id: node.id,\\n              text: node.text,\\n              isChecked,\\n              checkProps: { 'aria-label': `Select ${node.text}` },\\n              hasBadge: node.children && node.children.length > 0,\\n              badgeProps: { isRead: true },\\n              defaultExpanded: isChosen ? !!chosenFilter : !!availableFilter,\\n              children: node.children\\n                ? buildOptions(isChosen, node.children, isFilterMatch || hasParentMatch)\\n                : undefined\\n            }\\n          ]\\n        : []),\\n      ...(!isDisplayed && node.children && node.children.length\\n        ? buildOptions(isChosen, node.children, hasParentMatch)\\n        : []),\\n      ...(remainingNodes ? buildOptions(isChosen, remainingNodes, hasParentMatch) : [])\\n    ];\\n  };\\n\\n  const buildPane = (isChosen: boolean): React.ReactNode => {\\n    const options: DualListSelectorTreeItemData[] = buildOptions(isChosen, data, false);\\n    const numOptions = isChosen ? chosenLeafIds.length : memoizedAllLeaves.length - chosenLeafIds.length;\\n    const numSelected = checkedLeafIds.filter(id =>\\n      isChosen ? chosenLeafIds.includes(id) : !chosenLeafIds.includes(id)\\n    ).length;\\n    const status = `${numSelected} of ${numOptions} options selected`;\\n    return (\\n      <DualListSelectorPane\\n        title={isChosen ? 'Chosen' : 'Available'}\\n        status={status}\\n        searchInput={buildSearchInput(isChosen)}\\n        isChosen={isChosen}\\n      >\\n        <DualListSelectorList>\\n          <DualListSelectorTree\\n            data={options}\\n            onOptionCheck={(e, isChecked, itemData) => onOptionCheck(e, isChecked, itemData, isChosen)}\\n          />\\n        </DualListSelectorList>\\n      </DualListSelectorPane>\\n    );\\n  };\\n\\n  return (\\n    <DualListSelector isTree>\\n      {buildPane(false)}\\n      <DualListSelectorControlsWrapper aria-label=\\\"Selector controls\\\">\\n        <DualListSelectorControl\\n          isDisabled={!checkedLeafIds.filter(x => !chosenLeafIds.includes(x)).length}\\n          onClick={() => moveChecked(true)}\\n          aria-label=\\\"Add selected\\\"\\n        >\\n          <AngleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenLeafIds.length === memoizedAllLeaves.length}\\n          onClick={() => moveAll(true)}\\n          aria-label=\\\"Add all\\\"\\n        >\\n          <AngleDoubleRightIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          isDisabled={chosenLeafIds.length === 0}\\n          onClick={() => moveAll(false)}\\n          aria-label=\\\"Remove all\\\"\\n        >\\n          <AngleDoubleLeftIcon />\\n        </DualListSelectorControl>\\n        <DualListSelectorControl\\n          onClick={() => moveChecked(false)}\\n          isDisabled={!checkedLeafIds.filter(x => !!chosenLeafIds.includes(x)).length}\\n          aria-label=\\\"Remove selected\\\"\\n        >\\n          <AngleLeftIcon />\\n        </DualListSelectorControl>\\n      </DualListSelectorControlsWrapper>\\n      {buildPane(true)}\\n    </DualListSelector>\\n  );\\n};\\n\\nexport const ComposableDualListSelectorTreeExample: React.FunctionComponent = () => (\\n  <ComposableDualListSelectorTree\\n    data={[\\n      {\\n        id: 'fruits',\\n        text: 'Fruits',\\n        children: [\\n          { id: 'apple', text: 'Apple' },\\n          {\\n            id: 'berries',\\n            text: 'Berries',\\n            children: [\\n              { id: 'blueberry', text: 'Blueberry' },\\n              { id: 'strawberry', text: 'Strawberry' }\\n            ]\\n          },\\n          { id: 'banana', text: 'Banana' }\\n        ]\\n      },\\n      { id: 'bread', text: 'Bread' },\\n      {\\n        id: 'vegetables',\\n        text: 'Vegetables',\\n        children: [\\n          { id: 'broccoli', text: 'Broccoli' },\\n          { id: 'cauliflower', text: 'Cauliflower' }\\n        ]\\n      },\\n      {\\n        id: 'proteins',\\n        text: 'Proteins',\\n        children: [\\n          { id: 'beans', text: 'Beans' },\\n          {\\n            id: 'meats',\\n            text: 'Meats',\\n            children: [\\n              {\\n                id: 'beef',\\n                text: 'Beef'\\n              },\\n              {\\n                id: 'chicken',\\n                text: 'Chicken'\\n              }\\n            ]\\n          },\\n          { id: 'tofu', text: 'Tofu' }\\n        ]\\n      }\\n    ]}\\n  />\\n);\\n\",\"title\":\"Composable dual list selector tree\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Basic with tooltips\"])}\n    {React.createElement(pageData.examples[\"Basic with search\"])}\n    {React.createElement(pageData.examples[\"Using more complex options with actions\"])}\n    {React.createElement(pageData.examples[\"Expandable options\"])}\n    {React.createElement(pageData.examples[\"Composable dual list selector\"])}\n    {React.createElement(pageData.examples[\"Reordering lists using drag and drop\"])}\n    {React.createElement(pageData.examples[\"Composable dual list selector tree\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsDualListSelectorReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}