{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Date picker\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/date-picker/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/DatePicker/examples/DatePicker.md\",\n  \"propComponents\": [{\n    \"name\": \"DatePicker\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"appendTo\",\n      \"type\": \"HTMLElement | ((ref?: HTMLElement) => HTMLElement)\",\n      \"description\": \"The element to append the popover to\"\n    }, {\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the date picker\",\n      \"defaultValue\": \"'Date picker'\"\n    }, {\n      \"name\": \"buttonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label for the button to open the date picker\",\n      \"defaultValue\": \"'Toggle date picker'\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the date time picker.\"\n    }, {\n      \"name\": \"dateFormat\",\n      \"type\": \"(date: Date) => string\",\n      \"description\": \"How to format the date in the TextInput\",\n      \"defaultValue\": \"(date: Date) =>\\n`${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\\n  .getDate()\\n  .toString()\\n  .padStart(2, '0')}`\"\n    }, {\n      \"name\": \"dateParse\",\n      \"type\": \"(value: string) => Date\",\n      \"description\": \"How to format the date in the TextInput\",\n      \"defaultValue\": \"(val: string) => val.split('-').length === 3 && new Date(`${val}T00:00:00`)\"\n    }, {\n      \"name\": \"helperText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Text for label\"\n    }, {\n      \"name\": \"inputProps\",\n      \"type\": \"TextInputProps\",\n      \"description\": \"Additional props for input field\",\n      \"defaultValue\": \"{}\"\n    }, {\n      \"name\": \"invalidFormatText\",\n      \"type\": \"string\",\n      \"description\": \"Error message to display when the TextInput cannot be parsed.\",\n      \"defaultValue\": \"'Invalid date'\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating the date picker is disabled\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"locale\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"undefined\"\n    }, {\n      \"name\": \"onBlur\",\n      \"type\": \"(value: string, date?: Date) => void\",\n      \"description\": \"Callback called every time the input loses focus\",\n      \"defaultValue\": \"(): any => undefined\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(value: string, date?: Date) => void\",\n      \"description\": \"Callback called every time the input value changes\",\n      \"defaultValue\": \"(): any => undefined\"\n    }, {\n      \"name\": \"placeholder\",\n      \"type\": \"string\",\n      \"description\": \"String to display in the empty date picker field as a hint for the expected date format\",\n      \"defaultValue\": \"'YYYY-MM-DD'\"\n    }, {\n      \"name\": \"popoverProps\",\n      \"type\": \"Omit<PopoverProps, 'appendTo'>\",\n      \"description\": \"Props to pass to the Popover\"\n    }, {\n      \"name\": \"style\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"{}\"\n    }, {\n      \"name\": \"validators\",\n      \"type\": \"((date: Date) => string)[]\",\n      \"description\": \"Functions that returns an error message if a date is invalid\",\n      \"defaultValue\": \"[]\"\n    }, {\n      \"name\": \"value\",\n      \"type\": \"string\",\n      \"description\": \"Value of TextInput\",\n      \"defaultValue\": \"''\"\n    }]\n  }, {\n    \"name\": \"CalendarFormat\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"cellAriaLabel\",\n      \"type\": \"(date: Date) => string\",\n      \"description\": \"Aria-label for the date cells\"\n    }, {\n      \"name\": \"dayFormat\",\n      \"type\": \"(date: Date) => React.ReactNode\",\n      \"description\": \"How to format days in buttons in table cells\"\n    }, {\n      \"name\": \"locale\",\n      \"type\": \"string\",\n      \"description\": \"If using the default formatters which locale to use. Undefined defaults to current locale. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\"\n    }, {\n      \"name\": \"longWeekdayFormat\",\n      \"type\": \"(date: Date) => React.ReactNode\",\n      \"description\": \"How to format days in header for screen readers\"\n    }, {\n      \"name\": \"monthFormat\",\n      \"type\": \"(date: Date) => React.ReactNode\",\n      \"description\": \"How to format months in Select\"\n    }, {\n      \"name\": \"nextMonthAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the next month button\"\n    }, {\n      \"name\": \"prevMonthAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the previous month button\"\n    }, {\n      \"name\": \"rangeStart\",\n      \"type\": \"Date\",\n      \"description\": \"Which date to start range styles from\"\n    }, {\n      \"name\": \"weekdayFormat\",\n      \"type\": \"(date: Date) => React.ReactNode\",\n      \"description\": \"How to format week days in header\"\n    }, {\n      \"name\": \"weekStart\",\n      \"type\": \"0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday\",\n      \"description\": \"Day of week that starts the week. 0 is Sunday, 6 is Saturday.\"\n    }, {\n      \"name\": \"yearInputAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the year input\"\n    }]\n  }, {\n    \"name\": \"DatePickerRef\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"setCalendarOpen\",\n      \"type\": \"(isOpen: boolean) => void\",\n      \"description\": \"Sets the calendar open status\",\n      \"required\": true\n    }, {\n      \"name\": \"toggleCalendar\",\n      \"type\": \"() => void\",\n      \"description\": \"Toggles the calendar open status\",\n      \"required\": true\n    }]\n  }],\n  \"beta\": true,\n  \"cssPrefix\": [\"pf-c-date-picker\"],\n  \"examples\": [\"Basic\", \"American format\", \"Helper text\", \"Min and max date\", \"French\", \"Controlled\", \"Controlling the date picker calendar state\"]\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerBasic: React.FunctionComponent = () => (\\n  <DatePicker\\n    // eslint-disable-next-line no-console\\n    onBlur={(str, date) => console.log('onBlur', str, date)}\\n    // eslint-disable-next-line no-console\\n    onChange={(str, date) => console.log('onChange', str, date)}\\n  />\\n);\\n\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'American format': function AmericanFormat(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerAmerican: React.FunctionComponent = () => {\\n  const dateFormat = (date: Date) =>\\n    date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\\\\//g, '-');\\n  const dateParse = (date: string) => {\\n    const split = date.split('-');\\n    if (split.length !== 3) {\\n      return new Date();\\n    }\\n    const month = split[0];\\n    const day = split[1];\\n    const year = split[2];\\n    return new Date(`${year.padStart(4, '0')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00`);\\n  };\\n\\n  return <DatePicker value=\\\"03-05-2020\\\" placeholder=\\\"MM-DD-YYYY\\\" dateFormat={dateFormat} dateParse={dateParse} />;\\n};\\n\",\n      \"title\": \"American format\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Helper text': function HelperText(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerHelperText: React.FunctionComponent = () => (\\n  <DatePicker value=\\\"2020-03-05\\\" helperText=\\\"Select a date.\\\" />\\n);\\n\",\n      \"title\": \"Helper text\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Min and max date': function MinAndMaxDate(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerMinMax: React.FunctionComponent = () => {\\n  const minDate = new Date(2020, 2, 16);\\n  const maxDate = new Date(2020, 2, 20);\\n  const rangeValidator = (date: Date) => {\\n    if (date < minDate) {\\n      return 'Date is before the allowable range.';\\n    } else if (date > maxDate) {\\n      return 'Date is after the allowable range.';\\n    }\\n\\n    return '';\\n  };\\n  return <DatePicker value=\\\"2020-03-17\\\" validators={[rangeValidator]} />;\\n};\\n\",\n      \"title\": \"Min and max date\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'French': function French(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { DatePicker, Weekday } from '@patternfly/react-core';\\n\\nexport const DatePickerFrench: React.FunctionComponent = () => {\\n  const minDate = new Date(2020, 2, 16);\\n  const maxDate = new Date(2020, 2, 20);\\n  const rangeValidator = (date: Date) => {\\n    if (date < minDate) {\\n      return 'Cette date est antérieure à la première date valide.';\\n    } else if (date > maxDate) {\\n      return 'Cette date est postérieure à la dernière date valide.';\\n    }\\n\\n    return '';\\n  };\\n  return (\\n    <DatePicker\\n      value=\\\"2020-03-17\\\"\\n      validators={[rangeValidator]}\\n      placeholder=\\\"aaaa-mm-jj\\\"\\n      invalidFormatText=\\\"Cette date est invalide.\\\"\\n      locale=\\\"fr\\\"\\n      weekStart={Weekday.Monday}\\n    />\\n  );\\n};\\n\",\n      \"title\": \"French\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Controlled': function Controlled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerControlled: React.FunctionComponent = () => {\\n  const initialValue = '2020-03-17';\\n  const [value, setValue] = React.useState(initialValue);\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setValue(initialValue)}>Reset date</Button>\\n      <DatePicker value={value} onChange={value => setValue(value)} />\\n    </React.Fragment>\\n  );\\n};\\n\",\n      \"title\": \"Controlled\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Controlling the date picker calendar state': function ControllingTheDatePickerCalendarState(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerControlledCalendar: React.FunctionComponent = () => {\\n  const dateRef = React.useRef(null);\\n  const onClick = () => {\\n    if (dateRef.current) {\\n      dateRef.current.toggleCalendar();\\n    }\\n  };\\n  return (\\n    <React.Fragment>\\n      <Button onClick={onClick}>Toggle calendar</Button>\\n      <DatePicker ref={dateRef} />\\n    </React.Fragment>\\n  );\\n};\\n\",\n      \"title\": \"Controlling the date picker calendar state\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"American format\"]), React.createElement(pageData.examples[\"Helper text\"]), React.createElement(pageData.examples[\"Min and max date\"]), React.createElement(pageData.examples[\"French\"]), React.createElement(pageData.examples[\"Controlled\"]), React.createElement(pageData.examples[\"Controlling the date picker calendar state\"]));\n};\n\nComponent.displayName = 'ComponentsDatePickerReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/date-picker/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Date picker\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/date-picker/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/DatePicker/examples/DatePicker.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"DatePicker\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"appendTo\",\n          \"type\": \"HTMLElement | ((ref?: HTMLElement) => HTMLElement)\",\n          \"description\": \"The element to append the popover to\"\n        },\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the date picker\",\n          \"defaultValue\": \"'Date picker'\"\n        },\n        {\n          \"name\": \"buttonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label for the button to open the date picker\",\n          \"defaultValue\": \"'Toggle date picker'\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the date time picker.\"\n        },\n        {\n          \"name\": \"dateFormat\",\n          \"type\": \"(date: Date) => string\",\n          \"description\": \"How to format the date in the TextInput\",\n          \"defaultValue\": \"(date: Date) =>\\n`${date.getFullYear()}-${(date.getMonth() + 1).toString().padStart(2, '0')}-${date\\n  .getDate()\\n  .toString()\\n  .padStart(2, '0')}`\"\n        },\n        {\n          \"name\": \"dateParse\",\n          \"type\": \"(value: string) => Date\",\n          \"description\": \"How to format the date in the TextInput\",\n          \"defaultValue\": \"(val: string) => val.split('-').length === 3 && new Date(`${val}T00:00:00`)\"\n        },\n        {\n          \"name\": \"helperText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Text for label\"\n        },\n        {\n          \"name\": \"inputProps\",\n          \"type\": \"TextInputProps\",\n          \"description\": \"Additional props for input field\",\n          \"defaultValue\": \"{}\"\n        },\n        {\n          \"name\": \"invalidFormatText\",\n          \"type\": \"string\",\n          \"description\": \"Error message to display when the TextInput cannot be parsed.\",\n          \"defaultValue\": \"'Invalid date'\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating the date picker is disabled\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"locale\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"undefined\"\n        },\n        {\n          \"name\": \"onBlur\",\n          \"type\": \"(value: string, date?: Date) => void\",\n          \"description\": \"Callback called every time the input loses focus\",\n          \"defaultValue\": \"(): any => undefined\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(value: string, date?: Date) => void\",\n          \"description\": \"Callback called every time the input value changes\",\n          \"defaultValue\": \"(): any => undefined\"\n        },\n        {\n          \"name\": \"placeholder\",\n          \"type\": \"string\",\n          \"description\": \"String to display in the empty date picker field as a hint for the expected date format\",\n          \"defaultValue\": \"'YYYY-MM-DD'\"\n        },\n        {\n          \"name\": \"popoverProps\",\n          \"type\": \"Omit<PopoverProps, 'appendTo'>\",\n          \"description\": \"Props to pass to the Popover\"\n        },\n        {\n          \"name\": \"style\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"{}\"\n        },\n        {\n          \"name\": \"validators\",\n          \"type\": \"((date: Date) => string)[]\",\n          \"description\": \"Functions that returns an error message if a date is invalid\",\n          \"defaultValue\": \"[]\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"string\",\n          \"description\": \"Value of TextInput\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    },\n    {\n      \"name\": \"CalendarFormat\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"cellAriaLabel\",\n          \"type\": \"(date: Date) => string\",\n          \"description\": \"Aria-label for the date cells\"\n        },\n        {\n          \"name\": \"dayFormat\",\n          \"type\": \"(date: Date) => React.ReactNode\",\n          \"description\": \"How to format days in buttons in table cells\"\n        },\n        {\n          \"name\": \"locale\",\n          \"type\": \"string\",\n          \"description\": \"If using the default formatters which locale to use. Undefined defaults to current locale. See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_identification_and_negotiation\"\n        },\n        {\n          \"name\": \"longWeekdayFormat\",\n          \"type\": \"(date: Date) => React.ReactNode\",\n          \"description\": \"How to format days in header for screen readers\"\n        },\n        {\n          \"name\": \"monthFormat\",\n          \"type\": \"(date: Date) => React.ReactNode\",\n          \"description\": \"How to format months in Select\"\n        },\n        {\n          \"name\": \"nextMonthAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the next month button\"\n        },\n        {\n          \"name\": \"prevMonthAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the previous month button\"\n        },\n        {\n          \"name\": \"rangeStart\",\n          \"type\": \"Date\",\n          \"description\": \"Which date to start range styles from\"\n        },\n        {\n          \"name\": \"weekdayFormat\",\n          \"type\": \"(date: Date) => React.ReactNode\",\n          \"description\": \"How to format week days in header\"\n        },\n        {\n          \"name\": \"weekStart\",\n          \"type\": \"0 | 1 | 2 | 3 | 4 | 5 | 6 | Weekday\",\n          \"description\": \"Day of week that starts the week. 0 is Sunday, 6 is Saturday.\"\n        },\n        {\n          \"name\": \"yearInputAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the year input\"\n        }\n      ]\n    },\n    {\n      \"name\": \"DatePickerRef\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"setCalendarOpen\",\n          \"type\": \"(isOpen: boolean) => void\",\n          \"description\": \"Sets the calendar open status\",\n          \"required\": true\n        },\n        {\n          \"name\": \"toggleCalendar\",\n          \"type\": \"() => void\",\n          \"description\": \"Toggles the calendar open status\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"beta\": true,\n  \"cssPrefix\": [\n    \"pf-c-date-picker\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"American format\",\n    \"Helper text\",\n    \"Min and max date\",\n    \"French\",\n    \"Controlled\",\n    \"Controlling the date picker calendar state\"\n  ]\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerBasic: React.FunctionComponent = () => (\\n  <DatePicker\\n    // eslint-disable-next-line no-console\\n    onBlur={(str, date) => console.log('onBlur', str, date)}\\n    // eslint-disable-next-line no-console\\n    onChange={(str, date) => console.log('onChange', str, date)}\\n  />\\n);\\n\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'American format': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerAmerican: React.FunctionComponent = () => {\\n  const dateFormat = (date: Date) =>\\n    date.toLocaleDateString('en-US', { year: 'numeric', month: '2-digit', day: '2-digit' }).replace(/\\\\//g, '-');\\n  const dateParse = (date: string) => {\\n    const split = date.split('-');\\n    if (split.length !== 3) {\\n      return new Date();\\n    }\\n    const month = split[0];\\n    const day = split[1];\\n    const year = split[2];\\n    return new Date(`${year.padStart(4, '0')}-${month.padStart(2, '0')}-${day.padStart(2, '0')}T00:00:00`);\\n  };\\n\\n  return <DatePicker value=\\\"03-05-2020\\\" placeholder=\\\"MM-DD-YYYY\\\" dateFormat={dateFormat} dateParse={dateParse} />;\\n};\\n\",\"title\":\"American format\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Helper text': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerHelperText: React.FunctionComponent = () => (\\n  <DatePicker value=\\\"2020-03-05\\\" helperText=\\\"Select a date.\\\" />\\n);\\n\",\"title\":\"Helper text\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Min and max date': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerMinMax: React.FunctionComponent = () => {\\n  const minDate = new Date(2020, 2, 16);\\n  const maxDate = new Date(2020, 2, 20);\\n  const rangeValidator = (date: Date) => {\\n    if (date < minDate) {\\n      return 'Date is before the allowable range.';\\n    } else if (date > maxDate) {\\n      return 'Date is after the allowable range.';\\n    }\\n\\n    return '';\\n  };\\n  return <DatePicker value=\\\"2020-03-17\\\" validators={[rangeValidator]} />;\\n};\\n\",\"title\":\"Min and max date\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'French': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { DatePicker, Weekday } from '@patternfly/react-core';\\n\\nexport const DatePickerFrench: React.FunctionComponent = () => {\\n  const minDate = new Date(2020, 2, 16);\\n  const maxDate = new Date(2020, 2, 20);\\n  const rangeValidator = (date: Date) => {\\n    if (date < minDate) {\\n      return 'Cette date est antérieure à la première date valide.';\\n    } else if (date > maxDate) {\\n      return 'Cette date est postérieure à la dernière date valide.';\\n    }\\n\\n    return '';\\n  };\\n  return (\\n    <DatePicker\\n      value=\\\"2020-03-17\\\"\\n      validators={[rangeValidator]}\\n      placeholder=\\\"aaaa-mm-jj\\\"\\n      invalidFormatText=\\\"Cette date est invalide.\\\"\\n      locale=\\\"fr\\\"\\n      weekStart={Weekday.Monday}\\n    />\\n  );\\n};\\n\",\"title\":\"French\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Controlled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerControlled: React.FunctionComponent = () => {\\n  const initialValue = '2020-03-17';\\n  const [value, setValue] = React.useState(initialValue);\\n  return (\\n    <React.Fragment>\\n      <Button onClick={() => setValue(initialValue)}>Reset date</Button>\\n      <DatePicker value={value} onChange={value => setValue(value)} />\\n    </React.Fragment>\\n  );\\n};\\n\",\"title\":\"Controlled\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Controlling the date picker calendar state': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, DatePicker } from '@patternfly/react-core';\\n\\nexport const DatePickerControlledCalendar: React.FunctionComponent = () => {\\n  const dateRef = React.useRef(null);\\n  const onClick = () => {\\n    if (dateRef.current) {\\n      dateRef.current.toggleCalendar();\\n    }\\n  };\\n  return (\\n    <React.Fragment>\\n      <Button onClick={onClick}>Toggle calendar</Button>\\n      <DatePicker ref={dateRef} />\\n    </React.Fragment>\\n  );\\n};\\n\",\"title\":\"Controlling the date picker calendar state\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"American format\"])}\n    {React.createElement(pageData.examples[\"Helper text\"])}\n    {React.createElement(pageData.examples[\"Min and max date\"])}\n    {React.createElement(pageData.examples[\"French\"])}\n    {React.createElement(pageData.examples[\"Controlled\"])}\n    {React.createElement(pageData.examples[\"Controlling the date picker calendar state\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsDatePickerReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}