{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Context selector\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/context-selector/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ContextSelector/examples/ContextSelector.md\",\n  \"propComponents\": [{\n    \"name\": \"ContextSelector\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"content rendered inside the Context Selector\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Classes applied to root element of Context Selector\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"disableFocusTrap\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to disable focus trap\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"footer\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Footer of the context selector\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"isFullHeight\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating that the context selector should expand to full height\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if Context Selector is opened\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isPlain\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate the toggle has no border or background\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isText\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if toggle is textual toggle\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"menuAppendTo\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"'inline'\"\n    }, {\n      \"name\": \"onSearchButtonClick\",\n      \"type\": \"(event?: React.SyntheticEvent<HTMLButtonElement>) => void\",\n      \"description\": \"Function callback for when Search Button is clicked\",\n      \"defaultValue\": \"() => undefined as any\"\n    }, {\n      \"name\": \"onSearchInputChange\",\n      \"type\": \"(value: string) => void\",\n      \"description\": \"Function callback called when user changes the Search Input\",\n      \"defaultValue\": \"() => undefined as any\"\n    }, {\n      \"name\": \"onSelect\",\n      \"type\": \"(event: any, value: React.ReactNode) => void\",\n      \"description\": \"Function callback called when user selects item\",\n      \"defaultValue\": \"() => undefined as any\"\n    }, {\n      \"name\": \"onToggle\",\n      \"type\": \"(event: any, value: boolean) => void\",\n      \"description\": \"Function callback called when user clicks toggle button\",\n      \"defaultValue\": \"() => undefined as any\"\n    }, {\n      \"name\": \"ouiaSafe\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"screenReaderLabel\",\n      \"type\": \"string\",\n      \"description\": \"Labels the Context Selector for Screen Readers\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"searchButtonAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria-label for the Context Selector Search Button\",\n      \"defaultValue\": \"'Search menu items'\"\n    }, {\n      \"name\": \"searchInputPlaceholder\",\n      \"type\": \"string\",\n      \"description\": \"Search Input placeholder\",\n      \"defaultValue\": \"'Search'\"\n    }, {\n      \"name\": \"searchInputValue\",\n      \"type\": \"string\",\n      \"description\": \"Value in the Search field\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"toggleText\",\n      \"type\": \"string\",\n      \"description\": \"Text that appears in the Context Selector Toggle\",\n      \"defaultValue\": \"''\"\n    }]\n  }, {\n    \"name\": \"ContextSelectorItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Anything which can be rendered as Context Selector item\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Classes applied to root element of the Context Selector item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"href\",\n      \"type\": \"string\",\n      \"description\": \"Link href, indicates item should render as anchor tag\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Render Context  Selector item as disabled\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Callback for click event\",\n      \"defaultValue\": \"(): any => undefined\"\n    }, {\n      \"name\": \"sendRef\",\n      \"type\": \"(index: number, current: any) => void\",\n      \"description\": \"Internal callback for ref tracking\",\n      \"defaultValue\": \"() => {}\"\n    }]\n  }, {\n    \"name\": \"ContextSelectorFooter\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the ContextSelectorFooter\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the ContextSelectorFooter\",\n      \"defaultValue\": \"''\"\n    }]\n  }],\n  \"examples\": [\"Basic\", \"Plain with text\", \"With footer\"]\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ContextSelector, ContextSelectorItem } from '@patternfly/react-core';\\n\\nexport const ContextSelectorBasic: React.FunctionComponent = () => {\\n  const items = [\\n    {\\n      text: 'Link',\\n      href: '#'\\n    },\\n    'Action',\\n    {\\n      text: 'Disabled link',\\n      href: '#',\\n      isDisabled: true\\n    },\\n    {\\n      text: 'Disabled action',\\n      isDisabled: true\\n    },\\n    'My project',\\n    'OpenShift cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My project 2',\\n    'OpenShift cluster ',\\n    'Production Ansible 2 ',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text = null, href = null, isDisabled] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text || item}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Plain with text': function PlainWithText(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ContextSelector, ContextSelectorItem } from '@patternfly/react-core';\\n\\nconst items = [\\n  {\\n    text: 'Link',\\n    href: '#'\\n  },\\n  'Action',\\n  {\\n    text: 'Disabled link',\\n    href: '#',\\n    isDisabled: true\\n  },\\n  {\\n    text: 'Disabled action',\\n    isDisabled: true\\n  },\\n  'My Project',\\n  'OpenShift Cluster',\\n  'Production Ansible',\\n  'AWS',\\n  'Azure',\\n  'My Project 2',\\n  'OpenShift Cluster ',\\n  'Production Ansible 2 ',\\n  'AWS 2',\\n  'Azure 2'\\n];\\n\\nexport const ContextSelectorPlainText: React.FunctionComponent = () => {\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n      isPlain\\n      isText\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text, href = null, isDisabled = false] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\n      \"title\": \"Plain with text\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With footer': function WithFooter(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Button, ContextSelector, ContextSelectorItem, ContextSelectorFooter } from '@patternfly/react-core';\\n\\nexport const ContextSelectorWithFooter: React.FunctionComponent = () => {\\n  const items = [\\n    {\\n      text: 'Link',\\n      href: '#'\\n    },\\n    'Action',\\n    {\\n      text: 'Disabled link',\\n      href: '#',\\n      isDisabled: true\\n    },\\n    {\\n      text: 'Disabled action',\\n      isDisabled: true\\n    },\\n    'My project',\\n    'OpenShift cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My project 2',\\n    'OpenShift cluster ',\\n    'Production Ansible 2 ',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n      footer={\\n        <ContextSelectorFooter>\\n          <Button variant=\\\"link\\\" isInline>\\n            Footer action\\n          </Button>\\n        </ContextSelectorFooter>\\n      }\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text = null, href = null, isDisabled] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text || item}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\n      \"title\": \"With footer\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Plain with text\"]), React.createElement(pageData.examples[\"With footer\"]));\n};\n\nComponent.displayName = 'ComponentsContextSelectorReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/context-selector/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Context selector\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/context-selector/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ContextSelector/examples/ContextSelector.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"ContextSelector\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"content rendered inside the Context Selector\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Classes applied to root element of Context Selector\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"disableFocusTrap\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to disable focus trap\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"footer\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Footer of the context selector\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"isFullHeight\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating that the context selector should expand to full height\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if Context Selector is opened\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isPlain\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate the toggle has no border or background\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isText\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if toggle is textual toggle\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"menuAppendTo\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"'inline'\"\n        },\n        {\n          \"name\": \"onSearchButtonClick\",\n          \"type\": \"(event?: React.SyntheticEvent<HTMLButtonElement>) => void\",\n          \"description\": \"Function callback for when Search Button is clicked\",\n          \"defaultValue\": \"() => undefined as any\"\n        },\n        {\n          \"name\": \"onSearchInputChange\",\n          \"type\": \"(value: string) => void\",\n          \"description\": \"Function callback called when user changes the Search Input\",\n          \"defaultValue\": \"() => undefined as any\"\n        },\n        {\n          \"name\": \"onSelect\",\n          \"type\": \"(event: any, value: React.ReactNode) => void\",\n          \"description\": \"Function callback called when user selects item\",\n          \"defaultValue\": \"() => undefined as any\"\n        },\n        {\n          \"name\": \"onToggle\",\n          \"type\": \"(event: any, value: boolean) => void\",\n          \"description\": \"Function callback called when user clicks toggle button\",\n          \"defaultValue\": \"() => undefined as any\"\n        },\n        {\n          \"name\": \"ouiaSafe\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"screenReaderLabel\",\n          \"type\": \"string\",\n          \"description\": \"Labels the Context Selector for Screen Readers\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"searchButtonAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria-label for the Context Selector Search Button\",\n          \"defaultValue\": \"'Search menu items'\"\n        },\n        {\n          \"name\": \"searchInputPlaceholder\",\n          \"type\": \"string\",\n          \"description\": \"Search Input placeholder\",\n          \"defaultValue\": \"'Search'\"\n        },\n        {\n          \"name\": \"searchInputValue\",\n          \"type\": \"string\",\n          \"description\": \"Value in the Search field\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"toggleText\",\n          \"type\": \"string\",\n          \"description\": \"Text that appears in the Context Selector Toggle\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ContextSelectorItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Anything which can be rendered as Context Selector item\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Classes applied to root element of the Context Selector item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"href\",\n          \"type\": \"string\",\n          \"description\": \"Link href, indicates item should render as anchor tag\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Render Context  Selector item as disabled\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Callback for click event\",\n          \"defaultValue\": \"(): any => undefined\"\n        },\n        {\n          \"name\": \"sendRef\",\n          \"type\": \"(index: number, current: any) => void\",\n          \"description\": \"Internal callback for ref tracking\",\n          \"defaultValue\": \"() => {}\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ContextSelectorFooter\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the ContextSelectorFooter\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the ContextSelectorFooter\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    }\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Plain with text\",\n    \"With footer\"\n  ]\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ContextSelector, ContextSelectorItem } from '@patternfly/react-core';\\n\\nexport const ContextSelectorBasic: React.FunctionComponent = () => {\\n  const items = [\\n    {\\n      text: 'Link',\\n      href: '#'\\n    },\\n    'Action',\\n    {\\n      text: 'Disabled link',\\n      href: '#',\\n      isDisabled: true\\n    },\\n    {\\n      text: 'Disabled action',\\n      isDisabled: true\\n    },\\n    'My project',\\n    'OpenShift cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My project 2',\\n    'OpenShift cluster ',\\n    'Production Ansible 2 ',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text = null, href = null, isDisabled] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text || item}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Plain with text': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ContextSelector, ContextSelectorItem } from '@patternfly/react-core';\\n\\nconst items = [\\n  {\\n    text: 'Link',\\n    href: '#'\\n  },\\n  'Action',\\n  {\\n    text: 'Disabled link',\\n    href: '#',\\n    isDisabled: true\\n  },\\n  {\\n    text: 'Disabled action',\\n    isDisabled: true\\n  },\\n  'My Project',\\n  'OpenShift Cluster',\\n  'Production Ansible',\\n  'AWS',\\n  'Azure',\\n  'My Project 2',\\n  'OpenShift Cluster ',\\n  'Production Ansible 2 ',\\n  'AWS 2',\\n  'Azure 2'\\n];\\n\\nexport const ContextSelectorPlainText: React.FunctionComponent = () => {\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n      isPlain\\n      isText\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text, href = null, isDisabled = false] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\"title\":\"Plain with text\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With footer': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Button, ContextSelector, ContextSelectorItem, ContextSelectorFooter } from '@patternfly/react-core';\\n\\nexport const ContextSelectorWithFooter: React.FunctionComponent = () => {\\n  const items = [\\n    {\\n      text: 'Link',\\n      href: '#'\\n    },\\n    'Action',\\n    {\\n      text: 'Disabled link',\\n      href: '#',\\n      isDisabled: true\\n    },\\n    {\\n      text: 'Disabled action',\\n      isDisabled: true\\n    },\\n    'My project',\\n    'OpenShift cluster',\\n    'Production Ansible',\\n    'AWS',\\n    'Azure',\\n    'My project 2',\\n    'OpenShift cluster ',\\n    'Production Ansible 2 ',\\n    'AWS 2',\\n    'Azure 2'\\n  ];\\n  const firstItemText = typeof items[0] === 'string' ? items[0] : items[0].text;\\n  const [isOpen, setOpen] = React.useState(false);\\n  const [selected, setSelected] = React.useState(firstItemText);\\n  const [searchValue, setSearchValue] = React.useState('');\\n  const [filteredItems, setFilteredItems] = React.useState(items);\\n\\n  const onToggle = (event: any, isOpen: boolean) => {\\n    setOpen(isOpen);\\n  };\\n\\n  const onSelect = (event: any, value: React.ReactNode) => {\\n    setSelected(value as string);\\n    setOpen(!isOpen);\\n  };\\n\\n  const onSearchInputChange = (value: string) => {\\n    setSearchValue(value);\\n  };\\n\\n  const onSearchButtonClick = (_event: React.SyntheticEvent<HTMLButtonElement>) => {\\n    const filtered =\\n      searchValue === ''\\n        ? items\\n        : items.filter(item => {\\n            const str = typeof item === 'string' ? item : item.text;\\n            return str.toLowerCase().indexOf(searchValue.toLowerCase()) !== -1;\\n          });\\n\\n    setFilteredItems(filtered || []);\\n  };\\n\\n  return (\\n    <ContextSelector\\n      toggleText={selected}\\n      onSearchInputChange={onSearchInputChange}\\n      isOpen={isOpen}\\n      searchInputValue={searchValue}\\n      onToggle={onToggle}\\n      onSelect={onSelect}\\n      onSearchButtonClick={onSearchButtonClick}\\n      screenReaderLabel=\\\"Selected Project:\\\"\\n      footer={\\n        <ContextSelectorFooter>\\n          <Button variant=\\\"link\\\" isInline>\\n            Footer action\\n          </Button>\\n        </ContextSelectorFooter>\\n      }\\n    >\\n      {filteredItems.map((item, index) => {\\n        const [text = null, href = null, isDisabled] =\\n          typeof item === 'string' ? [item, null, false] : [item.text, item.href, item.isDisabled];\\n        return (\\n          <ContextSelectorItem key={index} href={href} isDisabled={isDisabled}>\\n            {text || item}\\n          </ContextSelectorItem>\\n        );\\n      })}\\n    </ContextSelector>\\n  );\\n};\\n\",\"title\":\"With footer\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Plain with text\"])}\n    {React.createElement(pageData.examples[\"With footer\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsContextSelectorReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}