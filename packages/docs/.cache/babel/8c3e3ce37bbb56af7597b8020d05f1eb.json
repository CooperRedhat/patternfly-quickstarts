{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Button, Card, CardBody, CardFooter, DatePicker, Form, FormGroup, Grid, GridItem, Menu, MenuContent, MenuItem, MenuList, MenuToggle, Popper, SearchInput, TextInput } from '@patternfly/react-core';\nimport { words } from '../../../../node_modules/@patternfly/react-core/src/demos/SearchInput/./words.js';\nvar pageData = {\n  \"id\": \"Search input\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/search-input/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/SearchInput/SearchInput.md\",\n  \"beta\": true,\n  \"examples\": [\"Search with autocomplete\", \"Composable advanced search\"]\n};\npageData.liveContext = {\n  Button: Button,\n  Card: Card,\n  CardBody: CardBody,\n  CardFooter: CardFooter,\n  DatePicker: DatePicker,\n  Form: Form,\n  FormGroup: FormGroup,\n  Grid: Grid,\n  GridItem: GridItem,\n  Menu: Menu,\n  MenuContent: MenuContent,\n  MenuItem: MenuItem,\n  MenuList: MenuList,\n  MenuToggle: MenuToggle,\n  Popper: Popper,\n  SearchInput: SearchInput,\n  TextInput: TextInput,\n  words: words\n};\npageData.examples = {\n  'Search with autocomplete': function SearchWithAutocomplete(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { \\n  Menu,\\n  MenuContent,\\n  MenuItem,\\n  MenuList,\\n  Popper, \\n  SearchInput\\n} from '@patternfly/react-core';\\n\\nimport { words } from './words.js';\\n\\nSearchAutocomplete = () => {\\n  const [value, setValue] = React.useState('');\\n  const [hint, setHint] = React.useState('');\\n  const [autocompleteOptions, setAutocompleteOptions] = React.useState([]);\\n  \\n  const [isAutocompleteOpen, setIsAutocompleteOpen] = React.useState(false);\\n  \\n  const searchInputRef = React.useRef(null);\\n  const autocompleteRef = React.useRef(null);\\n  \\n  const onClear = () => {\\n    setValue('');\\n  };\\n  \\n  const onChange = (newValue) => {\\n    if (newValue !== '' && searchInputRef && searchInputRef.current && searchInputRef.current.contains(document.activeElement)) {\\n      setIsAutocompleteOpen(true);\\n      \\n      // When the value of the search input changes, build a list of no more than 10 autocomplete options.\\n      // Options which start with the search input value are listed first, followed by options which contain\\n      // the search input value.\\n      let options = words.filter((option) => option.startsWith(newValue.toLowerCase())).map((option) => <MenuItem itemId={option} key={option}>{option}</MenuItem>);\\n      if (options.length > 10) {\\n        options = options.slice(0,10);\\n      } else {\\n        options = [...options, ...words.filter((option) => !option.startsWith(newValue.toLowerCase()) && option.includes(newValue.toLowerCase())).map((option) => <MenuItem itemId={option} key={option}>{option}</MenuItem>)].slice(0, 10)\\n      }\\n      \\n      // The hint is set whenever there is only one autocomplete option left.\\n      setHint(options.length === 1? options[0].props.itemId : '');\\n      // The menu is hidden if there are no options\\n      setIsAutocompleteOpen(options.length > 0);\\n      setAutocompleteOptions(options);\\n    } else {\\n      setIsAutocompleteOpen(false);\\n    }\\n    setValue(newValue);\\n  };\\n  \\n  // Whenever an autocomplete option is selected, set the search input value, close the menu, and put the browser\\n  // focus back on the search input\\n  const onSelect = (e, itemId) => {\\n    e.stopPropagation();\\n    setValue(itemId);\\n    setIsAutocompleteOpen(false);\\n    searchInputRef.current.focus();\\n  };\\n  \\n  const handleMenuKeys = event => {\\n    // If there is a hint while the browser focus is on the search input, tab or right arrow will 'accept' the hint value \\n    // and set it as the search input value\\n    if (hint && (event.key === 'Tab' || event.key === 'ArrowRight') && searchInputRef.current === event.target) {\\n      setValue(hint);\\n      setHint('');\\n      setIsAutocompleteOpen(false);\\n      if (event.key === 'ArrowRight') {\\n        event.preventDefault();   \\n      }\\n    // if the autocomplete is open and the browser focus is on the search input,\\n    } else if (isAutocompleteOpen && searchInputRef.current && searchInputRef.current === event.target) {\\n      // the escape key closes the autocomplete menu and keeps the focus on the search input.\\n      if (event.key === 'Escape') {\\n        setIsAutocompleteOpen(false);\\n        searchInputRef.current.focus();\\n      // the up and down arrow keys move browser focus into the autocomplete menu\\n      } else if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\\n        const firstElement = autocompleteRef.current.querySelector('li > button:not(:disabled)');\\n        firstElement && firstElement.focus();\\n        event.preventDefault(); // by default, the up and down arrow keys scroll the window\\n      // the tab, enter, and space keys will close the menu, and the tab key will move browser\\n      // focus forward one element (by default)\\n      }  else if (event.key === 'Tab'|| event.key === \\\"Enter\\\" || event.key === 'Space'){\\n        setIsAutocompleteOpen(false);\\n        if (event.key === \\\"Enter\\\" || event.key === 'Space') {\\n          event.preventDefault();\\n        }\\n      }\\n    // If the autocomplete is open and the browser focus is in the autocomplete menu\\n    // hitting tab will close the autocomplete and but browser focus back on the search input.  \\n    } else if (isAutocompleteOpen && autocompleteRef.current.contains(event.target) && (event.key === 'Tab')) {\\n      event.preventDefault();\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n    }\\n    \\n  };\\n  \\n  // The autocomplete menu should close if the user clicks outside the menu.\\n  const handleClickOutside = event => {\\n    if (isAutocompleteOpen && autocompleteRef && autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\\n      setIsAutocompleteOpen(false);\\n    }\\n  };\\n  \\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [isAutocompleteOpen, hint, searchInputRef.current]);\\n  \\n  const searchInput = (\\n    <SearchInput\\n      value={value}\\n      onChange={onChange}\\n      onClear={onClear}\\n      ref={searchInputRef}\\n      hint={hint}\\n      id=\\\"autocomplete-search\\\"\\n    />\\n  );\\n  \\n  const autocomplete = (\\n    <Menu ref={autocompleteRef} onSelect={onSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          {autocompleteOptions}\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n  \\n\\n  return (\\n    <Popper\\n      trigger={searchInput}\\n      popper={autocomplete}\\n      isVisible={isAutocompleteOpen}\\n      enableFlip={false}\\n      // append the autocomplete menu to the search input in the DOM for the sake of the keyboard navigation experience\\n      appendTo={() => document.querySelector('#autocomplete-search')}\\n    />\\n  );\\n};\",\n      \"title\": \"Search with autocomplete\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demo handles building the advanced search form using the composable Menu, and the \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"SearchInput\"), \"'s \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"hint\"), \" prop.\\nIt also demonstrates wiring up the appropriate keyboard interactions, focus management, and general event handling.\"));\n  },\n  'Composable advanced search': function ComposableAdvancedSearch(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { \\n  ActionGroup,\\n  Button, \\n  Card, \\n  CardBody,  \\n  DatePicker,\\n  Form, \\n  FormGroup,\\n  Grid,\\n  GridItem, \\n  isValidDate,\\n  Menu,\\n  MenuContent,\\n  MenuItem,\\n  MenuList,\\n  MenuToggle,\\n  Popper, \\n  SearchInput, \\n  TextInput,\\n  yyyyMMddFormat\\n} from '@patternfly/react-core';\\n\\nAdvancedComposableSearchInput = () => {\\n  const [value, setValue] = React.useState('');\\n  const [hasWords, setHasWords] = React.useState('');\\n  const [dateWithin, setDateWithin] = React.useState('1 day');\\n  const [date, setDate] = React.useState();\\n  \\n  const [isAdvancedSearchOpen, setIsAdvancedSearchOpen] = React.useState(false);\\n  const [isDateWithinOpen, setIsDateWithinOpen] = React.useState(false);\\n    \\n  const isInitialMount = React.useRef(true);\\n  const firstAttrRef = React.useRef(null);\\n  const searchInputRef = React.useRef(null);\\n  const advancedSearchPaneRef = React.useRef(null);\\n  const dateWithinToggleRef = React.useRef();\\n  const dateWithinMenuRef = React.useRef();\\n  \\n  const onClear = () => {\\n    setValue('');\\n    setHasWords('');\\n    setDateWithin('');\\n    setDate('');\\n  };\\n  \\n  const onChange = (value) => {\\n    if (value.length <= hasWords.length + 1) {\\n      setValue(value);\\n      setHasWords(value);\\n    } else {\\n      setValue(hasWords);\\n    }\\n  };\\n  \\n  // After initial page load, whenever the advanced search menu is opened, the browser focus should be placed on the\\n  // first advanced search form input. Whenever the advanced search menu is closed, the browser focus should\\n  // be returned to the search input.\\n  React.useEffect(() => {\\n    if (isInitialMount.current) {\\n      isInitialMount.current = false;\\n    } else {\\n      if (isAdvancedSearchOpen && firstAttrRef && firstAttrRef.current) {\\n        firstAttrRef.current.focus();\\n      } else if (!isAdvancedSearchOpen && searchInputRef) {\\n        searchInputRef.current.focus();\\n      }\\n    }\\n  }, [isAdvancedSearchOpen]);\\n  \\n  // If a menu is open and has browser focus, then the escape key closes them and puts the browser focus onto their \\n  // respective toggle. The 'date within' menu also needs to close when the 'tab' key is hit. However, hitting tab while\\n  // focus is in the advanced search form should move the focus to the next form input, not close the advanced search\\n  // menu.\\n  const handleMenuKeys = event => {\\n    if (isDateWithinOpen && dateWithinMenuRef.current && dateWithinMenuRef.current.contains(event.target)) {\\n      if (event.key === 'Escape' || event.key === 'Tab') {\\n        setIsDateWithinOpen(!isDateWithinOpen);\\n        dateWithinToggleRef.current.focus();\\n      }\\n    } \\n    if (isAdvancedSearchOpen && advancedSearchPaneRef.current && advancedSearchPaneRef.current.contains(event.target)) {\\n      if (event.key === 'Escape' || \\n      (event.key === 'Tab' && !event.shiftKey && advancedSearchPaneRef.current.querySelector('button[type=reset]') === event.target)\\n      ) {\\n        setIsAdvancedSearchOpen(!isAdvancedSearchOpen);\\n        searchInputRef.current.focus();\\n      }\\n    }  \\n  };\\n  \\n  // If a menu is open and has browser focus, then clicking outside the menu should close it.\\n  const handleClickOutside = event => {\\n    if (isDateWithinOpen && dateWithinMenuRef && dateWithinMenuRef.current && !dateWithinMenuRef.current.contains(event.target)) {\\n      setIsDateWithinOpen(false);\\n    } \\n    if (isAdvancedSearchOpen && advancedSearchPaneRef && advancedSearchPaneRef.current && !advancedSearchPaneRef.current.contains(event.target)) {\\n      setIsAdvancedSearchOpen(false);\\n    }\\n  };\\n  \\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [dateWithinMenuRef.current, advancedSearchPaneRef.current, isAdvancedSearchOpen, isDateWithinOpen]);\\n  \\n  \\n  // This demo and its handling of 'date within' and a date picker is modeled after the gmail advanced search form.\\n  const onSubmit = (value, event) => {\\n    event.preventDefault();\\n    \\n    if (isValidDate(new Date(date)) && dateWithin) {\\n      let afterDate = new Date(date);\\n      let toDate = new Date(date);\\n      switch (dateWithin) {\\n        case '1 day':\\n          afterDate.setDate(afterDate.getDate());\\n          toDate.setDate(toDate.getDate() + 2);\\n          break;\\n        case '3 days':\\n          afterDate.setDate(afterDate.getDate() - 2);\\n          toDate.setDate(toDate.getDate() + 4);\\n          break;\\n        case '1 week':\\n          afterDate.setDate(afterDate.getDate() - 6);\\n          toDate.setDate(toDate.getDate() + 8);\\n          break;\\n        case '2 weeks':\\n          afterDate.setDate(afterDate.getDate() - 13);\\n          toDate.setDate(toDate.getDate() + 15);\\n          break;\\n        case '1 month':\\n          afterDate.setMonth(afterDate.getMonth() - 1);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 1);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '2 months':\\n          afterDate.setMonth(afterDate.getMonth() - 2);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 2);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '6 months':\\n          afterDate.setMonth(afterDate.getMonth() - 6);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 6);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '1 year':\\n          afterDate.setFullYear(afterDate.getFullYear() - 1);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setFullYear(toDate.getFullYear() + 1);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n      }\\n      setValue(`${hasWords && (hasWords + \\\" \\\")}after:${yyyyMMddFormat(afterDate)} to:${yyyyMMddFormat(toDate)}`)\\n    } else {\\n      setValue(hasWords);\\n    }\\n    \\n    setIsAdvancedSearchOpen(false);\\n  };\\n  \\n  const searchInput = (\\n    <SearchInput\\n      value={value}\\n      onChange={onChange}\\n      onToggleAdvancedSearch={(e, isOpen) => {\\n        e.stopPropagation();\\n        setIsAdvancedSearchOpen(isOpen)\\n      }}\\n      isAdvancedSearchOpen={isAdvancedSearchOpen}\\n      onClear={onClear}\\n      onSearch={onSubmit}\\n      ref={searchInputRef}\\n      id=\\\"custom-advanced-search\\\"\\n    />\\n  );\\n  \\n  // Clicking the 'date within' toggle should open its associated menu and then place the browser \\n  // focus on the first menu item. \\n  const toggleDateWithinMenu = ev => {\\n    ev.stopPropagation(); // Stop handleClickOutside from handling\\n    setTimeout(() => {\\n      if (dateWithinMenuRef.current) {\\n        const firstElement = dateWithinMenuRef.current.querySelector('li > button:not(:disabled)');\\n        firstElement && firstElement.focus();\\n      }\\n    }, 0);\\n    setIsDateWithinOpen(!isDateWithinOpen);\\n  };\\n  \\n  // Selecting a date within option closes the menu, sets the value of date within, and puts browser focus back\\n  // on the date within toggle.\\n  const onDateWithinSelect = (e, itemId) => {\\n    e.stopPropagation();\\n    setIsDateWithinOpen(false);\\n    setDateWithin(itemId);\\n    if (dateWithinToggleRef && dateWithinToggleRef.current) {\\n      dateWithinToggleRef.current.focus();\\n    }\\n  };\\n  \\n  const dateWithinOptions = (\\n    <Menu ref={dateWithinMenuRef} selected={dateWithin} onSelect={onDateWithinSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          <MenuItem itemId=\\\"1 day\\\">1 day</MenuItem>\\n          <MenuItem itemId=\\\"3 days\\\">3 days</MenuItem>\\n          <MenuItem itemId=\\\"1 week\\\">1 week</MenuItem>\\n          <MenuItem itemId=\\\"2 weeks\\\">2 weeks</MenuItem>\\n          <MenuItem itemId=\\\"1 month\\\">1 month</MenuItem>\\n          <MenuItem itemId=\\\"2 months\\\">2 months</MenuItem>\\n          <MenuItem itemId=\\\"6 months\\\">6 months</MenuItem>\\n          <MenuItem itemId=\\\"1 year\\\">1 year</MenuItem>\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n  \\n  const dateWithinToggle = (\\n    <MenuToggle ref={dateWithinToggleRef} onClick={toggleDateWithinMenu} isExpanded={isDateWithinOpen} style={{width: \\\"100%\\\"}}>\\n      {dateWithin}\\n    </MenuToggle>\\n  );\\n  \\n  const advancedForm = (\\n    <div ref={advancedSearchPaneRef} role=\\\"dialog\\\" aria-label=\\\"Advanced search form\\\">\\n      <Card>\\n        <CardBody>\\n          <Form>\\n            <FormGroup label='Has the words' fieldId='has-words' key='has-words'>\\n              <TextInput\\n                type='text'\\n                id='has-words'\\n                value={hasWords}\\n                onChange={value => {\\n                  setHasWords(value);\\n                  setValue(value);\\n                }}\\n                ref={firstAttrRef}\\n              />\\n            </FormGroup>\\n            <Grid hasGutter md={6}>\\n              <GridItem>\\n                <FormGroup label='Date within' fieldId='date-within' key='date-within'>\\n                  <Popper trigger={dateWithinToggle} popper={dateWithinOptions} isVisible={isDateWithinOpen} />\\n                </FormGroup>\\n              </GridItem>\\n              <GridItem>\\n                <FormGroup label='Of date' fieldId='date' key='date'>\\n                  <DatePicker \\n                    id=\\\"datePicker\\\" \\n                    style={{width: \\\"100%\\\"}} \\n                    value={date} \\n                    onChange={setDate} \\n                    appendTo={() => document.querySelector(\\\"#datePicker\\\")}\\n                  />\\n                </FormGroup>\\n              </GridItem>\\n            </Grid>\\n            <ActionGroup>\\n              <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={(e) => onSubmit(null, e)}>Submit</Button>\\n              {!!onClear && (\\n                <Button variant=\\\"link\\\" type=\\\"reset\\\" onClick={onClear}>Reset</Button>\\n              )}\\n            </ActionGroup>\\n          </Form>\\n        </CardBody>\\n      </Card>\\n    </div>\\n  );\\n\\n  // Popper is just one way to build a relationship between a toggle and a menu.\\n  return (\\n    <Popper\\n      trigger={searchInput}\\n      popper={advancedForm}\\n      isVisible={isAdvancedSearchOpen}\\n      enableFlip={false}\\n      appendTo={() => document.querySelector(\\\"#custom-advanced-search\\\")}\\n    />\\n  );\\n};\",\n      \"title\": \"Composable advanced search\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This demo handles building the advanced search form using the composable Menu, as well as wiring up a\\nselect using the composable Menu and MenuToggle components. This demo also demonstrates wiring up the appropriate\\nkeyboard interactions, focus management, and general event handling.\"), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"Note: This demo and its handling of 'date within' and a date picker is modeled after the gmail advanced search form.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Search with autocomplete\"]), React.createElement(pageData.examples[\"Composable advanced search\"]));\n};\n\nComponent.displayName = 'ComponentsSearchInputReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","Button","Card","CardBody","CardFooter","DatePicker","Form","FormGroup","Grid","GridItem","Menu","MenuContent","MenuItem","MenuList","MenuToggle","Popper","SearchInput","TextInput","words","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/search-input/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { \n  Button, \n  Card, \n  CardBody, \n  CardFooter, \n  DatePicker,\n  Form, \n  FormGroup,\n  Grid,\n  GridItem, \n  Menu,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Popper, \n  SearchInput, \n  TextInput \n} from '@patternfly/react-core';\nimport { words } from '../../../../node_modules/@patternfly/react-core/src/demos/SearchInput/./words.js';\nconst pageData = {\n  \"id\": \"Search input\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/search-input/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/SearchInput/SearchInput.md\",\n  \"beta\": true,\n  \"examples\": [\n    \"Search with autocomplete\",\n    \"Composable advanced search\"\n  ]\n};\npageData.liveContext = {\n  Button,\n  Card,\n  CardBody,\n  CardFooter,\n  DatePicker,\n  Form,\n  FormGroup,\n  Grid,\n  GridItem,\n  Menu,\n  MenuContent,\n  MenuItem,\n  MenuList,\n  MenuToggle,\n  Popper,\n  SearchInput,\n  TextInput,\n  words\n};\npageData.examples = {\n  'Search with autocomplete': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { \\n  Menu,\\n  MenuContent,\\n  MenuItem,\\n  MenuList,\\n  Popper, \\n  SearchInput\\n} from '@patternfly/react-core';\\n\\nimport { words } from './words.js';\\n\\nSearchAutocomplete = () => {\\n  const [value, setValue] = React.useState('');\\n  const [hint, setHint] = React.useState('');\\n  const [autocompleteOptions, setAutocompleteOptions] = React.useState([]);\\n  \\n  const [isAutocompleteOpen, setIsAutocompleteOpen] = React.useState(false);\\n  \\n  const searchInputRef = React.useRef(null);\\n  const autocompleteRef = React.useRef(null);\\n  \\n  const onClear = () => {\\n    setValue('');\\n  };\\n  \\n  const onChange = (newValue) => {\\n    if (newValue !== '' && searchInputRef && searchInputRef.current && searchInputRef.current.contains(document.activeElement)) {\\n      setIsAutocompleteOpen(true);\\n      \\n      // When the value of the search input changes, build a list of no more than 10 autocomplete options.\\n      // Options which start with the search input value are listed first, followed by options which contain\\n      // the search input value.\\n      let options = words.filter((option) => option.startsWith(newValue.toLowerCase())).map((option) => <MenuItem itemId={option} key={option}>{option}</MenuItem>);\\n      if (options.length > 10) {\\n        options = options.slice(0,10);\\n      } else {\\n        options = [...options, ...words.filter((option) => !option.startsWith(newValue.toLowerCase()) && option.includes(newValue.toLowerCase())).map((option) => <MenuItem itemId={option} key={option}>{option}</MenuItem>)].slice(0, 10)\\n      }\\n      \\n      // The hint is set whenever there is only one autocomplete option left.\\n      setHint(options.length === 1? options[0].props.itemId : '');\\n      // The menu is hidden if there are no options\\n      setIsAutocompleteOpen(options.length > 0);\\n      setAutocompleteOptions(options);\\n    } else {\\n      setIsAutocompleteOpen(false);\\n    }\\n    setValue(newValue);\\n  };\\n  \\n  // Whenever an autocomplete option is selected, set the search input value, close the menu, and put the browser\\n  // focus back on the search input\\n  const onSelect = (e, itemId) => {\\n    e.stopPropagation();\\n    setValue(itemId);\\n    setIsAutocompleteOpen(false);\\n    searchInputRef.current.focus();\\n  };\\n  \\n  const handleMenuKeys = event => {\\n    // If there is a hint while the browser focus is on the search input, tab or right arrow will 'accept' the hint value \\n    // and set it as the search input value\\n    if (hint && (event.key === 'Tab' || event.key === 'ArrowRight') && searchInputRef.current === event.target) {\\n      setValue(hint);\\n      setHint('');\\n      setIsAutocompleteOpen(false);\\n      if (event.key === 'ArrowRight') {\\n        event.preventDefault();   \\n      }\\n    // if the autocomplete is open and the browser focus is on the search input,\\n    } else if (isAutocompleteOpen && searchInputRef.current && searchInputRef.current === event.target) {\\n      // the escape key closes the autocomplete menu and keeps the focus on the search input.\\n      if (event.key === 'Escape') {\\n        setIsAutocompleteOpen(false);\\n        searchInputRef.current.focus();\\n      // the up and down arrow keys move browser focus into the autocomplete menu\\n      } else if (event.key === 'ArrowDown' || event.key === 'ArrowUp') {\\n        const firstElement = autocompleteRef.current.querySelector('li > button:not(:disabled)');\\n        firstElement && firstElement.focus();\\n        event.preventDefault(); // by default, the up and down arrow keys scroll the window\\n      // the tab, enter, and space keys will close the menu, and the tab key will move browser\\n      // focus forward one element (by default)\\n      }  else if (event.key === 'Tab'|| event.key === \\\"Enter\\\" || event.key === 'Space'){\\n        setIsAutocompleteOpen(false);\\n        if (event.key === \\\"Enter\\\" || event.key === 'Space') {\\n          event.preventDefault();\\n        }\\n      }\\n    // If the autocomplete is open and the browser focus is in the autocomplete menu\\n    // hitting tab will close the autocomplete and but browser focus back on the search input.  \\n    } else if (isAutocompleteOpen && autocompleteRef.current.contains(event.target) && (event.key === 'Tab')) {\\n      event.preventDefault();\\n      setIsAutocompleteOpen(false);\\n      searchInputRef.current.focus();\\n    }\\n    \\n  };\\n  \\n  // The autocomplete menu should close if the user clicks outside the menu.\\n  const handleClickOutside = event => {\\n    if (isAutocompleteOpen && autocompleteRef && autocompleteRef.current && !autocompleteRef.current.contains(event.target)) {\\n      setIsAutocompleteOpen(false);\\n    }\\n  };\\n  \\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [isAutocompleteOpen, hint, searchInputRef.current]);\\n  \\n  const searchInput = (\\n    <SearchInput\\n      value={value}\\n      onChange={onChange}\\n      onClear={onClear}\\n      ref={searchInputRef}\\n      hint={hint}\\n      id=\\\"autocomplete-search\\\"\\n    />\\n  );\\n  \\n  const autocomplete = (\\n    <Menu ref={autocompleteRef} onSelect={onSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          {autocompleteOptions}\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n  \\n\\n  return (\\n    <Popper\\n      trigger={searchInput}\\n      popper={autocomplete}\\n      isVisible={isAutocompleteOpen}\\n      enableFlip={false}\\n      // append the autocomplete menu to the search input in the DOM for the sake of the keyboard navigation experience\\n      appendTo={() => document.querySelector('#autocomplete-search')}\\n    />\\n  );\\n};\",\"title\":\"Search with autocomplete\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demo handles building the advanced search form using the composable Menu, and the `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`SearchInput`}\n        </code>\n        {`'s `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`hint`}\n        </code>\n        {` prop.\nIt also demonstrates wiring up the appropriate keyboard interactions, focus management, and general event handling.`}\n      </p>\n    </Example>,\n  'Composable advanced search': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { \\n  ActionGroup,\\n  Button, \\n  Card, \\n  CardBody,  \\n  DatePicker,\\n  Form, \\n  FormGroup,\\n  Grid,\\n  GridItem, \\n  isValidDate,\\n  Menu,\\n  MenuContent,\\n  MenuItem,\\n  MenuList,\\n  MenuToggle,\\n  Popper, \\n  SearchInput, \\n  TextInput,\\n  yyyyMMddFormat\\n} from '@patternfly/react-core';\\n\\nAdvancedComposableSearchInput = () => {\\n  const [value, setValue] = React.useState('');\\n  const [hasWords, setHasWords] = React.useState('');\\n  const [dateWithin, setDateWithin] = React.useState('1 day');\\n  const [date, setDate] = React.useState();\\n  \\n  const [isAdvancedSearchOpen, setIsAdvancedSearchOpen] = React.useState(false);\\n  const [isDateWithinOpen, setIsDateWithinOpen] = React.useState(false);\\n    \\n  const isInitialMount = React.useRef(true);\\n  const firstAttrRef = React.useRef(null);\\n  const searchInputRef = React.useRef(null);\\n  const advancedSearchPaneRef = React.useRef(null);\\n  const dateWithinToggleRef = React.useRef();\\n  const dateWithinMenuRef = React.useRef();\\n  \\n  const onClear = () => {\\n    setValue('');\\n    setHasWords('');\\n    setDateWithin('');\\n    setDate('');\\n  };\\n  \\n  const onChange = (value) => {\\n    if (value.length <= hasWords.length + 1) {\\n      setValue(value);\\n      setHasWords(value);\\n    } else {\\n      setValue(hasWords);\\n    }\\n  };\\n  \\n  // After initial page load, whenever the advanced search menu is opened, the browser focus should be placed on the\\n  // first advanced search form input. Whenever the advanced search menu is closed, the browser focus should\\n  // be returned to the search input.\\n  React.useEffect(() => {\\n    if (isInitialMount.current) {\\n      isInitialMount.current = false;\\n    } else {\\n      if (isAdvancedSearchOpen && firstAttrRef && firstAttrRef.current) {\\n        firstAttrRef.current.focus();\\n      } else if (!isAdvancedSearchOpen && searchInputRef) {\\n        searchInputRef.current.focus();\\n      }\\n    }\\n  }, [isAdvancedSearchOpen]);\\n  \\n  // If a menu is open and has browser focus, then the escape key closes them and puts the browser focus onto their \\n  // respective toggle. The 'date within' menu also needs to close when the 'tab' key is hit. However, hitting tab while\\n  // focus is in the advanced search form should move the focus to the next form input, not close the advanced search\\n  // menu.\\n  const handleMenuKeys = event => {\\n    if (isDateWithinOpen && dateWithinMenuRef.current && dateWithinMenuRef.current.contains(event.target)) {\\n      if (event.key === 'Escape' || event.key === 'Tab') {\\n        setIsDateWithinOpen(!isDateWithinOpen);\\n        dateWithinToggleRef.current.focus();\\n      }\\n    } \\n    if (isAdvancedSearchOpen && advancedSearchPaneRef.current && advancedSearchPaneRef.current.contains(event.target)) {\\n      if (event.key === 'Escape' || \\n      (event.key === 'Tab' && !event.shiftKey && advancedSearchPaneRef.current.querySelector('button[type=reset]') === event.target)\\n      ) {\\n        setIsAdvancedSearchOpen(!isAdvancedSearchOpen);\\n        searchInputRef.current.focus();\\n      }\\n    }  \\n  };\\n  \\n  // If a menu is open and has browser focus, then clicking outside the menu should close it.\\n  const handleClickOutside = event => {\\n    if (isDateWithinOpen && dateWithinMenuRef && dateWithinMenuRef.current && !dateWithinMenuRef.current.contains(event.target)) {\\n      setIsDateWithinOpen(false);\\n    } \\n    if (isAdvancedSearchOpen && advancedSearchPaneRef && advancedSearchPaneRef.current && !advancedSearchPaneRef.current.contains(event.target)) {\\n      setIsAdvancedSearchOpen(false);\\n    }\\n  };\\n  \\n  React.useEffect(() => {\\n    window.addEventListener('keydown', handleMenuKeys);\\n    window.addEventListener('click', handleClickOutside);\\n    return () => {\\n      window.removeEventListener('keydown', handleMenuKeys);\\n      window.removeEventListener('click', handleClickOutside);\\n    };\\n  }, [dateWithinMenuRef.current, advancedSearchPaneRef.current, isAdvancedSearchOpen, isDateWithinOpen]);\\n  \\n  \\n  // This demo and its handling of 'date within' and a date picker is modeled after the gmail advanced search form.\\n  const onSubmit = (value, event) => {\\n    event.preventDefault();\\n    \\n    if (isValidDate(new Date(date)) && dateWithin) {\\n      let afterDate = new Date(date);\\n      let toDate = new Date(date);\\n      switch (dateWithin) {\\n        case '1 day':\\n          afterDate.setDate(afterDate.getDate());\\n          toDate.setDate(toDate.getDate() + 2);\\n          break;\\n        case '3 days':\\n          afterDate.setDate(afterDate.getDate() - 2);\\n          toDate.setDate(toDate.getDate() + 4);\\n          break;\\n        case '1 week':\\n          afterDate.setDate(afterDate.getDate() - 6);\\n          toDate.setDate(toDate.getDate() + 8);\\n          break;\\n        case '2 weeks':\\n          afterDate.setDate(afterDate.getDate() - 13);\\n          toDate.setDate(toDate.getDate() + 15);\\n          break;\\n        case '1 month':\\n          afterDate.setMonth(afterDate.getMonth() - 1);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 1);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '2 months':\\n          afterDate.setMonth(afterDate.getMonth() - 2);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 2);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '6 months':\\n          afterDate.setMonth(afterDate.getMonth() - 6);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setMonth(toDate.getMonth() + 6);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n        case '1 year':\\n          afterDate.setFullYear(afterDate.getFullYear() - 1);\\n          afterDate.setDate(afterDate.getDate() + 1);\\n          toDate.setFullYear(toDate.getFullYear() + 1);\\n          toDate.setDate(toDate.getDate() + 1);\\n          break;\\n      }\\n      setValue(`${hasWords && (hasWords + \\\" \\\")}after:${yyyyMMddFormat(afterDate)} to:${yyyyMMddFormat(toDate)}`)\\n    } else {\\n      setValue(hasWords);\\n    }\\n    \\n    setIsAdvancedSearchOpen(false);\\n  };\\n  \\n  const searchInput = (\\n    <SearchInput\\n      value={value}\\n      onChange={onChange}\\n      onToggleAdvancedSearch={(e, isOpen) => {\\n        e.stopPropagation();\\n        setIsAdvancedSearchOpen(isOpen)\\n      }}\\n      isAdvancedSearchOpen={isAdvancedSearchOpen}\\n      onClear={onClear}\\n      onSearch={onSubmit}\\n      ref={searchInputRef}\\n      id=\\\"custom-advanced-search\\\"\\n    />\\n  );\\n  \\n  // Clicking the 'date within' toggle should open its associated menu and then place the browser \\n  // focus on the first menu item. \\n  const toggleDateWithinMenu = ev => {\\n    ev.stopPropagation(); // Stop handleClickOutside from handling\\n    setTimeout(() => {\\n      if (dateWithinMenuRef.current) {\\n        const firstElement = dateWithinMenuRef.current.querySelector('li > button:not(:disabled)');\\n        firstElement && firstElement.focus();\\n      }\\n    }, 0);\\n    setIsDateWithinOpen(!isDateWithinOpen);\\n  };\\n  \\n  // Selecting a date within option closes the menu, sets the value of date within, and puts browser focus back\\n  // on the date within toggle.\\n  const onDateWithinSelect = (e, itemId) => {\\n    e.stopPropagation();\\n    setIsDateWithinOpen(false);\\n    setDateWithin(itemId);\\n    if (dateWithinToggleRef && dateWithinToggleRef.current) {\\n      dateWithinToggleRef.current.focus();\\n    }\\n  };\\n  \\n  const dateWithinOptions = (\\n    <Menu ref={dateWithinMenuRef} selected={dateWithin} onSelect={onDateWithinSelect}>\\n      <MenuContent>\\n        <MenuList>\\n          <MenuItem itemId=\\\"1 day\\\">1 day</MenuItem>\\n          <MenuItem itemId=\\\"3 days\\\">3 days</MenuItem>\\n          <MenuItem itemId=\\\"1 week\\\">1 week</MenuItem>\\n          <MenuItem itemId=\\\"2 weeks\\\">2 weeks</MenuItem>\\n          <MenuItem itemId=\\\"1 month\\\">1 month</MenuItem>\\n          <MenuItem itemId=\\\"2 months\\\">2 months</MenuItem>\\n          <MenuItem itemId=\\\"6 months\\\">6 months</MenuItem>\\n          <MenuItem itemId=\\\"1 year\\\">1 year</MenuItem>\\n        </MenuList>\\n      </MenuContent>\\n    </Menu>\\n  );\\n  \\n  const dateWithinToggle = (\\n    <MenuToggle ref={dateWithinToggleRef} onClick={toggleDateWithinMenu} isExpanded={isDateWithinOpen} style={{width: \\\"100%\\\"}}>\\n      {dateWithin}\\n    </MenuToggle>\\n  );\\n  \\n  const advancedForm = (\\n    <div ref={advancedSearchPaneRef} role=\\\"dialog\\\" aria-label=\\\"Advanced search form\\\">\\n      <Card>\\n        <CardBody>\\n          <Form>\\n            <FormGroup label='Has the words' fieldId='has-words' key='has-words'>\\n              <TextInput\\n                type='text'\\n                id='has-words'\\n                value={hasWords}\\n                onChange={value => {\\n                  setHasWords(value);\\n                  setValue(value);\\n                }}\\n                ref={firstAttrRef}\\n              />\\n            </FormGroup>\\n            <Grid hasGutter md={6}>\\n              <GridItem>\\n                <FormGroup label='Date within' fieldId='date-within' key='date-within'>\\n                  <Popper trigger={dateWithinToggle} popper={dateWithinOptions} isVisible={isDateWithinOpen} />\\n                </FormGroup>\\n              </GridItem>\\n              <GridItem>\\n                <FormGroup label='Of date' fieldId='date' key='date'>\\n                  <DatePicker \\n                    id=\\\"datePicker\\\" \\n                    style={{width: \\\"100%\\\"}} \\n                    value={date} \\n                    onChange={setDate} \\n                    appendTo={() => document.querySelector(\\\"#datePicker\\\")}\\n                  />\\n                </FormGroup>\\n              </GridItem>\\n            </Grid>\\n            <ActionGroup>\\n              <Button variant=\\\"primary\\\" type=\\\"submit\\\" onClick={(e) => onSubmit(null, e)}>Submit</Button>\\n              {!!onClear && (\\n                <Button variant=\\\"link\\\" type=\\\"reset\\\" onClick={onClear}>Reset</Button>\\n              )}\\n            </ActionGroup>\\n          </Form>\\n        </CardBody>\\n      </Card>\\n    </div>\\n  );\\n\\n  // Popper is just one way to build a relationship between a toggle and a menu.\\n  return (\\n    <Popper\\n      trigger={searchInput}\\n      popper={advancedForm}\\n      isVisible={isAdvancedSearchOpen}\\n      enableFlip={false}\\n      appendTo={() => document.querySelector(\\\"#custom-advanced-search\\\")}\\n    />\\n  );\\n};\",\"title\":\"Composable advanced search\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This demo handles building the advanced search form using the composable Menu, as well as wiring up a\nselect using the composable Menu and MenuToggle components. This demo also demonstrates wiring up the appropriate\nkeyboard interactions, focus management, and general event handling.`}\n      </p>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`Note: This demo and its handling of 'date within' and a date picker is modeled after the gmail advanced search form.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Search with autocomplete\"])}\n    {React.createElement(pageData.examples[\"Composable advanced search\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsSearchInputReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,SACEC,MADF,EAEEC,IAFF,EAGEC,QAHF,EAIEC,UAJF,EAKEC,UALF,EAMEC,IANF,EAOEC,SAPF,EAQEC,IARF,EASEC,QATF,EAUEC,IAVF,EAWEC,WAXF,EAYEC,QAZF,EAaEC,QAbF,EAcEC,UAdF,EAeEC,MAfF,EAgBEC,WAhBF,EAiBEC,SAjBF,QAkBO,wBAlBP;AAmBA,SAASC,KAAT,QAAsB,kFAAtB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,cADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,sCAJO;EAKf,cAAc,iIALC;EAMf,QAAQ,IANO;EAOf,YAAY,CACV,0BADU,EAEV,4BAFU;AAPG,CAAjB;AAYAA,QAAQ,CAACC,WAAT,GAAuB;EACrBnB,MAAM,EAANA,MADqB;EAErBC,IAAI,EAAJA,IAFqB;EAGrBC,QAAQ,EAARA,QAHqB;EAIrBC,UAAU,EAAVA,UAJqB;EAKrBC,UAAU,EAAVA,UALqB;EAMrBC,IAAI,EAAJA,IANqB;EAOrBC,SAAS,EAATA,SAPqB;EAQrBC,IAAI,EAAJA,IARqB;EASrBC,QAAQ,EAARA,QATqB;EAUrBC,IAAI,EAAJA,IAVqB;EAWrBC,WAAW,EAAXA,WAXqB;EAYrBC,QAAQ,EAARA,QAZqB;EAarBC,QAAQ,EAARA,QAbqB;EAcrBC,UAAU,EAAVA,UAdqB;EAerBC,MAAM,EAANA,MAfqB;EAgBrBC,WAAW,EAAXA,WAhBqB;EAiBrBC,SAAS,EAATA,SAjBqB;EAkBrBC,KAAK,EAALA;AAlBqB,CAAvB;AAoBAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,4BAA4B,gCAAAC,KAAK;IAAA,oBAC/B,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,gvLAA9C;MAA+xL,SAAQ,0BAAvyL;MAAk0L,QAAO;IAAz0L,iBAEE;MAAQ,aAAY;IAApB,2GAGE;MAAW,aAAY;IAAvB,iBAHF,sBAQE;MAAW,aAAY;IAAvB,UARF,gIAFF,CAD+B;EAAA,CADf;EAmBlB,8BAA8B,kCAAAA,KAAK;IAAA,oBACjC,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,o0UAA9C;MAAm3U,SAAQ,4BAA33U;MAAw5U,QAAO;IAA/5U,iBAEE;MAAQ,aAAY;IAApB,oSAFF,eAQE;MAAQ,aAAY;IAApB,0HARF,CADiC;EAAA;AAnBjB,CAApB;;AAkCA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIG3B,KAAK,CAAC4B,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,0BAAlB,CAApB,CAJH,EAKGzB,KAAK,CAAC4B,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,4BAAlB,CAApB,CALH,CADgB;AAAA,CAAlB;;AASAE,SAAS,CAACE,WAAV,GAAwB,qCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}