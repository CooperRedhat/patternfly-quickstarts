{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\nvar pageData = {\n  \"id\": \"Options menu\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/options-menu/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/OptionsMenu/examples/OptionsMenu.md\",\n  \"propComponents\": [{\n    \"name\": \"OptionsMenu\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Classes applied to root element of the options menu\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"direction\",\n      \"type\": \"'up' | 'down'\",\n      \"description\": \"Menu will open up or open down from the options menu toggle\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Id of the root element of the options menu\",\n      \"required\": true\n    }, {\n      \"name\": \"isGrouped\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if menu is groupped\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if menu is open\"\n    }, {\n      \"name\": \"isPlain\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate the toggle has no border or background\"\n    }, {\n      \"name\": \"isText\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if toggle is textual toggle\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"menuAppendTo\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"'inline'\"\n    }, {\n      \"name\": \"menuItems\",\n      \"type\": \"React.ReactNode[]\",\n      \"description\": \"Array of OptionsMenuItem and/or OptionMenuGroup nodes that will be rendered in the options menu list\",\n      \"required\": true\n    }, {\n      \"name\": \"ouiaSafe\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"position\",\n      \"type\": \"'right' | 'left'\",\n      \"description\": \"Indicates where menu will be aligned horizontally\"\n    }, {\n      \"name\": \"toggle\",\n      \"type\": \"React.ReactElement\",\n      \"description\": \"Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the options menu\",\n      \"required\": true\n    }]\n  }, {\n    \"name\": \"OptionsMenuItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Anything which can be rendered as an options menu item\",\n      \"defaultValue\": \"null\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Classes applied to root element of an options menu item\"\n    }, {\n      \"name\": \"id\",\n      \"type\": \"string\",\n      \"description\": \"Unique id of this options menu item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Render options menu item as disabled option\"\n    }, {\n      \"name\": \"isSelected\",\n      \"type\": \"boolean\",\n      \"description\": \"Render options menu item as selected\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onSelect\",\n      \"type\": \"(event?: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => void\",\n      \"description\": \"Callback for when this options menu item is selected\",\n      \"defaultValue\": \"() => null as any\"\n    }]\n  }, {\n    \"name\": \"OptionsMenuSeparator\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"component\",\n      \"type\": \"No type info\",\n      \"defaultValue\": \"'li'\"\n    }]\n  }, {\n    \"name\": \"OptionsMenuToggle\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Provides an accessible name for the button when an icon is used instead of text\",\n      \"defaultValue\": \"'Options menu'\"\n    }, {\n      \"name\": \"hideCaret\",\n      \"type\": \"boolean\",\n      \"description\": \"hide the toggle caret\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isActive\",\n      \"type\": \"boolean\",\n      \"description\": \"Forces display of the active state of the options menu\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Disables the options menu toggle\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if menu is open\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isPlain\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if the button is plain\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isSplitButton\",\n      \"type\": \"boolean\",\n      \"description\": \"\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onToggle\",\n      \"type\": \"(isOpen: boolean) => void\",\n      \"description\": \"Callback for when this options menu is toggled\"\n    }, {\n      \"name\": \"parentId\",\n      \"type\": \"string\",\n      \"description\": \"Id of the parent options menu component\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"toggleTemplate\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be rendered in the options menu toggle button\",\n      \"defaultValue\": \"<React.Fragment />\"\n    }]\n  }, {\n    \"name\": \"OptionsMenuToggleWithText\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-haspopup\",\n      \"type\": \"boolean | 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid'\",\n      \"description\": \"Indicates that the element has a popup context menu or sub-level menu\"\n    }, {\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Provides an accessible name for the button when an icon is used instead of text\",\n      \"defaultValue\": \"'Options menu'\"\n    }, {\n      \"name\": \"isActive\",\n      \"type\": \"boolean\",\n      \"description\": \"Forces display of the active state of the options menu button\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Disables the options menu toggle\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if menu is open\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isPlain\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if the button is plain\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onEnter\",\n      \"type\": \"(event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<Element>) => void\",\n      \"description\": \"Inner function to indicate open on Enter\"\n    }, {\n      \"name\": \"onToggle\",\n      \"type\": \"(event: boolean) => void\",\n      \"description\": \"Callback for when this options menu is toggled\",\n      \"defaultValue\": \"() => null as any\"\n    }, {\n      \"name\": \"parentId\",\n      \"type\": \"string\",\n      \"description\": \"Id of the parent options menu component\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"toggleButtonContents\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be rendered inside the options menu toggle button\"\n    }, {\n      \"name\": \"toggleButtonContentsClassName\",\n      \"type\": \"string\",\n      \"description\": \"Classes to be added to the options menu toggle button\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"toggleText\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content to be rendered inside the options menu toggle as text or another non-interactive element\",\n      \"required\": true\n    }, {\n      \"name\": \"toggleTextClassName\",\n      \"type\": \"string\",\n      \"description\": \"classes to be added to the options menu toggle text\",\n      \"defaultValue\": \"''\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-options-menu\"],\n  \"examples\": [\"Single option\", \"Disabled\", \"Multiple options\", \"Plain\", \"Align top\", \"Align right\", \"Plain with text\", \"Plain with text disabled\", \"Grouped items with titles\", \"Single option with menu on document body\"]\n};\npageData.liveContext = {\n  CaretDownIcon: CaretDownIcon,\n  SortAmountDownIcon: SortAmountDownIcon\n};\npageData.examples = {\n  'Single option': function SingleOption(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass SingleOption extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Options menu\\\",\\n        selectedOption: \\\"singleOption1\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { selectedOption: id };\\n        });\\n      };\\n      \\n    }\\n    \\n  render() {\\n    const { selectedOption, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption1\\\"} id=\\\"singleOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption2\\\"} id=\\\"singleOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption3\\\"} id=\\\"singleOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-option-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        toggle={toggle}/>\\n    );\\n  }\\n}\",\n      \"title\": \"Single option\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Disabled': function Disabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass DisabledOptionsMenu extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Disabled options menu\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n    }\\n    \\n  render() {\\n    const { toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [];\\n    const toggle = <OptionsMenuToggle isDisabled onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-disabled-example-toggle\\\" \\n        isOpen={isOpen} \\n        menuItems={menuItems}\\n        toggle={toggle}/>\\n    );\\n  }\\n}\",\n      \"title\": \"Disabled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Multiple options': function MultipleOptions(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuSeparator, OptionsMenuItemGroup, OptionsMenuToggle} from '@patternfly/react-core';\\n\\nclass MultipleOptions extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Sort by\\\",\\n        sortColumn: \\\"date\\\",\\n        sortDirection: \\\"ascending\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelectColumn = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { sortColumn: id };\\n        });\\n      };\\n      \\n      this.onSelectDirection = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { sortDirection: id };\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { sortColumn, sortDirection, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n        <OptionsMenuItemGroup key=\\\"first group\\\" aria-label=\\\"Sort Column\\\">\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"name\\\"} id=\\\"name\\\" key=\\\"name\\\">Name</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"date\\\"} id=\\\"date\\\" key=\\\"date\\\">Date</OptionsMenuItem>\\n          <OptionsMenuItem isDisabled onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"disabled\\\"} id=\\\"disabled\\\" key=\\\"disabled\\\">Disabled</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"size\\\"} id=\\\"size\\\" key=\\\"size\\\">Size</OptionsMenuItem>\\n        </OptionsMenuItemGroup>,\\n        <OptionsMenuSeparator key=\\\"separator\\\"/>,\\n        <OptionsMenuItemGroup key=\\\"second group\\\" aria-label=\\\"Sort Direction\\\">\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={sortDirection === \\\"ascending\\\"} id=\\\"ascending\\\" key=\\\"ascending\\\">Ascending</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={sortDirection === \\\"descending\\\"} id=\\\"descending\\\" key=\\\"descending\\\">Descending</OptionsMenuItem>\\n        </OptionsMenuItemGroup>\\n      ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-multiple-options-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen}\\n        toggle={toggle}\\n        isGrouped />\\n    );\\n  }\\n}\",\n      \"title\": \"Multiple options\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Plain': function Plain(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\\n\\nclass Plain extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        isDisabledOpen: false,\\n        plainOption1: true,\\n        plainOption2: false,\\n        plainOption3: false,\\n        disabledPlainOption1: true,\\n        disabledPlainOption2: false,\\n        disabledPlainOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n\\n      this.onDisabledToggle = () => {\\n          this.setState({\\n              isDisabledOpen: !this.state.isDisabledOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, isDisabledOpen, plainOption1, plainOption2, plainOption3, disabledPlainOption1, disabledPlainOption2, disabledPlainOption3 } = this.state\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption1} id=\\\"plainOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption2} id=\\\"plainOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption3} id=\\\"plainOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n\\n    const disabledMenuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption1} id=\\\"disabledPlainOption1\\\" key=\\\"disabled option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption2} id=\\\"disabledPlainOption2\\\" key=\\\"disabled option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption3} id=\\\"disabledPlainOption3\\\" key=\\\"disabled option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggleTemplate = <SortAmountDownIcon aria-hidden=\\\"true\\\"/>\\n    \\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplate} aria-label=\\\"Sort by\\\" hideCaret/>\\n\\n    const disabledToggle = <OptionsMenuToggle isDisabled onToggle={this.onDisabledToggle} toggleTemplate={toggleTemplate} aria-label=\\\"Sort by\\\" hideCaret/>\\n\\n    return (\\n      <React.Fragment>\\n        <OptionsMenu id=\\\"options-menu-plain-disabled-example\\\" \\n          isPlain\\n          menuItems={disabledMenuItems}  \\n          isOpen={isDisabledOpen}\\n          toggle={disabledToggle}/>\\n        <OptionsMenu id=\\\"options-menu-plain-example\\\" \\n          isPlain\\n          menuItems={menuItems}  \\n          isOpen={isOpen}\\n          toggle={toggle}/>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Plain\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Align top': function AlignTop(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuDirection, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass Top extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Options menu\\\",\\n      topOption1: false,\\n      topOption2: false,\\n      topOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, topOption1, topOption2, topOption3, toggleTemplateText } = this.state\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption1} id=\\\"topOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption2} id=\\\"topOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption3} id=\\\"topOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-top-example\\\" \\n        direction={OptionsMenuDirection.up} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\",\n      \"title\": \"Align top\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Align right': function AlignRight(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuPosition, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass AlignRight extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Align right\\\",\\n      rightOption1: true,\\n      rightOption2: false,\\n      rightOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, toggleTemplateText, rightOption1, rightOption2, rightOption3 } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption1} id=\\\"rightOption1\\\" key=\\\"option 1\\\">Right option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption2} id=\\\"rightOption2\\\" key=\\\"option 2\\\">Right option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption3} id=\\\"rightOption3\\\" key=\\\"option 3\\\">Right option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-align-right-example\\\" \\n        position={OptionsMenuPosition.right} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\",\n      \"title\": \"Align right\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Plain with text': function PlainWithText(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggleWithText } from '@patternfly/react-core';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\\n\\nclass PlainWithText extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleText: <React.Fragment>Custom text</React.Fragment>,\\n        buttonContents: <CaretDownIcon/>,\\n        customOption1: true,\\n        customOption2: false,\\n        customOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.onToggle = () => {\\n        this.setState({\\n          isOpen: !this.state.isOpen\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleText, buttonContents } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption1} id=\\\"customOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption2} id=\\\"customOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption3} id=\\\"customOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggleWithText toggleText={toggleText} toggleButtonContents={buttonContents} onToggle={this.onToggle} />;\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-plain-with-text-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        isPlain\\n        isText\\n        toggle={toggle} />\\n    );\\n  }\\n}\",\n      \"title\": \"Plain with text\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Plain with text disabled': function PlainWithTextDisabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggleWithText } from '@patternfly/react-core';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\\n\\nclass PlainWithText extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleText: <React.Fragment>Custom text</React.Fragment>,\\n        buttonContents: <CaretDownIcon/>,\\n        customOption1: true,\\n        customOption2: false,\\n        customOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.onToggle = () => {\\n        this.setState({\\n          isOpen: !this.state.isOpen\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleText, buttonContents } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption1} id=\\\"customOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption2} id=\\\"customOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption3} id=\\\"customOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggleWithText isDisabled toggleText={toggleText} toggleButtonContents={buttonContents} onToggle={this.onToggle} />;\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-plain-with-text-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        isPlain\\n        isText\\n        toggle={toggle} />\\n    );\\n  }\\n}\",\n      \"title\": \"Plain with text disabled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Grouped items with titles': function GroupedItemsWithTitles(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle, OptionsMenuItemGroup } from '@patternfly/react-core';\\n\\nclass GroupedItems extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Options menu\\\",\\n      selectedOption: \\\"groupOption1\\\"\\n    };\\n    \\n    this.onToggle = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState(() => {\\n        return { selectedOption: id };\\n      });\\n    };\\n  }\\n  \\n  render() {\\n    const { isOpen, selectedOption, toggleTemplateText } = this.state;\\n    \\n    const menuGroups = [\\n      <OptionsMenuItemGroup hasSeparator key=\\\"group0\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption1\\\"} id=\\\"groupOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption2\\\"} id=\\\"groupOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>,\\n      <OptionsMenuItemGroup groupTitle=\\\"Group 1\\\" hasSeparator key=\\\"group1\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption3\\\"} id=\\\"groupOption3\\\" key=\\\"option 3\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption4\\\"} id=\\\"groupOption4\\\" key=\\\"option 4\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>,\\n      <OptionsMenuItemGroup groupTitle=\\\"Group 2\\\" key=\\\"group2\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption5\\\"} id=\\\"groupOption5\\\" key=\\\"option 5\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption6\\\"} id=\\\"groupOption6\\\" key=\\\"option 6\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n    \\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-align-right-example\\\" \\n        position={OptionsMenuPosition.right} \\n        menuItems={menuGroups} \\n        toggle={toggle} \\n        isOpen={isOpen} \\n        isGrouped />\\n    );\\n  }\\n}\",\n      \"title\": \"Grouped items with titles\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Single option with menu on document body': function SingleOptionWithMenuOnDocumentBody(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass SingleOption extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Options menu\\\",\\n        selectedOption: \\\"singleOption1\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { selectedOption: id };\\n        });\\n      };\\n      \\n    }\\n    \\n  render() {\\n    const { selectedOption, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption1\\\"} id=\\\"singleOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption2\\\"} id=\\\"singleOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption3\\\"} id=\\\"singleOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-option-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        toggle={toggle}\\n        menuAppendTo={() => document.body}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Single option with menu on document body\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Single option\"]), React.createElement(pageData.examples[\"Disabled\"]), React.createElement(pageData.examples[\"Multiple options\"]), React.createElement(pageData.examples[\"Plain\"]), React.createElement(pageData.examples[\"Align top\"]), React.createElement(pageData.examples[\"Align right\"]), React.createElement(pageData.examples[\"Plain with text\"]), React.createElement(pageData.examples[\"Plain with text disabled\"]), React.createElement(pageData.examples[\"Grouped items with titles\"]), React.createElement(pageData.examples[\"Single option with menu on document body\"]));\n};\n\nComponent.displayName = 'ComponentsOptionsMenuReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","CaretDownIcon","SortAmountDownIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/options-menu/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\nconst pageData = {\n  \"id\": \"Options menu\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/options-menu/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/OptionsMenu/examples/OptionsMenu.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"OptionsMenu\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Classes applied to root element of the options menu\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"direction\",\n          \"type\": \"'up' | 'down'\",\n          \"description\": \"Menu will open up or open down from the options menu toggle\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"Id of the root element of the options menu\",\n          \"required\": true\n        },\n        {\n          \"name\": \"isGrouped\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if menu is groupped\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if menu is open\"\n        },\n        {\n          \"name\": \"isPlain\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate the toggle has no border or background\"\n        },\n        {\n          \"name\": \"isText\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if toggle is textual toggle\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"menuAppendTo\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"'inline'\"\n        },\n        {\n          \"name\": \"menuItems\",\n          \"type\": \"React.ReactNode[]\",\n          \"description\": \"Array of OptionsMenuItem and/or OptionMenuGroup nodes that will be rendered in the options menu list\",\n          \"required\": true\n        },\n        {\n          \"name\": \"ouiaSafe\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"position\",\n          \"type\": \"'right' | 'left'\",\n          \"description\": \"Indicates where menu will be aligned horizontally\"\n        },\n        {\n          \"name\": \"toggle\",\n          \"type\": \"React.ReactElement\",\n          \"description\": \"Either an OptionsMenuToggle or an OptionsMenuToggleWithText to use to toggle the options menu\",\n          \"required\": true\n        }\n      ]\n    },\n    {\n      \"name\": \"OptionsMenuItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Anything which can be rendered as an options menu item\",\n          \"defaultValue\": \"null\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Classes applied to root element of an options menu item\"\n        },\n        {\n          \"name\": \"id\",\n          \"type\": \"string\",\n          \"description\": \"Unique id of this options menu item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Render options menu item as disabled option\"\n        },\n        {\n          \"name\": \"isSelected\",\n          \"type\": \"boolean\",\n          \"description\": \"Render options menu item as selected\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onSelect\",\n          \"type\": \"(event?: React.MouseEvent<HTMLAnchorElement> | React.KeyboardEvent) => void\",\n          \"description\": \"Callback for when this options menu item is selected\",\n          \"defaultValue\": \"() => null as any\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OptionsMenuSeparator\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"component\",\n          \"type\": \"No type info\",\n          \"defaultValue\": \"'li'\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OptionsMenuToggle\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Provides an accessible name for the button when an icon is used instead of text\",\n          \"defaultValue\": \"'Options menu'\"\n        },\n        {\n          \"name\": \"hideCaret\",\n          \"type\": \"boolean\",\n          \"description\": \"hide the toggle caret\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isActive\",\n          \"type\": \"boolean\",\n          \"description\": \"Forces display of the active state of the options menu\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Disables the options menu toggle\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if menu is open\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isPlain\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if the button is plain\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isSplitButton\",\n          \"type\": \"boolean\",\n          \"description\": \"\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onToggle\",\n          \"type\": \"(isOpen: boolean) => void\",\n          \"description\": \"Callback for when this options menu is toggled\"\n        },\n        {\n          \"name\": \"parentId\",\n          \"type\": \"string\",\n          \"description\": \"Id of the parent options menu component\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"toggleTemplate\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be rendered in the options menu toggle button\",\n          \"defaultValue\": \"<React.Fragment />\"\n        }\n      ]\n    },\n    {\n      \"name\": \"OptionsMenuToggleWithText\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-haspopup\",\n          \"type\": \"boolean | 'dialog' | 'menu' | 'listbox' | 'tree' | 'grid'\",\n          \"description\": \"Indicates that the element has a popup context menu or sub-level menu\"\n        },\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Provides an accessible name for the button when an icon is used instead of text\",\n          \"defaultValue\": \"'Options menu'\"\n        },\n        {\n          \"name\": \"isActive\",\n          \"type\": \"boolean\",\n          \"description\": \"Forces display of the active state of the options menu button\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Disables the options menu toggle\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if menu is open\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isPlain\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if the button is plain\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onEnter\",\n          \"type\": \"(event: React.MouseEvent<HTMLButtonElement> | React.KeyboardEvent<Element>) => void\",\n          \"description\": \"Inner function to indicate open on Enter\"\n        },\n        {\n          \"name\": \"onToggle\",\n          \"type\": \"(event: boolean) => void\",\n          \"description\": \"Callback for when this options menu is toggled\",\n          \"defaultValue\": \"() => null as any\"\n        },\n        {\n          \"name\": \"parentId\",\n          \"type\": \"string\",\n          \"description\": \"Id of the parent options menu component\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"toggleButtonContents\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be rendered inside the options menu toggle button\"\n        },\n        {\n          \"name\": \"toggleButtonContentsClassName\",\n          \"type\": \"string\",\n          \"description\": \"Classes to be added to the options menu toggle button\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"toggleText\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content to be rendered inside the options menu toggle as text or another non-interactive element\",\n          \"required\": true\n        },\n        {\n          \"name\": \"toggleTextClassName\",\n          \"type\": \"string\",\n          \"description\": \"classes to be added to the options menu toggle text\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-options-menu\"\n  ],\n  \"examples\": [\n    \"Single option\",\n    \"Disabled\",\n    \"Multiple options\",\n    \"Plain\",\n    \"Align top\",\n    \"Align right\",\n    \"Plain with text\",\n    \"Plain with text disabled\",\n    \"Grouped items with titles\",\n    \"Single option with menu on document body\"\n  ]\n};\npageData.liveContext = {\n  CaretDownIcon,\n  SortAmountDownIcon\n};\npageData.examples = {\n  'Single option': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass SingleOption extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Options menu\\\",\\n        selectedOption: \\\"singleOption1\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { selectedOption: id };\\n        });\\n      };\\n      \\n    }\\n    \\n  render() {\\n    const { selectedOption, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption1\\\"} id=\\\"singleOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption2\\\"} id=\\\"singleOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption3\\\"} id=\\\"singleOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-option-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        toggle={toggle}/>\\n    );\\n  }\\n}\",\"title\":\"Single option\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass DisabledOptionsMenu extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Disabled options menu\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n    }\\n    \\n  render() {\\n    const { toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [];\\n    const toggle = <OptionsMenuToggle isDisabled onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-disabled-example-toggle\\\" \\n        isOpen={isOpen} \\n        menuItems={menuItems}\\n        toggle={toggle}/>\\n    );\\n  }\\n}\",\"title\":\"Disabled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Multiple options': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuSeparator, OptionsMenuItemGroup, OptionsMenuToggle} from '@patternfly/react-core';\\n\\nclass MultipleOptions extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Sort by\\\",\\n        sortColumn: \\\"date\\\",\\n        sortDirection: \\\"ascending\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelectColumn = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { sortColumn: id };\\n        });\\n      };\\n      \\n      this.onSelectDirection = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { sortDirection: id };\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { sortColumn, sortDirection, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n        <OptionsMenuItemGroup key=\\\"first group\\\" aria-label=\\\"Sort Column\\\">\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"name\\\"} id=\\\"name\\\" key=\\\"name\\\">Name</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"date\\\"} id=\\\"date\\\" key=\\\"date\\\">Date</OptionsMenuItem>\\n          <OptionsMenuItem isDisabled onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"disabled\\\"} id=\\\"disabled\\\" key=\\\"disabled\\\">Disabled</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectColumn} isSelected={sortColumn === \\\"size\\\"} id=\\\"size\\\" key=\\\"size\\\">Size</OptionsMenuItem>\\n        </OptionsMenuItemGroup>,\\n        <OptionsMenuSeparator key=\\\"separator\\\"/>,\\n        <OptionsMenuItemGroup key=\\\"second group\\\" aria-label=\\\"Sort Direction\\\">\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={sortDirection === \\\"ascending\\\"} id=\\\"ascending\\\" key=\\\"ascending\\\">Ascending</OptionsMenuItem>\\n          <OptionsMenuItem onSelect={this.onSelectDirection} isSelected={sortDirection === \\\"descending\\\"} id=\\\"descending\\\" key=\\\"descending\\\">Descending</OptionsMenuItem>\\n        </OptionsMenuItemGroup>\\n      ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-multiple-options-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen}\\n        toggle={toggle}\\n        isGrouped />\\n    );\\n  }\\n}\",\"title\":\"Multiple options\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Plain': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\nimport SortAmountDownIcon from '@patternfly/react-icons/dist/esm/icons/sort-amount-down-icon';\\n\\nclass Plain extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        isDisabledOpen: false,\\n        plainOption1: true,\\n        plainOption2: false,\\n        plainOption3: false,\\n        disabledPlainOption1: true,\\n        disabledPlainOption2: false,\\n        disabledPlainOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n\\n      this.onDisabledToggle = () => {\\n          this.setState({\\n              isDisabledOpen: !this.state.isDisabledOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, isDisabledOpen, plainOption1, plainOption2, plainOption3, disabledPlainOption1, disabledPlainOption2, disabledPlainOption3 } = this.state\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption1} id=\\\"plainOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption2} id=\\\"plainOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={plainOption3} id=\\\"plainOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n\\n    const disabledMenuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption1} id=\\\"disabledPlainOption1\\\" key=\\\"disabled option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption2} id=\\\"disabledPlainOption2\\\" key=\\\"disabled option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={disabledPlainOption3} id=\\\"disabledPlainOption3\\\" key=\\\"disabled option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggleTemplate = <SortAmountDownIcon aria-hidden=\\\"true\\\"/>\\n    \\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplate} aria-label=\\\"Sort by\\\" hideCaret/>\\n\\n    const disabledToggle = <OptionsMenuToggle isDisabled onToggle={this.onDisabledToggle} toggleTemplate={toggleTemplate} aria-label=\\\"Sort by\\\" hideCaret/>\\n\\n    return (\\n      <React.Fragment>\\n        <OptionsMenu id=\\\"options-menu-plain-disabled-example\\\" \\n          isPlain\\n          menuItems={disabledMenuItems}  \\n          isOpen={isDisabledOpen}\\n          toggle={disabledToggle}/>\\n        <OptionsMenu id=\\\"options-menu-plain-example\\\" \\n          isPlain\\n          menuItems={menuItems}  \\n          isOpen={isOpen}\\n          toggle={toggle}/>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Plain\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Align top': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuDirection, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass Top extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Options menu\\\",\\n      topOption1: false,\\n      topOption2: false,\\n      topOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, topOption1, topOption2, topOption3, toggleTemplateText } = this.state\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption1} id=\\\"topOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption2} id=\\\"topOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={topOption3} id=\\\"topOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-top-example\\\" \\n        direction={OptionsMenuDirection.up} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\",\"title\":\"Align top\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Align right': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuPosition, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass AlignRight extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Align right\\\",\\n      rightOption1: true,\\n      rightOption2: false,\\n      rightOption3: false\\n    };\\n\\n    this.onToggle = () => {\\n        this.setState({\\n            isOpen: !this.state.isOpen\\n        });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState((prevState) => {\\n        return { [id]: !prevState[id] };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isOpen, toggleTemplateText, rightOption1, rightOption2, rightOption3 } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption1} id=\\\"rightOption1\\\" key=\\\"option 1\\\">Right option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption2} id=\\\"rightOption2\\\" key=\\\"option 2\\\">Right option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={rightOption3} id=\\\"rightOption3\\\" key=\\\"option 3\\\">Right option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-align-right-example\\\" \\n        position={OptionsMenuPosition.right} \\n        menuItems={menuItems} \\n        toggle={toggle} \\n        isOpen={isOpen} />\\n    );\\n  }\\n}\",\"title\":\"Align right\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Plain with text': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggleWithText } from '@patternfly/react-core';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\\n\\nclass PlainWithText extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleText: <React.Fragment>Custom text</React.Fragment>,\\n        buttonContents: <CaretDownIcon/>,\\n        customOption1: true,\\n        customOption2: false,\\n        customOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.onToggle = () => {\\n        this.setState({\\n          isOpen: !this.state.isOpen\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleText, buttonContents } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption1} id=\\\"customOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption2} id=\\\"customOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption3} id=\\\"customOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggleWithText toggleText={toggleText} toggleButtonContents={buttonContents} onToggle={this.onToggle} />;\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-plain-with-text-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        isPlain\\n        isText\\n        toggle={toggle} />\\n    );\\n  }\\n}\",\"title\":\"Plain with text\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Plain with text disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggleWithText } from '@patternfly/react-core';\\nimport CaretDownIcon from '@patternfly/react-icons/dist/esm/icons/caret-down-icon';\\n\\nclass PlainWithText extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleText: <React.Fragment>Custom text</React.Fragment>,\\n        buttonContents: <CaretDownIcon/>,\\n        customOption1: true,\\n        customOption2: false,\\n        customOption3: false\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState((prevState) => {\\n          return { [id]: !prevState[id] };\\n        });\\n      };\\n\\n      this.onToggle = () => {\\n        this.setState({\\n          isOpen: !this.state.isOpen\\n        });\\n      };\\n    }\\n\\n  render() {\\n    const { isOpen, toggleText, buttonContents } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption1} id=\\\"customOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption2} id=\\\"customOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={this.state.customOption3} id=\\\"customOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggleWithText isDisabled toggleText={toggleText} toggleButtonContents={buttonContents} onToggle={this.onToggle} />;\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-plain-with-text-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        isPlain\\n        isText\\n        toggle={toggle} />\\n    );\\n  }\\n}\",\"title\":\"Plain with text disabled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Grouped items with titles': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle, OptionsMenuItemGroup } from '@patternfly/react-core';\\n\\nclass GroupedItems extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isOpen: false,\\n      toggleTemplateText: \\\"Options menu\\\",\\n      selectedOption: \\\"groupOption1\\\"\\n    };\\n    \\n    this.onToggle = () => {\\n      this.setState({\\n        isOpen: !this.state.isOpen\\n      });\\n    };\\n    \\n    this.onSelect = event => {\\n      const id = event.currentTarget.id;\\n      this.setState(() => {\\n        return { selectedOption: id };\\n      });\\n    };\\n  }\\n  \\n  render() {\\n    const { isOpen, selectedOption, toggleTemplateText } = this.state;\\n    \\n    const menuGroups = [\\n      <OptionsMenuItemGroup hasSeparator key=\\\"group0\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption1\\\"} id=\\\"groupOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption2\\\"} id=\\\"groupOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>,\\n      <OptionsMenuItemGroup groupTitle=\\\"Group 1\\\" hasSeparator key=\\\"group1\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption3\\\"} id=\\\"groupOption3\\\" key=\\\"option 3\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption4\\\"} id=\\\"groupOption4\\\" key=\\\"option 4\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>,\\n      <OptionsMenuItemGroup groupTitle=\\\"Group 2\\\" key=\\\"group2\\\">\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption5\\\"} id=\\\"groupOption5\\\" key=\\\"option 5\\\">Option 1</OptionsMenuItem>\\n        <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"groupOption6\\\"} id=\\\"groupOption6\\\" key=\\\"option 6\\\">Option 2</OptionsMenuItem>\\n      </OptionsMenuItemGroup>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n    \\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-align-right-example\\\" \\n        position={OptionsMenuPosition.right} \\n        menuItems={menuGroups} \\n        toggle={toggle} \\n        isOpen={isOpen} \\n        isGrouped />\\n    );\\n  }\\n}\",\"title\":\"Grouped items with titles\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Single option with menu on document body': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { OptionsMenu, OptionsMenuItem, OptionsMenuToggle } from '@patternfly/react-core';\\n\\nclass SingleOption extends React.Component {\\n  constructor(props) {\\n      super(props);\\n      this.state = {\\n        isOpen: false,\\n        toggleTemplateText: \\\"Options menu\\\",\\n        selectedOption: \\\"singleOption1\\\"\\n      };\\n\\n      this.onToggle = () => {\\n          this.setState({\\n              isOpen: !this.state.isOpen\\n          });\\n      };\\n      \\n      this.onSelect = event => {\\n        const id = event.currentTarget.id;\\n        this.setState(() => {\\n          return { selectedOption: id };\\n        });\\n      };\\n      \\n    }\\n    \\n  render() {\\n    const { selectedOption, toggleTemplateText, isOpen } = this.state;\\n    const menuItems = [\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption1\\\"} id=\\\"singleOption1\\\" key=\\\"option 1\\\">Option 1</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption2\\\"} id=\\\"singleOption2\\\" key=\\\"option 2\\\">Option 2</OptionsMenuItem>,\\n      <OptionsMenuItem onSelect={this.onSelect} isSelected={selectedOption === \\\"singleOption3\\\"} id=\\\"singleOption3\\\" key=\\\"option 3\\\">Option 3</OptionsMenuItem>\\n    ];\\n    const toggle = <OptionsMenuToggle onToggle={this.onToggle} toggleTemplate={toggleTemplateText} />\\n\\n    return (\\n      <OptionsMenu \\n        id=\\\"options-menu-single-option-example\\\" \\n        menuItems={menuItems} \\n        isOpen={isOpen} \\n        toggle={toggle}\\n        menuAppendTo={() => document.body}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Single option with menu on document body\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Single option\"])}\n    {React.createElement(pageData.examples[\"Disabled\"])}\n    {React.createElement(pageData.examples[\"Multiple options\"])}\n    {React.createElement(pageData.examples[\"Plain\"])}\n    {React.createElement(pageData.examples[\"Align top\"])}\n    {React.createElement(pageData.examples[\"Align right\"])}\n    {React.createElement(pageData.examples[\"Plain with text\"])}\n    {React.createElement(pageData.examples[\"Plain with text disabled\"])}\n    {React.createElement(pageData.examples[\"Grouped items with titles\"])}\n    {React.createElement(pageData.examples[\"Single option with menu on document body\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsOptionsMenuReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}