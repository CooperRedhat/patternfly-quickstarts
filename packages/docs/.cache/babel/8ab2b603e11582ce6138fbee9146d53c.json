{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nvar pageData = {\n  \"id\": \"Data list\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/data-list/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DataListDemo.md\",\n  \"examples\": [\"Expandable control in toolbar\"]\n};\npageData.liveContext = {\n  CodeBranchIcon: CodeBranchIcon,\n  AngleDownIcon: AngleDownIcon,\n  AngleRightIcon: AngleRightIcon,\n  css: css\n};\npageData.examples = {\n  'Expandable control in toolbar': function ExpandableControlInToolbar(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListItemRow,\\n  DataListCell,\\n  DataListAction,\\n  DataListToggle,\\n  DataListContent,\\n  DataListItemCells,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  KebabToggle,\\n  Toolbar,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ToolbarExpandIconWrapper,\\n  ToolbarContent,\\n  SearchInput,\\n  Tooltip\\n} from '@patternfly/react-core';\\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\nclass ExpandableDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      expanded: ['ex-toggle1', 'ex-toggle3'],\\n      isOpen1: false,\\n      isOpen2: false,\\n      isOpen3: false,\\n      allExpanded: false\\n    };\\n\\n    this.onToggleAll = () => {\\n      this.setState(\\n        {\\n          allExpanded: !this.state.allExpanded\\n        },\\n        () => {\\n          if (this.state.allExpanded) {\\n            this.setState({\\n              expanded: ['ex-toggle1', 'ex-toggle2', 'ex-toggle3']\\n            });\\n          } else {\\n            this.setState({\\n              expanded: []\\n            });\\n          }\\n        }\\n      );\\n    };\\n\\n    this.onToggle1 = isOpen1 => {\\n      this.setState({ isOpen1 });\\n    };\\n\\n    this.onToggle2 = isOpen2 => {\\n      this.setState({ isOpen2 });\\n    };\\n\\n    this.onToggle3 = isOpen3 => {\\n      this.setState({ isOpen3 });\\n    };\\n\\n    this.onSelect1 = event => {\\n      this.setState(prevState => ({\\n        isOpen1: !prevState.isOpen1\\n      }));\\n    };\\n\\n    this.onSelect2 = event => {\\n      this.setState(prevState => ({\\n        isOpen2: !prevState.isOpen2\\n      }));\\n    };\\n\\n    this.onSelect3 = event => {\\n      this.setState(prevState => ({\\n        isOpen3: !prevState.isOpen3\\n      }));\\n    };\\n  }\\n\\n  renderToolbar() {\\n    return (\\n      <React.Fragment>\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarGroup>\\n              <ToolbarItem variant=\\\"expand-all\\\" isAllExpanded={this.state.allExpanded}>\\n                <Tooltip\\n                  position=\\\"right\\\"\\n                  content={\\n                    <div>\\n                      {this.state.allExpanded && 'Collapse all rows'}\\n                      {!this.state.allExpanded && 'Expand all rows'}\\n                    </div>\\n                  }\\n                >\\n                  <Button\\n                    onClick={this.onToggleAll}\\n                    variant=\\\"plain\\\"\\n                    aria-label={this.state.allExpanded ? 'Collapse all rows' : 'Expand all rows'}\\n                  >\\n                    <ToolbarExpandIconWrapper>\\n                      <AngleRightIcon />\\n                    </ToolbarExpandIconWrapper>\\n                  </Button>\\n                </Tooltip>\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <SearchInput aria-label=\\\"search input example\\\" />\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <Button variant=\\\"secondary\\\">Action</Button>\\n              </ToolbarItem>\\n              <ToolbarItem variant=\\\"separator\\\" />\\n              <ToolbarItem>\\n                <Button variant=\\\"primary\\\">Action</Button>\\n              </ToolbarItem>\\n            </ToolbarGroup>\\n          </ToolbarContent>\\n        </Toolbar>\\n      </React.Fragment>\\n    );\\n  }\\n\\n  render() {\\n    const toggle = id => {\\n      const expanded = this.state.expanded;\\n      const index = expanded.indexOf(id);\\n      const newExpanded =\\n        index >= 0 ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)] : [...expanded, id];\\n      this.setState(() => ({ expanded: newExpanded }));\\n      if (newExpanded.length === 3) {\\n        this.setState(() => ({ allExpanded: true }));\\n      } else if (newExpanded.length === 0) {\\n        this.setState(() => ({ allExpanded: false }));\\n      }\\n    };\\n\\n    return (\\n      <React.Fragment>\\n        {this.renderToolbar()}\\n        <br />\\n        <br />\\n        <DataList aria-label=\\\"Expandable data list example\\\">\\n          <DataListItem aria-labelledby=\\\"ex-item1\\\" isExpanded={this.state.expanded.includes('ex-toggle1')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle1')}\\n                isExpanded={this.state.expanded.includes('ex-toggle1')}\\n                id=\\\"ex-toggle1\\\"\\n                aria-controls=\\\"ex-expand1\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"primary content\\\">\\n                    <div id=\\\"ex-item1\\\">Primary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                    <a href=\\\"#\\\">link</a>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item1 ex-action1\\\"\\n                id=\\\"ex-action1\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen1}\\n                  onSelect={this.onSelect1}\\n                  toggle={<KebabToggle onToggle={this.onToggle1} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand1\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle1')}\\n            >\\n              <p>\\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n                dolore magna aliqua.\\n              </p>\\n            </DataListContent>\\n          </DataListItem>\\n          <DataListItem aria-labelledby=\\\"ex-item2\\\" isExpanded={this.state.expanded.includes('ex-toggle2')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle2')}\\n                isExpanded={this.state.expanded.includes('ex-toggle2')}\\n                id=\\\"ex-toggle2\\\"\\n                aria-controls=\\\"ex-expand2\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <div id=\\\"ex-item2\\\">Secondary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content3\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item2 ex-action2\\\"\\n                id=\\\"ex-action2\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen2}\\n                  onSelect={this.onSelect2}\\n                  toggle={<KebabToggle onToggle={this.onToggle2} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand2\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle2')}\\n            >\\n              <p>\\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n                dolore magna aliqua.\\n              </p>\\n            </DataListContent>\\n          </DataListItem>\\n          <DataListItem aria-labelledby=\\\"ex-item3\\\" isExpanded={this.state.expanded.includes('ex-toggle3')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle3')}\\n                isExpanded={this.state.expanded.includes('ex-toggle3')}\\n                id=\\\"ex-toggle3\\\"\\n                aria-controls=\\\"ex-expand3\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"tertiary content\\\">\\n                    <div id=\\\"ex-item3\\\">Tertiary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <span>Lorem ipsum dolor sit amet.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item3 ex-action3\\\"\\n                id=\\\"ex-action3\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen3}\\n                  onSelect={this.onSelect3}\\n                  toggle={<KebabToggle onToggle={this.onToggle3} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand3\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle3')}\\n              hasNoPadding\\n            >\\n              This expanded section has no padding.\\n            </DataListContent>\\n          </DataListItem>\\n        </DataList>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Expandable control in toolbar\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Expandable control in toolbar\"]));\n};\n\nComponent.displayName = 'ComponentsDataListReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","CodeBranchIcon","AngleDownIcon","AngleRightIcon","css","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/data-list/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\nimport AngleDownIcon from '@patternfly/react-icons/dist/esm/icons/angle-down-icon';\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\nimport { css } from '@patternfly/react-styles';\nconst pageData = {\n  \"id\": \"Data list\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/data-list/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DataListDemo.md\",\n  \"examples\": [\n    \"Expandable control in toolbar\"\n  ]\n};\npageData.liveContext = {\n  CodeBranchIcon,\n  AngleDownIcon,\n  AngleRightIcon,\n  css\n};\npageData.examples = {\n  'Expandable control in toolbar': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport {\\n  Button,\\n  DataList,\\n  DataListItem,\\n  DataListItemRow,\\n  DataListCell,\\n  DataListAction,\\n  DataListToggle,\\n  DataListContent,\\n  DataListItemCells,\\n  Dropdown,\\n  DropdownItem,\\n  DropdownPosition,\\n  KebabToggle,\\n  Toolbar,\\n  ToolbarGroup,\\n  ToolbarItem,\\n  ToolbarExpandIconWrapper,\\n  ToolbarContent,\\n  SearchInput,\\n  Tooltip\\n} from '@patternfly/react-core';\\nimport CodeBranchIcon from '@patternfly/react-icons/dist/esm/icons/code-branch-icon';\\nimport AngleRightIcon from '@patternfly/react-icons/dist/esm/icons/angle-right-icon';\\n\\nclass ExpandableDataList extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      expanded: ['ex-toggle1', 'ex-toggle3'],\\n      isOpen1: false,\\n      isOpen2: false,\\n      isOpen3: false,\\n      allExpanded: false\\n    };\\n\\n    this.onToggleAll = () => {\\n      this.setState(\\n        {\\n          allExpanded: !this.state.allExpanded\\n        },\\n        () => {\\n          if (this.state.allExpanded) {\\n            this.setState({\\n              expanded: ['ex-toggle1', 'ex-toggle2', 'ex-toggle3']\\n            });\\n          } else {\\n            this.setState({\\n              expanded: []\\n            });\\n          }\\n        }\\n      );\\n    };\\n\\n    this.onToggle1 = isOpen1 => {\\n      this.setState({ isOpen1 });\\n    };\\n\\n    this.onToggle2 = isOpen2 => {\\n      this.setState({ isOpen2 });\\n    };\\n\\n    this.onToggle3 = isOpen3 => {\\n      this.setState({ isOpen3 });\\n    };\\n\\n    this.onSelect1 = event => {\\n      this.setState(prevState => ({\\n        isOpen1: !prevState.isOpen1\\n      }));\\n    };\\n\\n    this.onSelect2 = event => {\\n      this.setState(prevState => ({\\n        isOpen2: !prevState.isOpen2\\n      }));\\n    };\\n\\n    this.onSelect3 = event => {\\n      this.setState(prevState => ({\\n        isOpen3: !prevState.isOpen3\\n      }));\\n    };\\n  }\\n\\n  renderToolbar() {\\n    return (\\n      <React.Fragment>\\n        <Toolbar>\\n          <ToolbarContent>\\n            <ToolbarGroup>\\n              <ToolbarItem variant=\\\"expand-all\\\" isAllExpanded={this.state.allExpanded}>\\n                <Tooltip\\n                  position=\\\"right\\\"\\n                  content={\\n                    <div>\\n                      {this.state.allExpanded && 'Collapse all rows'}\\n                      {!this.state.allExpanded && 'Expand all rows'}\\n                    </div>\\n                  }\\n                >\\n                  <Button\\n                    onClick={this.onToggleAll}\\n                    variant=\\\"plain\\\"\\n                    aria-label={this.state.allExpanded ? 'Collapse all rows' : 'Expand all rows'}\\n                  >\\n                    <ToolbarExpandIconWrapper>\\n                      <AngleRightIcon />\\n                    </ToolbarExpandIconWrapper>\\n                  </Button>\\n                </Tooltip>\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <SearchInput aria-label=\\\"search input example\\\" />\\n              </ToolbarItem>\\n              <ToolbarItem>\\n                <Button variant=\\\"secondary\\\">Action</Button>\\n              </ToolbarItem>\\n              <ToolbarItem variant=\\\"separator\\\" />\\n              <ToolbarItem>\\n                <Button variant=\\\"primary\\\">Action</Button>\\n              </ToolbarItem>\\n            </ToolbarGroup>\\n          </ToolbarContent>\\n        </Toolbar>\\n      </React.Fragment>\\n    );\\n  }\\n\\n  render() {\\n    const toggle = id => {\\n      const expanded = this.state.expanded;\\n      const index = expanded.indexOf(id);\\n      const newExpanded =\\n        index >= 0 ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)] : [...expanded, id];\\n      this.setState(() => ({ expanded: newExpanded }));\\n      if (newExpanded.length === 3) {\\n        this.setState(() => ({ allExpanded: true }));\\n      } else if (newExpanded.length === 0) {\\n        this.setState(() => ({ allExpanded: false }));\\n      }\\n    };\\n\\n    return (\\n      <React.Fragment>\\n        {this.renderToolbar()}\\n        <br />\\n        <br />\\n        <DataList aria-label=\\\"Expandable data list example\\\">\\n          <DataListItem aria-labelledby=\\\"ex-item1\\\" isExpanded={this.state.expanded.includes('ex-toggle1')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle1')}\\n                isExpanded={this.state.expanded.includes('ex-toggle1')}\\n                id=\\\"ex-toggle1\\\"\\n                aria-controls=\\\"ex-expand1\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"primary content\\\">\\n                    <div id=\\\"ex-item1\\\">Primary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                    <a href=\\\"#\\\">link</a>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item1 ex-action1\\\"\\n                id=\\\"ex-action1\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen1}\\n                  onSelect={this.onSelect1}\\n                  toggle={<KebabToggle onToggle={this.onToggle1} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand1\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle1')}\\n            >\\n              <p>\\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n                dolore magna aliqua.\\n              </p>\\n            </DataListContent>\\n          </DataListItem>\\n          <DataListItem aria-labelledby=\\\"ex-item2\\\" isExpanded={this.state.expanded.includes('ex-toggle2')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle2')}\\n                isExpanded={this.state.expanded.includes('ex-toggle2')}\\n                id=\\\"ex-toggle2\\\"\\n                aria-controls=\\\"ex-expand2\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <div id=\\\"ex-item2\\\">Secondary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content3\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item2 ex-action2\\\"\\n                id=\\\"ex-action2\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen2}\\n                  onSelect={this.onSelect2}\\n                  toggle={<KebabToggle onToggle={this.onToggle2} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand2\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle2')}\\n            >\\n              <p>\\n                Lorem ipsum dolor sit amet, consectetur adipisicing elit, sed do eiusmod tempor incididunt ut labore et\\n                dolore magna aliqua.\\n              </p>\\n            </DataListContent>\\n          </DataListItem>\\n          <DataListItem aria-labelledby=\\\"ex-item3\\\" isExpanded={this.state.expanded.includes('ex-toggle3')}>\\n            <DataListItemRow>\\n              <DataListToggle\\n                onClick={() => toggle('ex-toggle3')}\\n                isExpanded={this.state.expanded.includes('ex-toggle3')}\\n                id=\\\"ex-toggle3\\\"\\n                aria-controls=\\\"ex-expand3\\\"\\n              />\\n              <DataListItemCells\\n                dataListCells={[\\n                  <DataListCell isIcon key=\\\"icon\\\">\\n                    <CodeBranchIcon />\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"tertiary content\\\">\\n                    <div id=\\\"ex-item3\\\">Tertiary content</div>\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content\\\">\\n                    <span>Lorem ipsum dolor sit amet.</span>\\n                  </DataListCell>,\\n                  <DataListCell key=\\\"secondary content 2\\\">\\n                    <span>Lorem ipsum dolor sit amet, consectetur adipiscing elit.</span>\\n                  </DataListCell>\\n                ]}\\n              />\\n              <DataListAction\\n                aria-labelledby=\\\"ex-item3 ex-action3\\\"\\n                id=\\\"ex-action3\\\"\\n                aria-label=\\\"Actions\\\"\\n                isPlainButtonAction\\n              >\\n                <Dropdown\\n                  isPlain\\n                  position={DropdownPosition.right}\\n                  isOpen={this.state.isOpen3}\\n                  onSelect={this.onSelect3}\\n                  toggle={<KebabToggle onToggle={this.onToggle3} />}\\n                  dropdownItems={[\\n                    <DropdownItem key=\\\"link\\\">Link</DropdownItem>,\\n                    <DropdownItem key=\\\"action\\\" component=\\\"button\\\">\\n                      Action\\n                    </DropdownItem>,\\n                    <DropdownItem key=\\\"disabled link\\\" isDisabled>\\n                      Disabled Link\\n                    </DropdownItem>\\n                  ]}\\n                />\\n              </DataListAction>\\n            </DataListItemRow>\\n            <DataListContent\\n              aria-label=\\\"Primary Content Details\\\"\\n              id=\\\"ex-expand3\\\"\\n              isHidden={!this.state.expanded.includes('ex-toggle3')}\\n              hasNoPadding\\n            >\\n              This expanded section has no padding.\\n            </DataListContent>\\n          </DataListItem>\\n        </DataList>\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Expandable control in toolbar\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Expandable control in toolbar\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsDataListReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,OAAOC,aAAP,MAA0B,wDAA1B;AACA,OAAOC,cAAP,MAA2B,yDAA3B;AACA,SAASC,GAAT,QAAoB,0BAApB;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,WADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,mCAJO;EAKf,cAAc,sHALC;EAMf,YAAY,CACV,+BADU;AANG,CAAjB;AAUAA,QAAQ,CAACC,WAAT,GAAuB;EACrBL,cAAc,EAAdA,cADqB;EAErBC,aAAa,EAAbA,aAFqB;EAGrBC,cAAc,EAAdA,cAHqB;EAIrBC,GAAG,EAAHA;AAJqB,CAAvB;AAMAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,iCAAiC,oCAAAC,KAAK;IAAA,oBACpC,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,w8XAA9C;MAAu/X,SAAQ,+BAA//X;MAA+hY,QAAO;IAAtiY,GADoC;EAAA;AADpB,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGb,KAAK,CAACc,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,+BAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,kCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}