{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Slider, Button, Text, TextVariants } from '@patternfly/react-core';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport LockOpenIcon from '@patternfly/react-icons/dist/esm/icons/lock-open-icon';\nvar pageData = {\n  \"id\": \"Slider\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/slider/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Slider/examples/Slider.md\",\n  \"propComponents\": [{\n    \"name\": \"Slider\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"areCustomStepsContinuous\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the slider is is discrete for custom steps.  This will cause the slider to snap to the closest value.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the spinner.\"\n    }, {\n      \"name\": \"customSteps\",\n      \"type\": \"SliderStepObject[]\",\n      \"description\": \"Array of custom slider step objects (value and label of each step) for the slider.\"\n    }, {\n      \"name\": \"hasTooltipOverThumb\",\n      \"type\": \"boolean\",\n      \"description\": \"\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"inputAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label for the input field\",\n      \"defaultValue\": \"'Slider value input'\"\n    }, {\n      \"name\": \"inputLabel\",\n      \"type\": \"string | number\",\n      \"description\": \"Label that is place after the input field\"\n    }, {\n      \"name\": \"inputPosition\",\n      \"type\": \"'aboveThumb' | 'right'\",\n      \"description\": \"Position of the input\",\n      \"defaultValue\": \"'right'\"\n    }, {\n      \"name\": \"inputValue\",\n      \"type\": \"number\",\n      \"description\": \"Value displayed in the input field\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Adds disabled styling and disables the slider and the input component is present\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isInputVisible\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to show value input field\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"leftActions\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Actions placed to the left of the slider\"\n    }, {\n      \"name\": \"max\",\n      \"type\": \"number\",\n      \"description\": \"The maximum permitted value\",\n      \"defaultValue\": \"100\"\n    }, {\n      \"name\": \"min\",\n      \"type\": \"number\",\n      \"description\": \"Minimum permitted value\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(\\n  value: number,\\n  inputValue?: number,\\n  setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\\n) => void\",\n      \"description\": \"Value change callback. This is called when the slider value changes\"\n    }, {\n      \"name\": \"rightActions\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Actions placed to the right of the slider\"\n    }, {\n      \"name\": \"showBoundaries\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if boundaries should be shown for slider that does not have custom steps\",\n      \"defaultValue\": \"true\"\n    }, {\n      \"name\": \"showTicks\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to indicate if ticks should be shown for slider that does not have custom steps\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"step\",\n      \"type\": \"number\",\n      \"description\": \"The step interval\",\n      \"defaultValue\": \"1\"\n    }, {\n      \"name\": \"thumbAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"\",\n      \"defaultValue\": \"'Value'\"\n    }, {\n      \"name\": \"value\",\n      \"type\": \"number\",\n      \"description\": \"Current value\",\n      \"defaultValue\": \"0\"\n    }]\n  }, {\n    \"name\": \"SliderStepObject\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"isLabelHidden\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to hide the label\"\n    }, {\n      \"name\": \"label\",\n      \"type\": \"string\",\n      \"description\": \"The display label for the step value. This is also used for the aria-valuetext\",\n      \"required\": true\n    }, {\n      \"name\": \"value\",\n      \"type\": \"number\",\n      \"description\": \"Value of the step. This value is a percentage of the slider where the  tick is drawn.\",\n      \"required\": true\n    }]\n  }],\n  \"beta\": true,\n  \"cssPrefix\": [\"pf-c-slider\"],\n  \"examples\": [\"Discrete\", \"Continuous\", \"Value input\", \"Thumb value input\", \"Actions\", \"Disabled\"]\n};\npageData.liveContext = {\n  Slider: Slider,\n  Button: Button,\n  Text: Text,\n  TextVariants: TextVariants,\n  MinusIcon: MinusIcon,\n  PlusIcon: PlusIcon,\n  LockIcon: LockIcon,\n  LockOpenIcon: LockOpenIcon\n};\npageData.examples = {\n  'Discrete': function Discrete(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass DiscreteInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 50,\\n      value2: 50,\\n      value3: 25,\\n      value4: 50,\\n      value5: 50,\\n      value6: 3\\n    };\\n\\n    this.steps = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.stepsDiscreteWithMax = [\\n      { value: 0, label: \\\"A\\\" },\\n      { value: 1, label: \\\"B\\\" },\\n      { value: 2, label: \\\"C\\\" },\\n      { value: 3, label: \\\"D\\\" },\\n      { value: 4, label: \\\"E\\\" },\\n      { value: 5, label: \\\"F\\\" }\\n    ];\\n\\n    this.onChange = value => {\\n        this.setState({\\n          value1: value\\n        });\\n    };\\n\\n    this.onChange2 = value => {\\n        this.setState({\\n          value2: value\\n        });\\n    };\\n\\n    this.onChange3 = value => {\\n        this.setState({\\n          value3: value\\n        });\\n    };\\n\\n    this.onChange4 = value => {\\n        this.setState({\\n          value4: value\\n        });\\n    };\\n\\n    this.onChange5 = value => {\\n        this.setState({\\n          value5: value\\n        });\\n    };\\n\\n    this.onChange6 = value => {\\n        this.setState({\\n          value6: value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    const step = this.steps.find(step => step.value === this.state.value1);\\n    const displayValue = step ? step.label : 0;\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {displayValue}</Text>\\n        <Slider value={this.state.value1} onChange={this.onChange} customSteps={this.steps} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value2)}</Text>\\n        <Text component={TextVariants.small}>(min = 0, max = 200, step = 50) </Text>\\n        <Slider value={this.state.value2} onChange={this.onChange2} max={200} step={50} showTicks/>\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value3)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries not shown) </Text>\\n        <Slider value={this.state.value3} onChange={this.onChange3} min={-25} max={75} step={10} showTicks showBoundaries={false}/>\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value4)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries shown) </Text>\\n        <Slider value={this.state.value4} onChange={this.onChange4} min={-25} max={75} step={10} showTicks />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value5)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries shown, ticks not shown) </Text>\\n        <Slider value={this.state.value5} onChange={this.onChange5} min={-25} max={75} step={10} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value6)}</Text>\\n        <Text component={TextVariants.small}>(max = 5, custom steps) </Text>\\n        <Slider\\n            value={this.state.value6}\\n            showTicks\\n            max={5}\\n            customSteps={this.stepsDiscreteWithMax}\\n            onChange={this.onChange6}\\n          />\\n          <br />\\n      </>\\n    );\\n  }\\n}\",\n      \"title\": \"Discrete\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Continuous': function Continuous(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Checkbox, Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass ContinuousInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      hasTooltipOverThumb: false,\\n      value: 50,\\n      valueCustom: 50\\n    };\\n\\n    this.onChange = value => {\\n        this.setState({\\n          value: value\\n        });\\n    };\\n\\n    this.onChangeCustom = value => {\\n        this.setState({\\n          valueCustom: value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Checkbox\\n          id=\\\"thumb-has-tooltip\\\"\\n          label=\\\"hasTooltipOverThumb\\\"\\n          isChecked={this.state.hasTooltipOverThumb}\\n          onChange={hasTooltipOverThumb => this.setState({ hasTooltipOverThumb })}\\n          style={{ marginBottom: 20 }} />\\n        <Text component={TextVariants.h3}>Slider Value is: {this.state.value}</Text>\\n        <Slider\\n          hasTooltipOverThumb={this.state.hasTooltipOverThumb}\\n          value={this.state.value}\\n          onChange={this.onChange} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {this.state.valueCustom}</Text>\\n        <Slider\\n          onChange={this.onChangeCustom}\\n          value={this.state.valueCustom}\\n          areCustomStepsContinuous\\n          hasTooltipOverThumb={this.state.hasTooltipOverThumb}\\n          customSteps={[\\n            { value: 0, label: '0%' },\\n            { value: 100, label: '100%' }\\n          ]}\\n        />\\n      </>\\n    );\\n  }\\n}\",\n      \"title\": \"Continuous\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Value input': function ValueInput(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Slider } from '@patternfly/react-core';\\n\\nclass ValueInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      valueDiscrete: 62.5,\\n      inputValueDiscrete: 5,\\n      valuePercent: 50,\\n      inputValuePercent: 50,\\n      valueContinuous: 50,\\n      inputValueContinuous: 50\\n    };\\n\\n    this.stepsDiscrete = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.stepsPercent = [\\n      { value: 0, label: '0%' },\\n      { value: 25, label: '25%', isLabelHidden: true },\\n      { value: 50, label: '50%' },\\n      { value: 75, label: '75%', isLabelHidden: true },\\n      { value: 100, label: '100%' }\\n    ];\\n\\n    this.onChangeDiscrete = (value, inputValue, setLocalInputValue) => {\\n\\n      let newValue;\\n      let newInputValue;\\n\\n      if (inputValue === undefined) { \\n        const step = this.stepsDiscrete.find(step => step.value === value);\\n        newInputValue = step ? step.label : 0;\\n        newInputValue = Number(newInputValue);\\n        newValue = value;\\n      } else {\\n        const maxValue =  Number(this.stepsDiscrete[this.stepsDiscrete.length -1].label);\\n        if (inputValue > maxValue) {\\n          newValue = Number(this.stepsDiscrete[this.stepsDiscrete.length -1].value);\\n          newInputValue =  maxValue;\\n          setLocalInputValue(maxValue);\\n        } else {\\n          const minValue =  Number(this.stepsDiscrete[0].label);\\n          if (inputValue < minValue) {\\n            newValue = Number(this.stepsDiscrete[0].value);\\n            newInputValue =  minValue;\\n            setLocalInputValue(minValue);\\n          } else {\\n            const stepIndex = this.stepsDiscrete.findIndex(step => Number(step.label) >= inputValue);\\n            if (Number(this.stepsDiscrete[stepIndex].label) === inputValue) {\\n              newValue = this.stepsDiscrete[stepIndex].value;\\n              newInputValue = inputValue;\\n            } else {\\n              const midpoint = (Number(this.stepsDiscrete[stepIndex].label) + Number(this.stepsDiscrete[stepIndex - 1].label)) / 2;\\n              if (midpoint > inputValue) {\\n                newValue = this.stepsDiscrete[stepIndex - 1].value;\\n                newInputValue = Number(this.stepsDiscrete[stepIndex - 1].label);\\n              } else {\\n                newValue = this.stepsDiscrete[stepIndex].value;\\n                newInputValue = Number(this.stepsDiscrete[stepIndex].label);\\n              }\\n            }\\n          }\\n        }\\n      }\\n\\n      this.setState({\\n        inputValueDiscrete: newInputValue,\\n        valueDiscrete: newValue\\n      });\\n    };\\n\\n    this.onChangePercent = (value, inputValue, setLocalInputValue) => {\\n      let newValue;\\n      let newInputValue;\\n\\n      if (inputValue === undefined) { \\n        const step = this.stepsPercent.find(step => step.value === value);\\n        newInputValue = step ? step.label.slice(0, -1) : 0;\\n        newInputValue = Number(newInputValue);\\n        newValue = value;\\n      } else {\\n        const maxValue =  Number(this.stepsPercent[this.stepsPercent.length -1].label.slice(0, -1));\\n        if (inputValue > maxValue) {\\n          newValue = Number(this.stepsPercent[this.stepsPercent.length -1].value);\\n          newInputValue =  maxValue;\\n          setLocalInputValue(maxValue);\\n        } else {\\n          const minValue =  Number(this.stepsPercent[0].label.slice(0, -1));\\n          if (inputValue < minValue) {\\n            newValue = minValue;\\n            setLocalInputValue(minValue);\\n          } else {\\n            const stepIndex = this.stepsPercent.findIndex(step => Number(step.label.slice(0, -1)) >= inputValue);\\n            if (Number(this.stepsPercent[stepIndex].label.slice(0, -1)) === inputValue) {\\n              newValue = this.stepsPercent[stepIndex].value;\\n              newInputValue = inputValue;\\n            } else {\\n              const midpoint = (Number(this.stepsPercent[stepIndex].label.slice(0, -1)) + Number(this.stepsPercent[stepIndex - 1].label.slice(0, -1))) / 2;\\n              if (midpoint > inputValue) {\\n                newValue = this.stepsPercent[stepIndex - 1].value;\\n                newInputValue = Number(this.stepsPercent[stepIndex - 1].label.slice(0, -1));\\n              } else {\\n                newValue = this.stepsPercent[stepIndex].value;\\n                newInputValue = Number(this.stepsPercent[stepIndex].label.slice(0, -1));\\n              }\\n            }\\n          }\\n        }\\n      }\\n      \\n      this.setState({\\n        inputValuePercent: newInputValue,\\n        valuePercent: newValue\\n      });\\n    };\\n\\n    this.onChangeContinuous = (value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Math.floor(value);\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        inputValueContinuous: newValue,\\n        valueContinuous: newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Slider\\n          value={this.state.valueDiscrete}\\n          isInputVisible\\n          inputValue={this.state.inputValueDiscrete}\\n          customSteps={this.stepsDiscrete}\\n          onChange={this.onChangeDiscrete}\\n        />\\n        <br />\\n        <Slider\\n          value={this.state.valuePercent}\\n          isInputVisible\\n          inputValue={this.state.inputValuePercent}\\n          inputLabel=\\\"%\\\"\\n          onChange={this.onChangePercent}\\n          customSteps={this.stepsPercent}\\n        />\\n        <br />\\n        <Slider\\n          value={this.state.valueContinuous}\\n          isInputVisible\\n          inputValue={this.state.inputValueContinuous}\\n          inputLabel=\\\"%\\\"\\n          onChange={this.onChangeContinuous}\\n        />\\n      </>\\n    );\\n  }\\n}\",\n      \"title\": \"Value input\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Thumb value input': function ThumbValueInput(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Slider } from '@patternfly/react-core';\\n\\nclass ThumbValueInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 50,\\n      inputValue: 50\\n    };\\n\\n    this.onChange = (value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Number(value);\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        value: newValue,\\n        inputValue: newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <Slider\\n        value={this.state.value}\\n        isInputVisible\\n        inputValue={this.state.inputValue}\\n        inputLabel=\\\"%\\\"\\n        inputPosition=\\\"aboveThumb\\\"\\n        onChange={this.onChange}\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Thumb value input\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Actions': function Actions(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Slider, Button, Text, TextVariants } from '@patternfly/react-core';\\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\\nimport LockOpenIcon from '@patternfly/react-icons/dist/esm/icons/lock-open-icon';\\n\\nclass SliderActions extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 50,\\n      value2: 50,\\n      inputValue: 50,\\n      isDisabled: false\\n    };\\n\\n    this.onChange1 = value => {\\n      const newValue = Math.floor(Number(value));\\n      this.setState({\\n        value1: newValue\\n      });\\n    };\\n\\n    this.onChange2 =(value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Math.floor(Number(value));\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        value2: newValue,\\n        inputValue: newValue\\n      });\\n    };\\n\\n    this.onClick = () => {\\n      this.setState({\\n        isDisabled: !this.state.isDisabled\\n      });\\n    };\\n\\n    this.onMinusClick = () => {\\n      const newValue = this.state.value1 - 1;\\n      if (newValue >= 0) {\\n        this.setState({\\n          value1: newValue\\n        });\\n      }\\n    };\\n\\n    this.onPlusClick = () => {\\n      const newValue = this.state.value1 + 1;\\n      if (newValue <= 100) {\\n        this.setState({\\n          value1: newValue\\n        });\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const disabledAction = (\\n      <Button variant=\\\"plain\\\" aria-label=\\\"Lock\\\" onClick={this.onClick}>\\n        <LockIcon />\\n      </Button>\\n    );\\n\\n    const enabledAction = (\\n      <Button variant=\\\"plain\\\" aria-label=\\\"Unlock\\\" onClick={this.onClick}>\\n        <LockOpenIcon />\\n      </Button>\\n    );\\n\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {this.state.value1}</Text>\\n        <Slider\\n          value={this.state.value1}\\n          onChange={this.onChange1}\\n          leftActions={\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Minus\\\" onClick={this.onMinusClick}>\\n              <MinusIcon />\\n            </Button>\\n          }\\n          rightActions={\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Plus\\\" onClick={this.onPlusClick}>\\n              <PlusIcon />\\n            </Button>\\n          }\\n        />\\n        <br />\\n        <br />\\n        <Slider\\n          value={this.state.value2}\\n          inputValue={this.state.inputValue}\\n          onChange={this.onChange2}\\n          inputLabel=\\\"%\\\"\\n          isInputVisible\\n          isDisabled={this.state.isDisabled}\\n          rightActions={this.state.isDisabled ? disabledAction : enabledAction}\\n        />\\n      </>\\n    );\\n  }\\n}\",\n      \"title\": \"Actions\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Disabled': function Disabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass DiscreteInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 50\\n    };\\n\\n    this.steps = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.onValueChange = value => {\\n        this.setState({\\n          value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    const step = this.steps.find(step => step.value === this.state.value);\\n    const displayValue = step ? step.label : 0;\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {displayValue}</Text>\\n        <Slider isDisabled value={this.state.value} onChange={this.onValueChange} customSteps={this.steps} />\\n      </>\\n    );\\n  }\\n}\",\n      \"title\": \"Disabled\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Discrete\"]), React.createElement(pageData.examples[\"Continuous\"]), React.createElement(pageData.examples[\"Value input\"]), React.createElement(pageData.examples[\"Thumb value input\"]), React.createElement(pageData.examples[\"Actions\"]), React.createElement(pageData.examples[\"Disabled\"]));\n};\n\nComponent.displayName = 'ComponentsSliderReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","Slider","Button","Text","TextVariants","MinusIcon","PlusIcon","LockIcon","LockOpenIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/slider/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport { Slider, Button, Text, TextVariants } from '@patternfly/react-core';\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\nimport LockOpenIcon from '@patternfly/react-icons/dist/esm/icons/lock-open-icon';\nconst pageData = {\n  \"id\": \"Slider\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/slider/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Slider/examples/Slider.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Slider\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"areCustomStepsContinuous\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the slider is is discrete for custom steps.  This will cause the slider to snap to the closest value.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the spinner.\"\n        },\n        {\n          \"name\": \"customSteps\",\n          \"type\": \"SliderStepObject[]\",\n          \"description\": \"Array of custom slider step objects (value and label of each step) for the slider.\"\n        },\n        {\n          \"name\": \"hasTooltipOverThumb\",\n          \"type\": \"boolean\",\n          \"description\": \"\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"inputAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label for the input field\",\n          \"defaultValue\": \"'Slider value input'\"\n        },\n        {\n          \"name\": \"inputLabel\",\n          \"type\": \"string | number\",\n          \"description\": \"Label that is place after the input field\"\n        },\n        {\n          \"name\": \"inputPosition\",\n          \"type\": \"'aboveThumb' | 'right'\",\n          \"description\": \"Position of the input\",\n          \"defaultValue\": \"'right'\"\n        },\n        {\n          \"name\": \"inputValue\",\n          \"type\": \"number\",\n          \"description\": \"Value displayed in the input field\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Adds disabled styling and disables the slider and the input component is present\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isInputVisible\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to show value input field\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"leftActions\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Actions placed to the left of the slider\"\n        },\n        {\n          \"name\": \"max\",\n          \"type\": \"number\",\n          \"description\": \"The maximum permitted value\",\n          \"defaultValue\": \"100\"\n        },\n        {\n          \"name\": \"min\",\n          \"type\": \"number\",\n          \"description\": \"Minimum permitted value\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(\\n  value: number,\\n  inputValue?: number,\\n  setLocalInputValue?: React.Dispatch<React.SetStateAction<number>>\\n) => void\",\n          \"description\": \"Value change callback. This is called when the slider value changes\"\n        },\n        {\n          \"name\": \"rightActions\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Actions placed to the right of the slider\"\n        },\n        {\n          \"name\": \"showBoundaries\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if boundaries should be shown for slider that does not have custom steps\",\n          \"defaultValue\": \"true\"\n        },\n        {\n          \"name\": \"showTicks\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to indicate if ticks should be shown for slider that does not have custom steps\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"step\",\n          \"type\": \"number\",\n          \"description\": \"The step interval\",\n          \"defaultValue\": \"1\"\n        },\n        {\n          \"name\": \"thumbAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"\",\n          \"defaultValue\": \"'Value'\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"number\",\n          \"description\": \"Current value\",\n          \"defaultValue\": \"0\"\n        }\n      ]\n    },\n    {\n      \"name\": \"SliderStepObject\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"isLabelHidden\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to hide the label\"\n        },\n        {\n          \"name\": \"label\",\n          \"type\": \"string\",\n          \"description\": \"The display label for the step value. This is also used for the aria-valuetext\",\n          \"required\": true\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"number\",\n          \"description\": \"Value of the step. This value is a percentage of the slider where the  tick is drawn.\",\n          \"required\": true\n        }\n      ]\n    }\n  ],\n  \"beta\": true,\n  \"cssPrefix\": [\n    \"pf-c-slider\"\n  ],\n  \"examples\": [\n    \"Discrete\",\n    \"Continuous\",\n    \"Value input\",\n    \"Thumb value input\",\n    \"Actions\",\n    \"Disabled\"\n  ]\n};\npageData.liveContext = {\n  Slider,\n  Button,\n  Text,\n  TextVariants,\n  MinusIcon,\n  PlusIcon,\n  LockIcon,\n  LockOpenIcon\n};\npageData.examples = {\n  'Discrete': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass DiscreteInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 50,\\n      value2: 50,\\n      value3: 25,\\n      value4: 50,\\n      value5: 50,\\n      value6: 3\\n    };\\n\\n    this.steps = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.stepsDiscreteWithMax = [\\n      { value: 0, label: \\\"A\\\" },\\n      { value: 1, label: \\\"B\\\" },\\n      { value: 2, label: \\\"C\\\" },\\n      { value: 3, label: \\\"D\\\" },\\n      { value: 4, label: \\\"E\\\" },\\n      { value: 5, label: \\\"F\\\" }\\n    ];\\n\\n    this.onChange = value => {\\n        this.setState({\\n          value1: value\\n        });\\n    };\\n\\n    this.onChange2 = value => {\\n        this.setState({\\n          value2: value\\n        });\\n    };\\n\\n    this.onChange3 = value => {\\n        this.setState({\\n          value3: value\\n        });\\n    };\\n\\n    this.onChange4 = value => {\\n        this.setState({\\n          value4: value\\n        });\\n    };\\n\\n    this.onChange5 = value => {\\n        this.setState({\\n          value5: value\\n        });\\n    };\\n\\n    this.onChange6 = value => {\\n        this.setState({\\n          value6: value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    const step = this.steps.find(step => step.value === this.state.value1);\\n    const displayValue = step ? step.label : 0;\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {displayValue}</Text>\\n        <Slider value={this.state.value1} onChange={this.onChange} customSteps={this.steps} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value2)}</Text>\\n        <Text component={TextVariants.small}>(min = 0, max = 200, step = 50) </Text>\\n        <Slider value={this.state.value2} onChange={this.onChange2} max={200} step={50} showTicks/>\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value3)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries not shown) </Text>\\n        <Slider value={this.state.value3} onChange={this.onChange3} min={-25} max={75} step={10} showTicks showBoundaries={false}/>\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value4)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries shown) </Text>\\n        <Slider value={this.state.value4} onChange={this.onChange4} min={-25} max={75} step={10} showTicks />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value5)}</Text>\\n        <Text component={TextVariants.small}>(min = -25, max = 75, step = 10, boundaries shown, ticks not shown) </Text>\\n        <Slider value={this.state.value5} onChange={this.onChange5} min={-25} max={75} step={10} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {Math.floor(this.state.value6)}</Text>\\n        <Text component={TextVariants.small}>(max = 5, custom steps) </Text>\\n        <Slider\\n            value={this.state.value6}\\n            showTicks\\n            max={5}\\n            customSteps={this.stepsDiscreteWithMax}\\n            onChange={this.onChange6}\\n          />\\n          <br />\\n      </>\\n    );\\n  }\\n}\",\"title\":\"Discrete\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Continuous': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Checkbox, Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass ContinuousInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      hasTooltipOverThumb: false,\\n      value: 50,\\n      valueCustom: 50\\n    };\\n\\n    this.onChange = value => {\\n        this.setState({\\n          value: value\\n        });\\n    };\\n\\n    this.onChangeCustom = value => {\\n        this.setState({\\n          valueCustom: value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Checkbox\\n          id=\\\"thumb-has-tooltip\\\"\\n          label=\\\"hasTooltipOverThumb\\\"\\n          isChecked={this.state.hasTooltipOverThumb}\\n          onChange={hasTooltipOverThumb => this.setState({ hasTooltipOverThumb })}\\n          style={{ marginBottom: 20 }} />\\n        <Text component={TextVariants.h3}>Slider Value is: {this.state.value}</Text>\\n        <Slider\\n          hasTooltipOverThumb={this.state.hasTooltipOverThumb}\\n          value={this.state.value}\\n          onChange={this.onChange} />\\n        <br />\\n        <Text component={TextVariants.h3}>Slider value is: {this.state.valueCustom}</Text>\\n        <Slider\\n          onChange={this.onChangeCustom}\\n          value={this.state.valueCustom}\\n          areCustomStepsContinuous\\n          hasTooltipOverThumb={this.state.hasTooltipOverThumb}\\n          customSteps={[\\n            { value: 0, label: '0%' },\\n            { value: 100, label: '100%' }\\n          ]}\\n        />\\n      </>\\n    );\\n  }\\n}\",\"title\":\"Continuous\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Value input': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Slider } from '@patternfly/react-core';\\n\\nclass ValueInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      valueDiscrete: 62.5,\\n      inputValueDiscrete: 5,\\n      valuePercent: 50,\\n      inputValuePercent: 50,\\n      valueContinuous: 50,\\n      inputValueContinuous: 50\\n    };\\n\\n    this.stepsDiscrete = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.stepsPercent = [\\n      { value: 0, label: '0%' },\\n      { value: 25, label: '25%', isLabelHidden: true },\\n      { value: 50, label: '50%' },\\n      { value: 75, label: '75%', isLabelHidden: true },\\n      { value: 100, label: '100%' }\\n    ];\\n\\n    this.onChangeDiscrete = (value, inputValue, setLocalInputValue) => {\\n\\n      let newValue;\\n      let newInputValue;\\n\\n      if (inputValue === undefined) { \\n        const step = this.stepsDiscrete.find(step => step.value === value);\\n        newInputValue = step ? step.label : 0;\\n        newInputValue = Number(newInputValue);\\n        newValue = value;\\n      } else {\\n        const maxValue =  Number(this.stepsDiscrete[this.stepsDiscrete.length -1].label);\\n        if (inputValue > maxValue) {\\n          newValue = Number(this.stepsDiscrete[this.stepsDiscrete.length -1].value);\\n          newInputValue =  maxValue;\\n          setLocalInputValue(maxValue);\\n        } else {\\n          const minValue =  Number(this.stepsDiscrete[0].label);\\n          if (inputValue < minValue) {\\n            newValue = Number(this.stepsDiscrete[0].value);\\n            newInputValue =  minValue;\\n            setLocalInputValue(minValue);\\n          } else {\\n            const stepIndex = this.stepsDiscrete.findIndex(step => Number(step.label) >= inputValue);\\n            if (Number(this.stepsDiscrete[stepIndex].label) === inputValue) {\\n              newValue = this.stepsDiscrete[stepIndex].value;\\n              newInputValue = inputValue;\\n            } else {\\n              const midpoint = (Number(this.stepsDiscrete[stepIndex].label) + Number(this.stepsDiscrete[stepIndex - 1].label)) / 2;\\n              if (midpoint > inputValue) {\\n                newValue = this.stepsDiscrete[stepIndex - 1].value;\\n                newInputValue = Number(this.stepsDiscrete[stepIndex - 1].label);\\n              } else {\\n                newValue = this.stepsDiscrete[stepIndex].value;\\n                newInputValue = Number(this.stepsDiscrete[stepIndex].label);\\n              }\\n            }\\n          }\\n        }\\n      }\\n\\n      this.setState({\\n        inputValueDiscrete: newInputValue,\\n        valueDiscrete: newValue\\n      });\\n    };\\n\\n    this.onChangePercent = (value, inputValue, setLocalInputValue) => {\\n      let newValue;\\n      let newInputValue;\\n\\n      if (inputValue === undefined) { \\n        const step = this.stepsPercent.find(step => step.value === value);\\n        newInputValue = step ? step.label.slice(0, -1) : 0;\\n        newInputValue = Number(newInputValue);\\n        newValue = value;\\n      } else {\\n        const maxValue =  Number(this.stepsPercent[this.stepsPercent.length -1].label.slice(0, -1));\\n        if (inputValue > maxValue) {\\n          newValue = Number(this.stepsPercent[this.stepsPercent.length -1].value);\\n          newInputValue =  maxValue;\\n          setLocalInputValue(maxValue);\\n        } else {\\n          const minValue =  Number(this.stepsPercent[0].label.slice(0, -1));\\n          if (inputValue < minValue) {\\n            newValue = minValue;\\n            setLocalInputValue(minValue);\\n          } else {\\n            const stepIndex = this.stepsPercent.findIndex(step => Number(step.label.slice(0, -1)) >= inputValue);\\n            if (Number(this.stepsPercent[stepIndex].label.slice(0, -1)) === inputValue) {\\n              newValue = this.stepsPercent[stepIndex].value;\\n              newInputValue = inputValue;\\n            } else {\\n              const midpoint = (Number(this.stepsPercent[stepIndex].label.slice(0, -1)) + Number(this.stepsPercent[stepIndex - 1].label.slice(0, -1))) / 2;\\n              if (midpoint > inputValue) {\\n                newValue = this.stepsPercent[stepIndex - 1].value;\\n                newInputValue = Number(this.stepsPercent[stepIndex - 1].label.slice(0, -1));\\n              } else {\\n                newValue = this.stepsPercent[stepIndex].value;\\n                newInputValue = Number(this.stepsPercent[stepIndex].label.slice(0, -1));\\n              }\\n            }\\n          }\\n        }\\n      }\\n      \\n      this.setState({\\n        inputValuePercent: newInputValue,\\n        valuePercent: newValue\\n      });\\n    };\\n\\n    this.onChangeContinuous = (value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Math.floor(value);\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        inputValueContinuous: newValue,\\n        valueContinuous: newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <>\\n        <Slider\\n          value={this.state.valueDiscrete}\\n          isInputVisible\\n          inputValue={this.state.inputValueDiscrete}\\n          customSteps={this.stepsDiscrete}\\n          onChange={this.onChangeDiscrete}\\n        />\\n        <br />\\n        <Slider\\n          value={this.state.valuePercent}\\n          isInputVisible\\n          inputValue={this.state.inputValuePercent}\\n          inputLabel=\\\"%\\\"\\n          onChange={this.onChangePercent}\\n          customSteps={this.stepsPercent}\\n        />\\n        <br />\\n        <Slider\\n          value={this.state.valueContinuous}\\n          isInputVisible\\n          inputValue={this.state.inputValueContinuous}\\n          inputLabel=\\\"%\\\"\\n          onChange={this.onChangeContinuous}\\n        />\\n      </>\\n    );\\n  }\\n}\",\"title\":\"Value input\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Thumb value input': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Slider } from '@patternfly/react-core';\\n\\nclass ThumbValueInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 50,\\n      inputValue: 50\\n    };\\n\\n    this.onChange = (value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Number(value);\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        value: newValue,\\n        inputValue: newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    return (\\n      <Slider\\n        value={this.state.value}\\n        isInputVisible\\n        inputValue={this.state.inputValue}\\n        inputLabel=\\\"%\\\"\\n        inputPosition=\\\"aboveThumb\\\"\\n        onChange={this.onChange}\\n      />\\n    );\\n  }\\n}\",\"title\":\"Thumb value input\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Actions': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Slider, Button, Text, TextVariants } from '@patternfly/react-core';\\nimport MinusIcon from '@patternfly/react-icons/dist/esm/icons/minus-icon';\\nimport PlusIcon from '@patternfly/react-icons/dist/esm/icons/plus-icon';\\nimport LockIcon from '@patternfly/react-icons/dist/esm/icons/lock-icon';\\nimport LockOpenIcon from '@patternfly/react-icons/dist/esm/icons/lock-open-icon';\\n\\nclass SliderActions extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 50,\\n      value2: 50,\\n      inputValue: 50,\\n      isDisabled: false\\n    };\\n\\n    this.onChange1 = value => {\\n      const newValue = Math.floor(Number(value));\\n      this.setState({\\n        value1: newValue\\n      });\\n    };\\n\\n    this.onChange2 =(value, inputValue, setLocalInputValue) => { \\n      let newValue;\\n      if (inputValue === undefined) { \\n        newValue = Math.floor(Number(value));\\n      } else {\\n        if (inputValue > 100) {\\n          newValue = 100;\\n          setLocalInputValue(100);\\n        } else if (inputValue < 0) {\\n          newValue = 0;\\n          setLocalInputValue(0);\\n        } else {\\n          newValue = Math.floor(inputValue);\\n        }\\n      }\\n      this.setState({\\n        value2: newValue,\\n        inputValue: newValue\\n      });\\n    };\\n\\n    this.onClick = () => {\\n      this.setState({\\n        isDisabled: !this.state.isDisabled\\n      });\\n    };\\n\\n    this.onMinusClick = () => {\\n      const newValue = this.state.value1 - 1;\\n      if (newValue >= 0) {\\n        this.setState({\\n          value1: newValue\\n        });\\n      }\\n    };\\n\\n    this.onPlusClick = () => {\\n      const newValue = this.state.value1 + 1;\\n      if (newValue <= 100) {\\n        this.setState({\\n          value1: newValue\\n        });\\n      }\\n    };\\n  }\\n\\n  render() {\\n    const disabledAction = (\\n      <Button variant=\\\"plain\\\" aria-label=\\\"Lock\\\" onClick={this.onClick}>\\n        <LockIcon />\\n      </Button>\\n    );\\n\\n    const enabledAction = (\\n      <Button variant=\\\"plain\\\" aria-label=\\\"Unlock\\\" onClick={this.onClick}>\\n        <LockOpenIcon />\\n      </Button>\\n    );\\n\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {this.state.value1}</Text>\\n        <Slider\\n          value={this.state.value1}\\n          onChange={this.onChange1}\\n          leftActions={\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Minus\\\" onClick={this.onMinusClick}>\\n              <MinusIcon />\\n            </Button>\\n          }\\n          rightActions={\\n            <Button variant=\\\"plain\\\" aria-label=\\\"Plus\\\" onClick={this.onPlusClick}>\\n              <PlusIcon />\\n            </Button>\\n          }\\n        />\\n        <br />\\n        <br />\\n        <Slider\\n          value={this.state.value2}\\n          inputValue={this.state.inputValue}\\n          onChange={this.onChange2}\\n          inputLabel=\\\"%\\\"\\n          isInputVisible\\n          isDisabled={this.state.isDisabled}\\n          rightActions={this.state.isDisabled ? disabledAction : enabledAction}\\n        />\\n      </>\\n    );\\n  }\\n}\",\"title\":\"Actions\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Slider, Text, TextVariants } from '@patternfly/react-core';\\n\\nclass DiscreteInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 50\\n    };\\n\\n    this.steps = [\\n      { value: 0, label: '0' },\\n      { value: 12.5, label: '1', isLabelHidden: true },\\n      { value: 25, label: '2' },\\n      { value: 37.5, label: '3', isLabelHidden: true },\\n      { value: 50, label: '4' },\\n      { value: 62.5, label: '5', isLabelHidden: true },\\n      { value: 75, label: '6' },\\n      { value: 87.5, label: '7', isLabelHidden: true },\\n      { value: 100, label: '8' }\\n    ];\\n\\n    this.onValueChange = value => {\\n        this.setState({\\n          value\\n        });\\n    };\\n  }\\n\\n  render() {\\n    const step = this.steps.find(step => step.value === this.state.value);\\n    const displayValue = step ? step.label : 0;\\n    return (\\n      <>\\n        <Text component={TextVariants.h3}>Slider value is: {displayValue}</Text>\\n        <Slider isDisabled value={this.state.value} onChange={this.onValueChange} customSteps={this.steps} />\\n      </>\\n    );\\n  }\\n}\",\"title\":\"Disabled\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Discrete\"])}\n    {React.createElement(pageData.examples[\"Continuous\"])}\n    {React.createElement(pageData.examples[\"Value input\"])}\n    {React.createElement(pageData.examples[\"Thumb value input\"])}\n    {React.createElement(pageData.examples[\"Actions\"])}\n    {React.createElement(pageData.examples[\"Disabled\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsSliderReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}