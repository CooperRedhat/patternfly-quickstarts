{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Number input\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/number-input/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NumberInput/examples/NumberInput.md\",\n  \"propComponents\": [{\n    \"name\": \"NumberInput\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the number input\"\n    }, {\n      \"name\": \"inputAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label of the input\",\n      \"defaultValue\": \"'Input'\"\n    }, {\n      \"name\": \"inputName\",\n      \"type\": \"string\",\n      \"description\": \"Name of the input\"\n    }, {\n      \"name\": \"inputProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional properties added to the text input\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Indicates the whole number input should be disabled\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"max\",\n      \"type\": \"number\",\n      \"description\": \"Maximum value of the number input, disabling the plus button when reached\"\n    }, {\n      \"name\": \"min\",\n      \"type\": \"number\",\n      \"description\": \"Minimum value of the number input, disabling the minus button when reached\"\n    }, {\n      \"name\": \"minusBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label of the minus button\",\n      \"defaultValue\": \"'Minus'\"\n    }, {\n      \"name\": \"minusBtnProps\",\n      \"type\": \"ButtonProps\",\n      \"description\": \"Additional properties added to the minus button\"\n    }, {\n      \"name\": \"onBlur\",\n      \"type\": \"(event?: any) => void\",\n      \"description\": \"Callback function when text input is blurred (focus leaves)\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(event: React.FormEvent<HTMLInputElement>) => void\",\n      \"description\": \"Callback for the text input changing\"\n    }, {\n      \"name\": \"onMinus\",\n      \"type\": \"(event: React.MouseEvent, name?: string) => void\",\n      \"description\": \"Callback for the minus button\",\n      \"defaultValue\": \"() => {}\"\n    }, {\n      \"name\": \"onPlus\",\n      \"type\": \"(event: React.MouseEvent, name?: string) => void\",\n      \"description\": \"Callback for the plus button\",\n      \"defaultValue\": \"() => {}\"\n    }, {\n      \"name\": \"plusBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label of the plus button\",\n      \"defaultValue\": \"'Plus'\"\n    }, {\n      \"name\": \"plusBtnProps\",\n      \"type\": \"ButtonProps\",\n      \"description\": \"Additional properties added to the plus button\"\n    }, {\n      \"name\": \"unit\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Adds the given unit to the number input\"\n    }, {\n      \"name\": \"unitPosition\",\n      \"type\": \"'before' | 'after'\",\n      \"description\": \"Position of the number input unit in relation to the number input\",\n      \"defaultValue\": \"'after'\"\n    }, {\n      \"name\": \"value\",\n      \"type\": \"number\",\n      \"description\": \"Value of the number input\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"widthChars\",\n      \"type\": \"number\",\n      \"description\": \"Sets the width of the number input to a number of characters\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-number-input\"],\n  \"examples\": [\"Default\", \"With unit\", \"With unit and thresholds\", \"Disabled\", \"Varying sizes\", \"Custom increment/decrement\", \"Custom increment/decrement and thresholds\"]\n};\npageData.examples = {\n  'Default': function Default(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass BasicNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.state.value - 1\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.state.value + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        onMinus={this.onMinus}\\n        onChange={this.onChange}\\n        onPlus={this.onPlus}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Default\",\n      \"lang\": \"js\"\n    }));\n  },\n  'With unit': function WithUnit(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass UnitNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 90,\\n      value2: (1.0).toFixed(2)\\n    };\\n\\n    this.onMinus1 = () => {\\n      this.setState({\\n        value1: this.state.value1 - 1\\n      });\\n    };\\n\\n    this.onChange1 = event => {\\n      this.setState({\\n        value1: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus1 = () => {\\n      this.setState({\\n        value1: this.state.value1 + 1\\n      });\\n    };\\n\\n    this.onMinus2 = () => {\\n      this.setState({\\n        value2: (Number(this.state.value2) - 0.01).toFixed(2)\\n      });\\n    };\\n\\n    this.onChange2 = event => {\\n      console.log(event.target.value);\\n      this.setState({\\n        value2: event.target.value\\n      });\\n    };\\n\\n    this.onPlus2 = () => {\\n      this.setState({\\n        value2: (Number(this.state.value2) + 0.01).toFixed(2)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value1, value2 } = this.state;\\n    return (\\n      <React.Fragment>\\n        <NumberInput\\n          value={value1}\\n          onMinus={this.onMinus1}\\n          onChange={this.onChange1}\\n          onPlus={this.onPlus1}\\n          inputName=\\\"input 1\\\"\\n          inputAriaLabel=\\\"number input 1\\\"\\n          minusBtnAriaLabel=\\\"minus 1\\\"\\n          plusBtnAriaLabel=\\\"plus 1\\\"\\n          unit=\\\"%\\\"\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={value2}\\n          onMinus={this.onMinus2}\\n          onChange={this.onChange2}\\n          onPlus={this.onPlus2}\\n          inputName=\\\"input 2\\\"\\n          inputAriaLabel=\\\"number input 2\\\"\\n          minusBtnAriaLabel=\\\"minus 0.01\\\"\\n          plusBtnAriaLabel=\\\"plus 0.01\\\"\\n          unit=\\\"$\\\"\\n          unitPosition=\\\"before\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"With unit\",\n      \"lang\": \"js\"\n    }));\n  },\n  'With unit and thresholds': function WithUnitAndThresholds(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass UnitThresholdNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 0\\n    };\\n    this.minValue = 0;\\n    this.maxValue = 10;\\n\\n    this.normalizeBetween = (value, min, max) => {\\n      if (min !== undefined && max !== undefined) {\\n        return Math.max(Math.min(value, max), min);\\n      } else if (value <= min) {\\n        return min;\\n      } else if (value >= max) {\\n        return max;\\n      }\\n      return value;\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.normalizeBetween(this.state.value - 1, this.minValue, this.maxValue)\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue > this.maxValue ? this.maxValue : newValue < this.minValue ? this.minValue : newValue\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.normalizeBetween(this.state.value + 1, this.minValue, this.maxValue)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        With a minimum value of 0 and maximum value of 10\\n        <br />\\n        <NumberInput\\n          value={value}\\n          min={this.minValue}\\n          max={this.maxValue}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input\\\"\\n          inputAriaLabel=\\\"number input\\\"\\n          minusBtnAriaLabel=\\\"minus\\\"\\n          plusBtnAriaLabel=\\\"plus\\\"\\n          unit=\\\"%\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"With unit and thresholds\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Disabled': function Disabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass DisabledNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 100\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.state.value - 1\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.state.value + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    const minValue = 0;\\n    const maxValue = 100;\\n\\n    return (\\n      <NumberInput\\n        value={value}\\n        min={minValue}\\n        max={maxValue}\\n        onMinus={this.onMinus}\\n        onChange={this.onChange}\\n        onPlus={this.onPlus}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n        unit=\\\"%\\\"\\n        isDisabled\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Disabled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Varying sizes': function VaryingSizes(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass NumberInputSizes extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input1Value: 1,\\n      input2Value: 1234567890,\\n      input3Value: 5,\\n      input4Value: 12345\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        [`${event.target.name}Value`]: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onMinus = (e, inputName) => {\\n      this.setState({\\n        [`${inputName}Value`]: this.state[`${inputName}Value`] - 1\\n      });\\n    };\\n\\n    this.onPlus = (e, inputName) => {\\n      this.setState({\\n        [`${inputName}Value`]: this.state[`${inputName}Value`] + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { input1Value, input2Value, input3Value, input4Value } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <NumberInput\\n          value={input1Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input1\\\"\\n          inputAriaLabel=\\\"number input 1\\\"\\n          minusBtnAriaLabel=\\\"input 2 minus\\\"\\n          plusBtnAriaLabel=\\\"input 2 plus\\\"\\n          widthChars={1}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input2Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input2\\\"\\n          inputAriaLabel=\\\"number input 2\\\"\\n          minusBtnAriaLabel=\\\"input 2 minus\\\"\\n          plusBtnAriaLabel=\\\"input 2 plus\\\"\\n          widthChars={10}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input3Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input3\\\"\\n          inputAriaLabel=\\\"number input 3\\\"\\n          minusBtnAriaLabel=\\\"input 3 minus\\\"\\n          plusBtnAriaLabel=\\\"input 3 plus\\\"\\n          widthChars={5}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input4Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input4\\\"\\n          inputAriaLabel=\\\"number input 4\\\"\\n          minusBtnAriaLabel=\\\"input 4 minus\\\"\\n          plusBtnAriaLabel=\\\"input 4 plus\\\"\\n          widthChars={5}\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\n      \"title\": \"Varying sizes\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Custom increment/decrement': function CustomIncrementDecrement(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass CustomStepNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90,\\n      step: 3\\n    };\\n\\n    this.stepper = step => () => {\\n      this.setState(prev => ({ ...prev, value: prev.value + step }));\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        onMinus={this.stepper(-3)}\\n        onChange={this.onChange}\\n        onPlus={this.stepper(3)}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Custom increment/decrement\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Custom increment/decrement and thresholds': function CustomIncrementDecrementAndThresholds(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass CustomStepNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90,\\n      step: 3\\n    };\\n    this.minValue = 90;\\n    this.maxValue = 100;\\n\\n    this.normalizeBetween = (value, min, max) => {\\n      if (min !== undefined && max !== undefined) {\\n        return Math.max(Math.min(value, max), min);\\n      } else if (value <= min) {\\n        return min;\\n      } else if (value >= max) {\\n        return max;\\n      }\\n      return value;\\n    };\\n\\n    this.stepper = step => () => {\\n      this.setState(prev => ({\\n        ...prev,\\n        value: this.normalizeBetween(prev.value + step, this.minValue, this.maxValue)\\n      }));\\n    };\\n\\n    this.onChange = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue\\n      });\\n    };\\n\\n    this.onBlur = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue > this.maxValue ? this.maxValue : newValue < this.minValue ? this.minValue : newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        min={this.minValue}\\n        max={this.maxValue}\\n        onMinus={this.stepper(-3)}\\n        onChange={this.onChange}\\n        onBlur={this.onBlur}\\n        onPlus={this.stepper(3)}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Custom increment/decrement and thresholds\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Default\"]), React.createElement(pageData.examples[\"With unit\"]), React.createElement(pageData.examples[\"With unit and thresholds\"]), React.createElement(pageData.examples[\"Disabled\"]), React.createElement(pageData.examples[\"Varying sizes\"]), React.createElement(pageData.examples[\"Custom increment/decrement\"]), React.createElement(pageData.examples[\"Custom increment/decrement and thresholds\"]));\n};\n\nComponent.displayName = 'ComponentsNumberInputReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/number-input/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Number input\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/number-input/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NumberInput/examples/NumberInput.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"NumberInput\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the number input\"\n        },\n        {\n          \"name\": \"inputAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label of the input\",\n          \"defaultValue\": \"'Input'\"\n        },\n        {\n          \"name\": \"inputName\",\n          \"type\": \"string\",\n          \"description\": \"Name of the input\"\n        },\n        {\n          \"name\": \"inputProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional properties added to the text input\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Indicates the whole number input should be disabled\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"max\",\n          \"type\": \"number\",\n          \"description\": \"Maximum value of the number input, disabling the plus button when reached\"\n        },\n        {\n          \"name\": \"min\",\n          \"type\": \"number\",\n          \"description\": \"Minimum value of the number input, disabling the minus button when reached\"\n        },\n        {\n          \"name\": \"minusBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label of the minus button\",\n          \"defaultValue\": \"'Minus'\"\n        },\n        {\n          \"name\": \"minusBtnProps\",\n          \"type\": \"ButtonProps\",\n          \"description\": \"Additional properties added to the minus button\"\n        },\n        {\n          \"name\": \"onBlur\",\n          \"type\": \"(event?: any) => void\",\n          \"description\": \"Callback function when text input is blurred (focus leaves)\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(event: React.FormEvent<HTMLInputElement>) => void\",\n          \"description\": \"Callback for the text input changing\"\n        },\n        {\n          \"name\": \"onMinus\",\n          \"type\": \"(event: React.MouseEvent, name?: string) => void\",\n          \"description\": \"Callback for the minus button\",\n          \"defaultValue\": \"() => {}\"\n        },\n        {\n          \"name\": \"onPlus\",\n          \"type\": \"(event: React.MouseEvent, name?: string) => void\",\n          \"description\": \"Callback for the plus button\",\n          \"defaultValue\": \"() => {}\"\n        },\n        {\n          \"name\": \"plusBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label of the plus button\",\n          \"defaultValue\": \"'Plus'\"\n        },\n        {\n          \"name\": \"plusBtnProps\",\n          \"type\": \"ButtonProps\",\n          \"description\": \"Additional properties added to the plus button\"\n        },\n        {\n          \"name\": \"unit\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Adds the given unit to the number input\"\n        },\n        {\n          \"name\": \"unitPosition\",\n          \"type\": \"'before' | 'after'\",\n          \"description\": \"Position of the number input unit in relation to the number input\",\n          \"defaultValue\": \"'after'\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"number\",\n          \"description\": \"Value of the number input\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"widthChars\",\n          \"type\": \"number\",\n          \"description\": \"Sets the width of the number input to a number of characters\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-number-input\"\n  ],\n  \"examples\": [\n    \"Default\",\n    \"With unit\",\n    \"With unit and thresholds\",\n    \"Disabled\",\n    \"Varying sizes\",\n    \"Custom increment/decrement\",\n    \"Custom increment/decrement and thresholds\"\n  ]\n};\npageData.examples = {\n  'Default': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass BasicNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.state.value - 1\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.state.value + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        onMinus={this.onMinus}\\n        onChange={this.onChange}\\n        onPlus={this.onPlus}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Default\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'With unit': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass UnitNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value1: 90,\\n      value2: (1.0).toFixed(2)\\n    };\\n\\n    this.onMinus1 = () => {\\n      this.setState({\\n        value1: this.state.value1 - 1\\n      });\\n    };\\n\\n    this.onChange1 = event => {\\n      this.setState({\\n        value1: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus1 = () => {\\n      this.setState({\\n        value1: this.state.value1 + 1\\n      });\\n    };\\n\\n    this.onMinus2 = () => {\\n      this.setState({\\n        value2: (Number(this.state.value2) - 0.01).toFixed(2)\\n      });\\n    };\\n\\n    this.onChange2 = event => {\\n      console.log(event.target.value);\\n      this.setState({\\n        value2: event.target.value\\n      });\\n    };\\n\\n    this.onPlus2 = () => {\\n      this.setState({\\n        value2: (Number(this.state.value2) + 0.01).toFixed(2)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value1, value2 } = this.state;\\n    return (\\n      <React.Fragment>\\n        <NumberInput\\n          value={value1}\\n          onMinus={this.onMinus1}\\n          onChange={this.onChange1}\\n          onPlus={this.onPlus1}\\n          inputName=\\\"input 1\\\"\\n          inputAriaLabel=\\\"number input 1\\\"\\n          minusBtnAriaLabel=\\\"minus 1\\\"\\n          plusBtnAriaLabel=\\\"plus 1\\\"\\n          unit=\\\"%\\\"\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={value2}\\n          onMinus={this.onMinus2}\\n          onChange={this.onChange2}\\n          onPlus={this.onPlus2}\\n          inputName=\\\"input 2\\\"\\n          inputAriaLabel=\\\"number input 2\\\"\\n          minusBtnAriaLabel=\\\"minus 0.01\\\"\\n          plusBtnAriaLabel=\\\"plus 0.01\\\"\\n          unit=\\\"$\\\"\\n          unitPosition=\\\"before\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"With unit\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'With unit and thresholds': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass UnitThresholdNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 0\\n    };\\n    this.minValue = 0;\\n    this.maxValue = 10;\\n\\n    this.normalizeBetween = (value, min, max) => {\\n      if (min !== undefined && max !== undefined) {\\n        return Math.max(Math.min(value, max), min);\\n      } else if (value <= min) {\\n        return min;\\n      } else if (value >= max) {\\n        return max;\\n      }\\n      return value;\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.normalizeBetween(this.state.value - 1, this.minValue, this.maxValue)\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue > this.maxValue ? this.maxValue : newValue < this.minValue ? this.minValue : newValue\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.normalizeBetween(this.state.value + 1, this.minValue, this.maxValue)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        With a minimum value of 0 and maximum value of 10\\n        <br />\\n        <NumberInput\\n          value={value}\\n          min={this.minValue}\\n          max={this.maxValue}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input\\\"\\n          inputAriaLabel=\\\"number input\\\"\\n          minusBtnAriaLabel=\\\"minus\\\"\\n          plusBtnAriaLabel=\\\"plus\\\"\\n          unit=\\\"%\\\"\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"With unit and thresholds\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass DisabledNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 100\\n    };\\n\\n    this.onMinus = () => {\\n      this.setState({\\n        value: this.state.value - 1\\n      });\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onPlus = () => {\\n      this.setState({\\n        value: this.state.value + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    const minValue = 0;\\n    const maxValue = 100;\\n\\n    return (\\n      <NumberInput\\n        value={value}\\n        min={minValue}\\n        max={maxValue}\\n        onMinus={this.onMinus}\\n        onChange={this.onChange}\\n        onPlus={this.onPlus}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n        unit=\\\"%\\\"\\n        isDisabled\\n      />\\n    );\\n  }\\n}\",\"title\":\"Disabled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Varying sizes': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass NumberInputSizes extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      input1Value: 1,\\n      input2Value: 1234567890,\\n      input3Value: 5,\\n      input4Value: 12345\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        [`${event.target.name}Value`]: Number(event.target.value)\\n      });\\n    };\\n\\n    this.onMinus = (e, inputName) => {\\n      this.setState({\\n        [`${inputName}Value`]: this.state[`${inputName}Value`] - 1\\n      });\\n    };\\n\\n    this.onPlus = (e, inputName) => {\\n      this.setState({\\n        [`${inputName}Value`]: this.state[`${inputName}Value`] + 1\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { input1Value, input2Value, input3Value, input4Value } = this.state;\\n\\n    return (\\n      <React.Fragment>\\n        <NumberInput\\n          value={input1Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input1\\\"\\n          inputAriaLabel=\\\"number input 1\\\"\\n          minusBtnAriaLabel=\\\"input 2 minus\\\"\\n          plusBtnAriaLabel=\\\"input 2 plus\\\"\\n          widthChars={1}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input2Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input2\\\"\\n          inputAriaLabel=\\\"number input 2\\\"\\n          minusBtnAriaLabel=\\\"input 2 minus\\\"\\n          plusBtnAriaLabel=\\\"input 2 plus\\\"\\n          widthChars={10}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input3Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input3\\\"\\n          inputAriaLabel=\\\"number input 3\\\"\\n          minusBtnAriaLabel=\\\"input 3 minus\\\"\\n          plusBtnAriaLabel=\\\"input 3 plus\\\"\\n          widthChars={5}\\n        />\\n        <br />\\n        <br />\\n        <NumberInput\\n          value={input4Value}\\n          onMinus={this.onMinus}\\n          onChange={this.onChange}\\n          onPlus={this.onPlus}\\n          inputName=\\\"input4\\\"\\n          inputAriaLabel=\\\"number input 4\\\"\\n          minusBtnAriaLabel=\\\"input 4 minus\\\"\\n          plusBtnAriaLabel=\\\"input 4 plus\\\"\\n          widthChars={5}\\n        />\\n      </React.Fragment>\\n    );\\n  }\\n}\",\"title\":\"Varying sizes\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Custom increment/decrement': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass CustomStepNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90,\\n      step: 3\\n    };\\n\\n    this.stepper = step => () => {\\n      this.setState(prev => ({ ...prev, value: prev.value + step }));\\n    };\\n\\n    this.onChange = event => {\\n      this.setState({\\n        value: Number(event.target.value)\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        onMinus={this.stepper(-3)}\\n        onChange={this.onChange}\\n        onPlus={this.stepper(3)}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Custom increment/decrement\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Custom increment/decrement and thresholds': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NumberInput } from '@patternfly/react-core';\\n\\nclass CustomStepNumberInput extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: 90,\\n      step: 3\\n    };\\n    this.minValue = 90;\\n    this.maxValue = 100;\\n\\n    this.normalizeBetween = (value, min, max) => {\\n      if (min !== undefined && max !== undefined) {\\n        return Math.max(Math.min(value, max), min);\\n      } else if (value <= min) {\\n        return min;\\n      } else if (value >= max) {\\n        return max;\\n      }\\n      return value;\\n    };\\n\\n    this.stepper = step => () => {\\n      this.setState(prev => ({\\n        ...prev,\\n        value: this.normalizeBetween(prev.value + step, this.minValue, this.maxValue)\\n      }));\\n    };\\n\\n    this.onChange = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue\\n      });\\n    };\\n\\n    this.onBlur = event => {\\n      const newValue = isNaN(event.target.value) ? 0 : Number(event.target.value);\\n      this.setState({\\n        value: newValue > this.maxValue ? this.maxValue : newValue < this.minValue ? this.minValue : newValue\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n    return (\\n      <NumberInput\\n        value={value}\\n        min={this.minValue}\\n        max={this.maxValue}\\n        onMinus={this.stepper(-3)}\\n        onChange={this.onChange}\\n        onBlur={this.onBlur}\\n        onPlus={this.stepper(3)}\\n        inputName=\\\"input\\\"\\n        inputAriaLabel=\\\"number input\\\"\\n        minusBtnAriaLabel=\\\"minus\\\"\\n        plusBtnAriaLabel=\\\"plus\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Custom increment/decrement and thresholds\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Default\"])}\n    {React.createElement(pageData.examples[\"With unit\"])}\n    {React.createElement(pageData.examples[\"With unit and thresholds\"])}\n    {React.createElement(pageData.examples[\"Disabled\"])}\n    {React.createElement(pageData.examples[\"Varying sizes\"])}\n    {React.createElement(pageData.examples[\"Custom increment/decrement\"])}\n    {React.createElement(pageData.examples[\"Custom increment/decrement and thresholds\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsNumberInputReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}