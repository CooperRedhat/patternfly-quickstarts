{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Chip group\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/chip-group/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ChipGroup/examples/ChipGroup.md\",\n  \"propComponents\": [{\n    \"name\": \"Chip\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the chip text\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the chip item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"closeBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria Label for close button\",\n      \"defaultValue\": \"'close'\"\n    }, {\n      \"name\": \"component\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip.\",\n      \"defaultValue\": \"'div'\"\n    }, {\n      \"name\": \"isOverflowChip\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the chip is an overflow chip\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isReadOnly\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if chip is read only\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Function that is called when clicking on the chip close button\",\n      \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if text is longer\",\n      \"defaultValue\": \"'top'\"\n    }]\n  }, {\n    \"name\": \"ChipGroup\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Aria label for chip group that does not have a category name\",\n      \"defaultValue\": \"'Chip group category'\"\n    }, {\n      \"name\": \"categoryName\",\n      \"type\": \"string\",\n      \"description\": \"Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the chip group. Should be <Chip> elements.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the chip item\"\n    }, {\n      \"name\": \"closeBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label for close button\",\n      \"defaultValue\": \"'Close chip group'\"\n    }, {\n      \"name\": \"collapsedText\",\n      \"type\": \"string\",\n      \"description\": \"Customizeable template string. Use variable \\\"${remaining}\\\" for the overflow chip count.\",\n      \"defaultValue\": \"'${remaining} more'\"\n    }, {\n      \"name\": \"defaultIsOpen\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag for having the chip group default to expanded\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"expandedText\",\n      \"type\": \"string\",\n      \"description\": \"Customizable \\\"Show Less\\\" text string\",\n      \"defaultValue\": \"'Show Less'\"\n    }, {\n      \"name\": \"isClosable\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag if chip group can be closed\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"numChips\",\n      \"type\": \"number\",\n      \"description\": \"Set number of chips to show before overflow\",\n      \"defaultValue\": \"3\"\n    }, {\n      \"name\": \"onClick\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Function that is called when clicking on the chip group close button\",\n      \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n    }, {\n      \"name\": \"onOverflowChipClick\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Function that is called when clicking on the overflow (expand/collapse) chip button\",\n      \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if the category name text is longer\",\n      \"defaultValue\": \"'top'\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-chip-group\"],\n  \"examples\": [\"Simple inline\", \"With categories\", \"With removable categories\"]\n};\npageData.examples = {\n  'Simple inline': function SimpleInline(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupInline: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState([\\n    'Chip one',\\n    'Really long chip that goes on and on',\\n    'Chip three',\\n    'Chip four',\\n    'Chip five'\\n  ]);\\n\\n  const deleteItem = (id: string) => {\\n    const copyOfChips = [...chips];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n    setChips(filteredCopy);\\n  };\\n\\n  return (\\n    <ChipGroup>\\n      {chips.map(currentChip => (\\n        <Chip key={currentChip} onClick={() => deleteItem(currentChip)}>\\n          {currentChip}\\n        </Chip>\\n      ))}\\n    </ChipGroup>\\n  );\\n};\\n\",\n      \"title\": \"Simple inline\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With categories': function WithCategories(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupWithCategories: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState([\\n    'Chip one',\\n    'Really long chip that goes on and on',\\n    'Chip three',\\n    'Chip four',\\n    'Chip five'\\n  ]);\\n\\n  const deleteItem = (id: string) => {\\n    const copyOfChips = [...chips];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n    setChips(filteredCopy);\\n  };\\n\\n  return (\\n    <ChipGroup categoryName=\\\"Category one\\\">\\n      {chips.map(currentChip => (\\n        <Chip key={currentChip} onClick={() => deleteItem(currentChip)}>\\n          {currentChip}\\n        </Chip>\\n      ))}\\n    </ChipGroup>\\n  );\\n};\\n\",\n      \"title\": \"With categories\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'With removable categories': function WithRemovableCategories(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupRemovableCategories: React.FunctionComponent = () => {\\n  const [chipGroup1, setChipGroup1] = React.useState(['Chip one', 'Chip two', 'Chip three']);\\n  const [chipGroup2, setChipGroup2] = React.useState(['Chip one', 'Chip two', 'Chip three', 'Chip four']);\\n\\n  const deleteItem = (id: string, group: string[]) => {\\n    const copyOfChips = [...group];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n\\n    if (group === chipGroup1) {\\n      setChipGroup1(filteredCopy);\\n    } else {\\n      setChipGroup2(filteredCopy);\\n    }\\n  };\\n\\n  const deleteCategory = (group: string[]) => {\\n    if (group === chipGroup1) {\\n      setChipGroup1([]);\\n    } else {\\n      setChipGroup2([]);\\n    }\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <ChipGroup categoryName=\\\"Category one\\\" isClosable onClick={() => deleteCategory(chipGroup1)}>\\n        {chipGroup1.map(currentChip => (\\n          <Chip key={currentChip} onClick={() => deleteItem(currentChip, chipGroup1)}>\\n            {currentChip}\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n      <br /> <br />\\n      <ChipGroup categoryName=\\\"Category two has a very long name\\\" isClosable onClick={() => deleteCategory(chipGroup2)}>\\n        {chipGroup2.map(currentChip => (\\n          <Chip key={currentChip} onClick={() => deleteItem(currentChip, chipGroup2)}>\\n            {currentChip}\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n    </React.Fragment>\\n  );\\n};\\n\",\n      \"title\": \"With removable categories\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Simple inline\"]), React.createElement(pageData.examples[\"With categories\"]), React.createElement(pageData.examples[\"With removable categories\"]));\n};\n\nComponent.displayName = 'ComponentsChipGroupReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/chip-group/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Chip group\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/chip-group/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ChipGroup/examples/ChipGroup.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Chip\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the chip text\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the chip item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"closeBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria Label for close button\",\n          \"defaultValue\": \"'close'\"\n        },\n        {\n          \"name\": \"component\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Component that will be used for chip. It is recommended that <button> or <li>  are used when the chip is an overflow chip.\",\n          \"defaultValue\": \"'div'\"\n        },\n        {\n          \"name\": \"isOverflowChip\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the chip is an overflow chip\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isReadOnly\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if chip is read only\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Function that is called when clicking on the chip close button\",\n          \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if text is longer\",\n          \"defaultValue\": \"'top'\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ChipGroup\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Aria label for chip group that does not have a category name\",\n          \"defaultValue\": \"'Chip group category'\"\n        },\n        {\n          \"name\": \"categoryName\",\n          \"type\": \"string\",\n          \"description\": \"Category name text for the chip group category.  If this prop is supplied the chip group with have a label and category styling applied\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the chip group. Should be <Chip> elements.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the chip item\"\n        },\n        {\n          \"name\": \"closeBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label for close button\",\n          \"defaultValue\": \"'Close chip group'\"\n        },\n        {\n          \"name\": \"collapsedText\",\n          \"type\": \"string\",\n          \"description\": \"Customizeable template string. Use variable \\\"${remaining}\\\" for the overflow chip count.\",\n          \"defaultValue\": \"'${remaining} more'\"\n        },\n        {\n          \"name\": \"defaultIsOpen\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag for having the chip group default to expanded\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"expandedText\",\n          \"type\": \"string\",\n          \"description\": \"Customizable \\\"Show Less\\\" text string\",\n          \"defaultValue\": \"'Show Less'\"\n        },\n        {\n          \"name\": \"isClosable\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag if chip group can be closed\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"numChips\",\n          \"type\": \"number\",\n          \"description\": \"Set number of chips to show before overflow\",\n          \"defaultValue\": \"3\"\n        },\n        {\n          \"name\": \"onClick\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Function that is called when clicking on the chip group close button\",\n          \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n        },\n        {\n          \"name\": \"onOverflowChipClick\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Function that is called when clicking on the overflow (expand/collapse) chip button\",\n          \"defaultValue\": \"(_e: React.MouseEvent) => undefined as any\"\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if the category name text is longer\",\n          \"defaultValue\": \"'top'\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-chip-group\"\n  ],\n  \"examples\": [\n    \"Simple inline\",\n    \"With categories\",\n    \"With removable categories\"\n  ]\n};\npageData.examples = {\n  'Simple inline': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupInline: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState([\\n    'Chip one',\\n    'Really long chip that goes on and on',\\n    'Chip three',\\n    'Chip four',\\n    'Chip five'\\n  ]);\\n\\n  const deleteItem = (id: string) => {\\n    const copyOfChips = [...chips];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n    setChips(filteredCopy);\\n  };\\n\\n  return (\\n    <ChipGroup>\\n      {chips.map(currentChip => (\\n        <Chip key={currentChip} onClick={() => deleteItem(currentChip)}>\\n          {currentChip}\\n        </Chip>\\n      ))}\\n    </ChipGroup>\\n  );\\n};\\n\",\"title\":\"Simple inline\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With categories': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupWithCategories: React.FunctionComponent = () => {\\n  const [chips, setChips] = React.useState([\\n    'Chip one',\\n    'Really long chip that goes on and on',\\n    'Chip three',\\n    'Chip four',\\n    'Chip five'\\n  ]);\\n\\n  const deleteItem = (id: string) => {\\n    const copyOfChips = [...chips];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n    setChips(filteredCopy);\\n  };\\n\\n  return (\\n    <ChipGroup categoryName=\\\"Category one\\\">\\n      {chips.map(currentChip => (\\n        <Chip key={currentChip} onClick={() => deleteItem(currentChip)}>\\n          {currentChip}\\n        </Chip>\\n      ))}\\n    </ChipGroup>\\n  );\\n};\\n\",\"title\":\"With categories\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'With removable categories': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Chip, ChipGroup } from '@patternfly/react-core';\\n\\nexport const ChipGroupRemovableCategories: React.FunctionComponent = () => {\\n  const [chipGroup1, setChipGroup1] = React.useState(['Chip one', 'Chip two', 'Chip three']);\\n  const [chipGroup2, setChipGroup2] = React.useState(['Chip one', 'Chip two', 'Chip three', 'Chip four']);\\n\\n  const deleteItem = (id: string, group: string[]) => {\\n    const copyOfChips = [...group];\\n    const filteredCopy = copyOfChips.filter(chip => chip !== id);\\n\\n    if (group === chipGroup1) {\\n      setChipGroup1(filteredCopy);\\n    } else {\\n      setChipGroup2(filteredCopy);\\n    }\\n  };\\n\\n  const deleteCategory = (group: string[]) => {\\n    if (group === chipGroup1) {\\n      setChipGroup1([]);\\n    } else {\\n      setChipGroup2([]);\\n    }\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <ChipGroup categoryName=\\\"Category one\\\" isClosable onClick={() => deleteCategory(chipGroup1)}>\\n        {chipGroup1.map(currentChip => (\\n          <Chip key={currentChip} onClick={() => deleteItem(currentChip, chipGroup1)}>\\n            {currentChip}\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n      <br /> <br />\\n      <ChipGroup categoryName=\\\"Category two has a very long name\\\" isClosable onClick={() => deleteCategory(chipGroup2)}>\\n        {chipGroup2.map(currentChip => (\\n          <Chip key={currentChip} onClick={() => deleteItem(currentChip, chipGroup2)}>\\n            {currentChip}\\n          </Chip>\\n        ))}\\n      </ChipGroup>\\n    </React.Fragment>\\n  );\\n};\\n\",\"title\":\"With removable categories\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Simple inline\"])}\n    {React.createElement(pageData.examples[\"With categories\"])}\n    {React.createElement(pageData.examples[\"With removable categories\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsChipGroupReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}