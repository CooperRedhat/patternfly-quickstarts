{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport '../../../../node_modules/@patternfly/react-core/src/components/NotificationBadge/examples/./notificationBadge.css';\nvar pageData = {\n  \"id\": \"Notification badge\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/notification-badge/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NotificationBadge/examples/NotificationBadge.md\",\n  \"propComponents\": [{\n    \"name\": \"NotificationBadge\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Adds accessible text to the notification badge.\"\n    }, {\n      \"name\": \"attentionIcon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Icon to display for attention variant\",\n      \"defaultValue\": \"<AttentionBellIcon />\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"content rendered inside the notification badge\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"additional classes added to the notification badge\"\n    }, {\n      \"name\": \"count\",\n      \"type\": \"number\",\n      \"description\": \"A number displayed in the badge alongside the icon\",\n      \"defaultValue\": \"0\"\n    }, {\n      \"name\": \"icon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Icon do display in notification badge\",\n      \"defaultValue\": \"<BellIcon />\"\n    }, {\n      \"name\": \"isRead\",\n      \"type\": \"boolean\",\n      \"description\": \"Use the variant prop instead - Adds styling to the notification badge to indicate it has been read\",\n      \"deprecated\": true\n    }, {\n      \"name\": \"variant\",\n      \"type\": \"NotificationBadgeVariant | 'read' | 'unread' | 'attention'\",\n      \"description\": \"Determines the variant of the notification badge\",\n      \"defaultValue\": \"isRead ? 'read' : 'unread'\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-notification-badge\"],\n  \"examples\": [\"Basic\", \"With count\"]\n};\npageData.liveContext = {\n  BellIcon: BellIcon\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NotificationBadge } from '@patternfly/react-core';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\n\\nclass SimpleNotificationBadge extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      unreadVariant: 'unread',\\n      attentionVariant: 'attention'\\n    };\\n    this.onFirstClick = () => {\\n      this.setState({\\n        unreadVariant: 'read'\\n      });\\n    };\\n    this.onSecondClick = () => {\\n      this.setState({\\n        attentionVariant: 'read'\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { unreadVariant, attentionVariant } = this.state;\\n    return (\\n      <div className=\\\"pf-t-dark\\\">\\n        <NotificationBadge variant={unreadVariant} onClick={this.onFirstClick} aria-label=\\\"First notifications\\\" />\\n        <NotificationBadge variant={attentionVariant} onClick={this.onSecondClick} aria-label=\\\"Second notifications\\\" />\\n      </div>\\n    );\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'With count': function WithCount(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { NotificationBadge } from '@patternfly/react-core';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\n\\nclass NotificationBadgeWithCount extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      firstVariant: 'unread',\\n      firstCount: 30,\\n      secondVariant: 'attention',\\n      secondCount: 30\\n    };\\n    this.onFirstClick = () => {\\n      this.setState({\\n        firstVariant: 'read',\\n      });\\n    };\\n    this.onSecondClick = () => {\\n      this.setState({\\n        secondVariant: 'read'\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { firstVariant, firstCount, secondVariant, secondCount } = this.state;\\n    return (\\n      <div className=\\\"pf-t-dark\\\">\\n        <NotificationBadge variant={firstVariant} onClick={this.onFirstClick} aria-label=\\\"First notifications\\\" count={firstCount} />\\n        <NotificationBadge variant={secondVariant} onClick={this.onSecondClick} aria-label=\\\"Second notifications\\\" count={secondCount} />\\n      </div>\\n    );\\n  }\\n}\",\n      \"title\": \"With count\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples-0\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"With count\"]));\n};\n\nComponent.displayName = 'ComponentsNotificationBadgeReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","BellIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/notification-badge/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\nimport '../../../../node_modules/@patternfly/react-core/src/components/NotificationBadge/examples/./notificationBadge.css';\nconst pageData = {\n  \"id\": \"Notification badge\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/notification-badge/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/NotificationBadge/examples/NotificationBadge.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"NotificationBadge\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Adds accessible text to the notification badge.\"\n        },\n        {\n          \"name\": \"attentionIcon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Icon to display for attention variant\",\n          \"defaultValue\": \"<AttentionBellIcon />\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"content rendered inside the notification badge\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"additional classes added to the notification badge\"\n        },\n        {\n          \"name\": \"count\",\n          \"type\": \"number\",\n          \"description\": \"A number displayed in the badge alongside the icon\",\n          \"defaultValue\": \"0\"\n        },\n        {\n          \"name\": \"icon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Icon do display in notification badge\",\n          \"defaultValue\": \"<BellIcon />\"\n        },\n        {\n          \"name\": \"isRead\",\n          \"type\": \"boolean\",\n          \"description\": \"Use the variant prop instead - Adds styling to the notification badge to indicate it has been read\",\n          \"deprecated\": true\n        },\n        {\n          \"name\": \"variant\",\n          \"type\": \"NotificationBadgeVariant | 'read' | 'unread' | 'attention'\",\n          \"description\": \"Determines the variant of the notification badge\",\n          \"defaultValue\": \"isRead ? 'read' : 'unread'\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-notification-badge\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"With count\"\n  ]\n};\npageData.liveContext = {\n  BellIcon\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NotificationBadge } from '@patternfly/react-core';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\n\\nclass SimpleNotificationBadge extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      unreadVariant: 'unread',\\n      attentionVariant: 'attention'\\n    };\\n    this.onFirstClick = () => {\\n      this.setState({\\n        unreadVariant: 'read'\\n      });\\n    };\\n    this.onSecondClick = () => {\\n      this.setState({\\n        attentionVariant: 'read'\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { unreadVariant, attentionVariant } = this.state;\\n    return (\\n      <div className=\\\"pf-t-dark\\\">\\n        <NotificationBadge variant={unreadVariant} onClick={this.onFirstClick} aria-label=\\\"First notifications\\\" />\\n        <NotificationBadge variant={attentionVariant} onClick={this.onSecondClick} aria-label=\\\"Second notifications\\\" />\\n      </div>\\n    );\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'With count': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { NotificationBadge } from '@patternfly/react-core';\\nimport BellIcon from '@patternfly/react-icons/dist/esm/icons/bell-icon';\\n\\nclass NotificationBadgeWithCount extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      firstVariant: 'unread',\\n      firstCount: 30,\\n      secondVariant: 'attention',\\n      secondCount: 30\\n    };\\n    this.onFirstClick = () => {\\n      this.setState({\\n        firstVariant: 'read',\\n      });\\n    };\\n    this.onSecondClick = () => {\\n      this.setState({\\n        secondVariant: 'read'\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { firstVariant, firstCount, secondVariant, secondCount } = this.state;\\n    return (\\n      <div className=\\\"pf-t-dark\\\">\\n        <NotificationBadge variant={firstVariant} onClick={this.onFirstClick} aria-label=\\\"First notifications\\\" count={firstCount} />\\n        <NotificationBadge variant={secondVariant} onClick={this.onSecondClick} aria-label=\\\"Second notifications\\\" count={secondCount} />\\n      </div>\\n    );\\n  }\\n}\",\"title\":\"With count\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    <AutoLinkHeader {...{\"id\":\"examples-0\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"With count\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsNotificationBadgeReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,QAAP,MAAqB,kDAArB;AACA,OAAO,mHAAP;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,oBADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,sCAJO;EAKf,cAAc,2JALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,mBADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,YADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CADO,EAMP;MACE,QAAQ,eADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,uCAHjB;MAIE,gBAAgB;IAJlB,CANO,EAYP;MACE,QAAQ,UADV;MAEE,QAAQ,iBAFV;MAGE,eAAe;IAHjB,CAZO,EAiBP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe;IAHjB,CAjBO,EAsBP;MACE,QAAQ,OADV;MAEE,QAAQ,QAFV;MAGE,eAAe,oDAHjB;MAIE,gBAAgB;IAJlB,CAtBO,EA4BP;MACE,QAAQ,MADV;MAEE,QAAQ,iBAFV;MAGE,eAAe,uCAHjB;MAIE,gBAAgB;IAJlB,CA5BO,EAkCP;MACE,QAAQ,QADV;MAEE,QAAQ,SAFV;MAGE,eAAe,oGAHjB;MAIE,cAAc;IAJhB,CAlCO,EAwCP;MACE,QAAQ,SADV;MAEE,QAAQ,4DAFV;MAGE,eAAe,kDAHjB;MAIE,gBAAgB;IAJlB,CAxCO;EAHX,CADgB,CANH;EA2Df,aAAa,CACX,yBADW,CA3DE;EA8Df,YAAY,CACV,OADU,EAEV,YAFU;AA9DG,CAAjB;AAmEAA,QAAQ,CAACC,WAAT,GAAuB;EACrBF,QAAQ,EAARA;AADqB,CAAvB;AAGAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,s9BAA9C;MAAqgC,SAAQ,OAA7gC;MAAqhC,QAAO;IAA5hC,GADY;EAAA,CADI;EAKlB,cAAc,mBAAAA,KAAK;IAAA,oBACjB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,yjCAA9C;MAAwmC,SAAQ,YAAhnC;MAA6nC,QAAO;IAApoC,GADiB;EAAA;AALD,CAApB;;AAWA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cADF,EAIGV,KAAK,CAACW,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,OAAlB,CAApB,CAJH,eAKE,oBAAC,cAAD;IAAqB,MAAK,YAA1B;IAAuC,QAAO,IAA9C;IAAmD,aAAY;EAA/D,cALF,EAQGR,KAAK,CAACW,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,YAAlB,CAApB,CARH,CADgB;AAAA,CAAlB;;AAYAE,SAAS,CAACE,WAAV,GAAwB,sCAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}