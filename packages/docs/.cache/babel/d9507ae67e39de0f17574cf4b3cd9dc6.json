{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Date picker\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/date-picker/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DatePicker.md\",\n  \"beta\": true,\n  \"examples\": [\"Date range picker\", \"Date and time range picker\"]\n};\npageData.examples = {\n  'Date range picker': function DateRangePicker(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import { Split, SplitItem, DatePicker, isValidDate, yyyyMMddFormat } from '@patternfly/react-core';\\n\\nDateRangePicker = () => {\\n  const [from, setFrom] = React.useState();\\n  const [to, setTo] = React.useState();\\n\\n  const toValidator = date => isValidDate(from) && date >= from ? '' : 'To date must be less than from date';\\n  const onFromChange = (_str, date) => {\\n    setFrom(new Date(date));\\n    if (isValidDate(date)) {\\n      date.setDate(date.getDate() + 1);\\n      setTo(yyyyMMddFormat(date));\\n    }\\n    else {\\n      setTo('');\\n    }\\n  };\\n\\n  return (\\n    <Split>\\n      <SplitItem>\\n        <DatePicker\\n          onChange={onFromChange}\\n          aria-label=\\\"Start date\\\"\\n          placeholder=\\\"YYYY-MM-DD\\\"\\n        />\\n      </SplitItem>\\n      <SplitItem style={{ padding: '6px 12px 0 12px' }}>\\n        to\\n      </SplitItem>\\n      <SplitItem>\\n        <DatePicker\\n          value={to}\\n          onChange={date => setTo(date)}\\n          isDisabled={!isValidDate(from)}\\n          rangeStart={from}\\n          validators={[toValidator]}\\n          aria-label=\\\"End date\\\"\\n          placeholder=\\\"YYYY-MM-DD\\\"\\n        />\\n      </SplitItem>\\n    </Split>\\n  );\\n}\",\n      \"title\": \"Date range picker\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"This is intended to be used as a filter. After selecting a start date, the next date is automatically selected.\"));\n  },\n  'Date and time range picker': function DateAndTimeRangePicker(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import { Flex, FlexItem, InputGroup, DatePicker, isValidDate, TimePicker, yyyyMMddFormat, updateDateTime } from '@patternfly/react-core';\\n\\nDateTimeRangePicker = () => {\\n  const [from, setFrom] = React.useState();\\n  const [to, setTo] = React.useState();\\n\\n  const toValidator = date => {\\n    return isValidDate(from) && yyyyMMddFormat(date) >= yyyyMMddFormat(from) ? '' : 'To date must after from date';\\n  };\\n  \\n  const onFromDateChange = (inputDate, newFromDate) => {\\n    if (isValidDate(from) && isValidDate(newFromDate) && inputDate === yyyyMMddFormat(newFromDate)) {\\n      newFromDate.setHours(from.getHours());\\n      newFromDate.setMinutes(from.getMinutes());\\n    }\\n    if (isValidDate(newFromDate) && inputDate === yyyyMMddFormat(newFromDate)) {\\n      setFrom(new Date(newFromDate));\\n    }\\n  };\\n  \\n  const onFromTimeChange = (time, hour, minute) => {\\n    if (isValidDate(from)) {\\n      const updatedFromDate = new Date(from);\\n      updatedFromDate.setHours(hour);\\n      updatedFromDate.setMinutes(minute);\\n      setFrom(updatedFromDate);\\n    }\\n  };\\n\\n  const onToDateChange = (inputDate, newToDate) => {\\n    if (isValidDate(to) && isValidDate(newToDate) && inputDate === yyyyMMddFormat(newToDate)) {\\n      newToDate.setHours(to.getHours());\\n      newToDate.setMinutes(to.getMinutes());\\n    }\\n    if (isValidDate(newToDate) && inputDate === yyyyMMddFormat(newToDate)){\\n      setTo(newToDate);\\n    }\\n  };\\n  \\n  const onToTimeChange = (time, hour, minute) => {\\n    if (isValidDate(to)) {\\n      const updatedToDate = new Date(to);\\n      updatedToDate.setHours(hour);\\n      updatedToDate.setMinutes(minute);\\n      setTo(updatedToDate);\\n    }\\n  };\\n\\n  return (\\n    <Flex direction={{default: 'column', lg: 'row'}}>\\n      <FlexItem>\\n        <InputGroup>\\n          <DatePicker\\n            onChange={onFromDateChange}\\n            aria-label=\\\"Start date\\\"\\n            placeholder=\\\"YYYY-MM-DD\\\"\\n          />\\n          <TimePicker \\n            aria-label=\\\"Start time\\\"\\n            style={{width: '150px'}} \\n            onChange={onFromTimeChange} \\n          />\\n        </InputGroup>\\n      </FlexItem>\\n      <FlexItem>\\n        to\\n      </FlexItem>\\n      <FlexItem>\\n        <InputGroup>\\n          <DatePicker\\n            value={isValidDate(to) ? yyyyMMddFormat(to) : to}\\n            onChange={onToDateChange}\\n            isDisabled={!isValidDate(from)}\\n            rangeStart={from}\\n            validators={[toValidator]}\\n            aria-label=\\\"End date\\\"\\n            placeholder=\\\"YYYY-MM-DD\\\"\\n          />\\n          <TimePicker style={{width: '150px'}} onChange={onToTimeChange} isDisabled={!isValidDate(from)}/>\\n        </InputGroup>\\n      </FlexItem>\\n    </Flex>\\n  );\\n}\",\n      \"title\": \"Date and time range picker\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Date range picker\"]), React.createElement(pageData.examples[\"Date and time range picker\"]));\n};\n\nComponent.displayName = 'ComponentsDatePickerReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/date-picker/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Date picker\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/date-picker/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/DatePicker.md\",\n  \"beta\": true,\n  \"examples\": [\n    \"Date range picker\",\n    \"Date and time range picker\"\n  ]\n};\npageData.examples = {\n  'Date range picker': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import { Split, SplitItem, DatePicker, isValidDate, yyyyMMddFormat } from '@patternfly/react-core';\\n\\nDateRangePicker = () => {\\n  const [from, setFrom] = React.useState();\\n  const [to, setTo] = React.useState();\\n\\n  const toValidator = date => isValidDate(from) && date >= from ? '' : 'To date must be less than from date';\\n  const onFromChange = (_str, date) => {\\n    setFrom(new Date(date));\\n    if (isValidDate(date)) {\\n      date.setDate(date.getDate() + 1);\\n      setTo(yyyyMMddFormat(date));\\n    }\\n    else {\\n      setTo('');\\n    }\\n  };\\n\\n  return (\\n    <Split>\\n      <SplitItem>\\n        <DatePicker\\n          onChange={onFromChange}\\n          aria-label=\\\"Start date\\\"\\n          placeholder=\\\"YYYY-MM-DD\\\"\\n        />\\n      </SplitItem>\\n      <SplitItem style={{ padding: '6px 12px 0 12px' }}>\\n        to\\n      </SplitItem>\\n      <SplitItem>\\n        <DatePicker\\n          value={to}\\n          onChange={date => setTo(date)}\\n          isDisabled={!isValidDate(from)}\\n          rangeStart={from}\\n          validators={[toValidator]}\\n          aria-label=\\\"End date\\\"\\n          placeholder=\\\"YYYY-MM-DD\\\"\\n        />\\n      </SplitItem>\\n    </Split>\\n  );\\n}\",\"title\":\"Date range picker\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`This is intended to be used as a filter. After selecting a start date, the next date is automatically selected.`}\n      </p>\n    </Example>,\n  'Date and time range picker': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import { Flex, FlexItem, InputGroup, DatePicker, isValidDate, TimePicker, yyyyMMddFormat, updateDateTime } from '@patternfly/react-core';\\n\\nDateTimeRangePicker = () => {\\n  const [from, setFrom] = React.useState();\\n  const [to, setTo] = React.useState();\\n\\n  const toValidator = date => {\\n    return isValidDate(from) && yyyyMMddFormat(date) >= yyyyMMddFormat(from) ? '' : 'To date must after from date';\\n  };\\n  \\n  const onFromDateChange = (inputDate, newFromDate) => {\\n    if (isValidDate(from) && isValidDate(newFromDate) && inputDate === yyyyMMddFormat(newFromDate)) {\\n      newFromDate.setHours(from.getHours());\\n      newFromDate.setMinutes(from.getMinutes());\\n    }\\n    if (isValidDate(newFromDate) && inputDate === yyyyMMddFormat(newFromDate)) {\\n      setFrom(new Date(newFromDate));\\n    }\\n  };\\n  \\n  const onFromTimeChange = (time, hour, minute) => {\\n    if (isValidDate(from)) {\\n      const updatedFromDate = new Date(from);\\n      updatedFromDate.setHours(hour);\\n      updatedFromDate.setMinutes(minute);\\n      setFrom(updatedFromDate);\\n    }\\n  };\\n\\n  const onToDateChange = (inputDate, newToDate) => {\\n    if (isValidDate(to) && isValidDate(newToDate) && inputDate === yyyyMMddFormat(newToDate)) {\\n      newToDate.setHours(to.getHours());\\n      newToDate.setMinutes(to.getMinutes());\\n    }\\n    if (isValidDate(newToDate) && inputDate === yyyyMMddFormat(newToDate)){\\n      setTo(newToDate);\\n    }\\n  };\\n  \\n  const onToTimeChange = (time, hour, minute) => {\\n    if (isValidDate(to)) {\\n      const updatedToDate = new Date(to);\\n      updatedToDate.setHours(hour);\\n      updatedToDate.setMinutes(minute);\\n      setTo(updatedToDate);\\n    }\\n  };\\n\\n  return (\\n    <Flex direction={{default: 'column', lg: 'row'}}>\\n      <FlexItem>\\n        <InputGroup>\\n          <DatePicker\\n            onChange={onFromDateChange}\\n            aria-label=\\\"Start date\\\"\\n            placeholder=\\\"YYYY-MM-DD\\\"\\n          />\\n          <TimePicker \\n            aria-label=\\\"Start time\\\"\\n            style={{width: '150px'}} \\n            onChange={onFromTimeChange} \\n          />\\n        </InputGroup>\\n      </FlexItem>\\n      <FlexItem>\\n        to\\n      </FlexItem>\\n      <FlexItem>\\n        <InputGroup>\\n          <DatePicker\\n            value={isValidDate(to) ? yyyyMMddFormat(to) : to}\\n            onChange={onToDateChange}\\n            isDisabled={!isValidDate(from)}\\n            rangeStart={from}\\n            validators={[toValidator]}\\n            aria-label=\\\"End date\\\"\\n            placeholder=\\\"YYYY-MM-DD\\\"\\n          />\\n          <TimePicker style={{width: '150px'}} onChange={onToTimeChange} isDisabled={!isValidDate(from)}/>\\n        </InputGroup>\\n      </FlexItem>\\n    </Flex>\\n  );\\n}\",\"title\":\"Date and time range picker\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Date range picker\"])}\n    {React.createElement(pageData.examples[\"Date and time range picker\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsDatePickerReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AAEA,IAAMC,QAAQ,GAAG;EACf,MAAM,aADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,qCAJO;EAKf,cAAc,oHALC;EAMf,QAAQ,IANO;EAOf,YAAY,CACV,mBADU,EAEV,4BAFU;AAPG,CAAjB;AAYAA,QAAQ,CAACC,QAAT,GAAoB;EAClB,qBAAqB,yBAAAC,KAAK;IAAA,oBACxB,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,+qCAA9C;MAA8tC,SAAQ,mBAAtuC;MAA0vC,QAAO;IAAjwC,iBAEE;MAAQ,aAAY;IAApB,qHAFF,CADwB;EAAA,CADR;EAQlB,8BAA8B,gCAAAA,KAAK;IAAA,oBACjC,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,8rFAA9C;MAA6uF,SAAQ,4BAArvF;MAAkxF,QAAO;IAAzxF,GADiC;EAAA;AARjB,CAApB;;AAcA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGR,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,mBAAlB,CAApB,CAJH,EAKGN,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,4BAAlB,CAApB,CALH,CADgB;AAAA,CAAlB;;AASAE,SAAS,CAACE,WAAV,GAAwB,oCAAxB;AACAF,SAAS,CAACH,QAAV,GAAqBA,QAArB;AAEA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}