{"ast":null,"code":"import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Code editor\",\n  \"section\": \"components\",\n  \"source\": \"accessibility\",\n  \"slug\": \"/components/code-editor/accessibility\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/src/content/accessibility/code-editor/code-editor.md\"\n};\npageData.examples = {};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"A \", /*#__PURE__*/React.createElement(\"strong\", null, \"code editor\"), \" is the open sourced monaco code editor wrapped in PatternFly controls and styles. PatternFly does not\\nmanage the interactions or the code for the monaco editor itself.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Keyboard users\"), \" should be able to focus on the code editor controls using \", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab\"), \" to move forward and\\n\", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab + Shift\"), \" to move backward through interactive elements. They should be able to select a focused control\\nusing \", /*#__PURE__*/React.createElement(\"strong\", null, \"Space\"), \" or \", /*#__PURE__*/React.createElement(\"strong\", null, \"Enter\"), \". Keyboard users should also be able to move focus onto the monaco\\ncode editor using \", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab\"), \", and then into the monaco code editor using the \", /*#__PURE__*/React.createElement(\"strong\", null, \"Down arrow\"), \". If focus is in the monaco\\ncode editor, the user should be able to use \", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab + Shift\"), \" to move focus out of the monaco code editor.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Screen reader users\"), \" should be able to navigate through the code editor controls, as well as into and out of the\\nmonaco code editor. Each control should have an aria-label since they are designed to display only an icon with a\\nTooltip. The Tooltips are not announced by the screen reader, so the aria-label must be descriptive and clear.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"The following props/attributes have been added for you or are customizable in PatternFly:\"), /*#__PURE__*/React.createElement(\"table\", {\n    \"className\": \"ws-table pf-c-table pf-m-grid-lg pf-m-compact\",\n    \"role\": \"grid\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"React prop\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"React component it should be applied to\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Which HTML element it appears on in markup\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Reason used\")))), /*#__PURE__*/React.createElement(\"tbody\", {\n    \"role\": \"rowgroup\"\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"copyButtonAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditor\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__controls button\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the copy button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"downloadButtonAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditor\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__controls button\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the download button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"uploadButtonAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditor\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__controls button\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the upload button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"'aria-label'\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditorControl\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__controls button\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for a custom control button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"shortcutsPopoverButtonText\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditor\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__keyboard-shortcuts\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Text to show in the button to open the shortcut popover\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"shortcutsPopoverProps\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CodeEditor\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-code-editor__controls button\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Properties for the shortcut popover. Should contain 'bodyContent' to provide keybaord shortcuts built into the code editor\"))))), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"The monaco code editor comes with some keyboard shortcuts built in, so it is recommended that consumers communicate\\ninformation about the following built in key commands:\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"| Opt + F1 | Accessibility helps |\\n| F1 | View all editor shortcuts |\\n| Ctrl + Space | Activate auto complete |\\n| Cmd + S | Save |\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"Additionally, when implementing a \", /*#__PURE__*/React.createElement(\"strong\", null, \"code editor\"), \", a developer can add additional keyboard controls by adding a command\\nto the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"editor\"), \" parameter passed via the \", /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \"onEditorDidMount\"), \" prop. For example:\"), /*#__PURE__*/React.createElement(Example, {\n    \"code\": \"onEditorDidMount = (editor, monaco) => {\\n    editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Space, () => {console.log(\\\"hello\\\")});\\n};\"\n  }));\n};\n\nComponent.displayName = 'ComponentsCodeEditorAccessibilityDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","Component","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/code-editor/accessibility.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Code editor\",\n  \"section\": \"components\",\n  \"source\": \"accessibility\",\n  \"slug\": \"/components/code-editor/accessibility\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/src/content/accessibility/code-editor/code-editor.md\"\n};\npageData.examples = {\n  \n};\n\nconst Component = () => (\n  <React.Fragment>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`A `}\n      <strong>\n        {`code editor`}\n      </strong>\n      {` is the open sourced monaco code editor wrapped in PatternFly controls and styles. PatternFly does not\nmanage the interactions or the code for the monaco editor itself.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      <strong>\n        {`Keyboard users`}\n      </strong>\n      {` should be able to focus on the code editor controls using `}\n      <strong>\n        {`Tab`}\n      </strong>\n      {` to move forward and\n`}\n      <strong>\n        {`Tab + Shift`}\n      </strong>\n      {` to move backward through interactive elements. They should be able to select a focused control\nusing `}\n      <strong>\n        {`Space`}\n      </strong>\n      {` or `}\n      <strong>\n        {`Enter`}\n      </strong>\n      {`. Keyboard users should also be able to move focus onto the monaco\ncode editor using `}\n      <strong>\n        {`Tab`}\n      </strong>\n      {`, and then into the monaco code editor using the `}\n      <strong>\n        {`Down arrow`}\n      </strong>\n      {`. If focus is in the monaco\ncode editor, the user should be able to use `}\n      <strong>\n        {`Tab + Shift`}\n      </strong>\n      {` to move focus out of the monaco code editor.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      <strong>\n        {`Screen reader users`}\n      </strong>\n      {` should be able to navigate through the code editor controls, as well as into and out of the\nmonaco code editor. Each control should have an aria-label since they are designed to display only an icon with a\nTooltip. The Tooltips are not announced by the screen reader, so the aria-label must be descriptive and clear.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`The following props/attributes have been added for you or are customizable in PatternFly:`}\n    </p>\n    <table {...{\"className\":\"ws-table pf-c-table pf-m-grid-lg pf-m-compact\",\"role\":\"grid\"}}>\n      <thead>\n        <tr {...{\"role\":\"row\"}}>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`React prop`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`React component it should be applied to`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`Which HTML element it appears on in markup`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`Reason used`}\n            </div>\n          </th>\n        </tr>\n      </thead>\n      <tbody {...{\"role\":\"rowgroup\"}}>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`copyButtonAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditor`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__controls button`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the copy button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`downloadButtonAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditor`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__controls button`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the download button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`uploadButtonAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditor`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__controls button`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the upload button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`'aria-label'`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditorControl`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__controls button`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for a custom control button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`shortcutsPopoverButtonText`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditor`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__keyboard-shortcuts`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Text to show in the button to open the shortcut popover`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`shortcutsPopoverProps`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CodeEditor`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-code-editor__controls button`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Properties for the shortcut popover. Should contain 'bodyContent' to provide keybaord shortcuts built into the code editor`}\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`The monaco code editor comes with some keyboard shortcuts built in, so it is recommended that consumers communicate\ninformation about the following built in key commands:`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`| Opt + F1 | Accessibility helps |\n| F1 | View all editor shortcuts |\n| Ctrl + Space | Activate auto complete |\n| Cmd + S | Save |`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`Additionally, when implementing a `}\n      <strong>\n        {`code editor`}\n      </strong>\n      {`, a developer can add additional keyboard controls by adding a command\nto the `}\n      <code {...{\"className\":\"ws-code\"}}>\n        {`editor`}\n      </code>\n      {` parameter passed via the `}\n      <code {...{\"className\":\"ws-code\"}}>\n        {`onEditorDidMount`}\n      </code>\n      {` prop. For example:`}\n    </p>\n    <Example {...{\"code\":\"onEditorDidMount = (editor, monaco) => {\\n    editor.addCommand(monaco.KeyMod.Shift | monaco.KeyCode.Space, () => {console.log(\\\"hello\\\")});\\n};\"}}>\n    </Example>\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsCodeEditorAccessibilityDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}