{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Progress\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/progress/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/ProgressDemo.md\",\n  \"examples\": [\"Basic\", \"With only increasing progress\"]\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Progress, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentValue, setCurrentValue] = React.useState(0);\\n\\n  const onProgressUpdate = nextValue => {\\n    setCurrentValue(nextValue);\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={() => onProgressUpdate(currentValue - 10)} isDisabled={currentValue === 0}>\\n          Decrease value\\n        </Button>{' '}\\n        <Button onClick={() => onProgressUpdate(currentValue + 10)} isDisabled={currentValue === 100}>\\n          Increase value\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {`Progress value is ${currentValue}%.`}\\n        </div>\\n        <Progress value={currentValue} title=\\\"Title\\\" />\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'With only increasing progress': function WithOnlyIncreasingProgress(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Progress, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentValue, setCurrentValue] = React.useState(0);\\n\\n  const onProgressUpdate = nextValue => {\\n    if (nextValue > currentValue) {\\n      setCurrentValue(nextValue);\\n    }\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={() => onProgressUpdate(currentValue - 10)} isDisabled={currentValue === 0}>\\n          Decrease value\\n        </Button>{' '}\\n        <Button onClick={() => onProgressUpdate(currentValue + 10)} isDisabled={currentValue === 100}>\\n          Increase value\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {`Progress value is ${currentValue}%.`}\\n        </div>\\n        <Progress value={currentValue} title=\\\"Title\\\" />\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\n      \"title\": \"With only increasing progress\",\n      \"lang\": \"js\"\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"Sometimes a progress bar should only show increases to progress state. In this case, before the next value is set it should be checked against the current progress. The \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"Decrease progress\"), \" button attempts to set a lower progress value, simulating an update to a progress state that isn't desired, but won't change the progress state due to this check.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"With only increasing progress\"]));\n};\n\nComponent.displayName = 'ComponentsProgressReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/progress/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Progress\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/progress/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/ProgressDemo.md\",\n  \"examples\": [\n    \"Basic\",\n    \"With only increasing progress\"\n  ]\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Progress, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentValue, setCurrentValue] = React.useState(0);\\n\\n  const onProgressUpdate = nextValue => {\\n    setCurrentValue(nextValue);\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={() => onProgressUpdate(currentValue - 10)} isDisabled={currentValue === 0}>\\n          Decrease value\\n        </Button>{' '}\\n        <Button onClick={() => onProgressUpdate(currentValue + 10)} isDisabled={currentValue === 100}>\\n          Increase value\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {`Progress value is ${currentValue}%.`}\\n        </div>\\n        <Progress value={currentValue} title=\\\"Title\\\" />\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'With only increasing progress': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Progress, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentValue, setCurrentValue] = React.useState(0);\\n\\n  const onProgressUpdate = nextValue => {\\n    if (nextValue > currentValue) {\\n      setCurrentValue(nextValue);\\n    }\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={() => onProgressUpdate(currentValue - 10)} isDisabled={currentValue === 0}>\\n          Decrease value\\n        </Button>{' '}\\n        <Button onClick={() => onProgressUpdate(currentValue + 10)} isDisabled={currentValue === 100}>\\n          Increase value\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {`Progress value is ${currentValue}%.`}\\n        </div>\\n        <Progress value={currentValue} title=\\\"Title\\\" />\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\"title\":\"With only increasing progress\",\"lang\":\"js\"}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`Sometimes a progress bar should only show increases to progress state. In this case, before the next value is set it should be checked against the current progress. The `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`Decrease progress`}\n        </code>\n        {` button attempts to set a lower progress value, simulating an update to a progress state that isn't desired, but won't change the progress state due to this check.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"With only increasing progress\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsProgressReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AAEA,IAAMC,QAAQ,GAAG;EACf,MAAM,UADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,kCAJO;EAKf,cAAc,sHALC;EAMf,YAAY,CACV,OADU,EAEV,+BAFU;AANG,CAAjB;AAWAA,QAAQ,CAACC,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,46BAA9C;MAA29B,SAAQ,OAAn+B;MAA2+B,QAAO;IAAl/B,GADY;EAAA,CADI;EAKlB,iCAAiC,oCAAAA,KAAK;IAAA,oBACpC,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,09BAA9C;MAAygC,SAAQ,+BAAjhC;MAAijC,QAAO;IAAxjC,iBAEE;MAAQ,aAAY;IAApB,6LAGE;MAAW,aAAY;IAAvB,uBAHF,wKAFF,CADoC;EAAA;AALpB,CAApB;;AAmBA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGR,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,OAAlB,CAApB,CAJH,EAKGN,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,+BAAlB,CAApB,CALH,CADgB;AAAA,CAAlB;;AASAE,SAAS,CAACE,WAAV,GAAwB,kCAAxB;AACAF,SAAS,CAACH,QAAV,GAAqBA,QAArB;AAEA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}