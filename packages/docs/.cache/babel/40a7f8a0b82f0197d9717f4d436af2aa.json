{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport avatarImg from '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./avatarImg.svg';\nimport avatarImgDark from '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./avatarImgDark.svg';\nimport '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./example.css';\nvar pageData = {\n  \"id\": \"Avatar\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/avatar/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Avatar/examples/Avatar.md\",\n  \"propComponents\": [{\n    \"name\": \"Avatar\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"alt\",\n      \"type\": \"string\",\n      \"description\": \"Attribute that specifies the alternate text of the image for the Avatar.\",\n      \"required\": true\n    }, {\n      \"name\": \"border\",\n      \"type\": \"'light' | 'dark'\",\n      \"description\": \"Border to add\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the Avatar.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"size\",\n      \"type\": \"'sm' | 'md' | 'lg' | 'xl'\",\n      \"description\": \"Size variant of avatar.\"\n    }, {\n      \"name\": \"src\",\n      \"type\": \"string\",\n      \"description\": \"Attribute that specifies the URL of the image for the Avatar.\",\n      \"defaultValue\": \"''\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-avatar\"],\n  \"examples\": [\"Basic\", \"Size variations\", \"Bordered - light\", \"Bordered - dark\"]\n};\npageData.liveContext = {\n  avatarImg: avatarImg,\n  avatarImgDark: avatarImgDark\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './avatarImg.svg';\\n\\nconst Basic = () => <Avatar src={avatarImg} alt=\\\"avatar\\\" />;\",\n      \"title\": \"Basic\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Size variations': function SizeVariations(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './avatarImg.svg';\\n\\nconst SizeVariations = () => (\\n  <React.Fragment>\\n    Small\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"sm\\\" />\\n    <br />\\n    Medium\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"md\\\" />\\n    <br />\\n    Large\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"lg\\\" />\\n    <br />\\n    Extra Large\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"xl\\\" />\\n  </React.Fragment>\\n)\",\n      \"title\": \"Size variations\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Bordered - light': function BorderedLight(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './img_avatar.svg';\\n\\nconst BorderedLight = () => <Avatar src={avatarImg} alt=\\\"avatar\\\" border=\\\"light\\\" />;\",\n      \"title\": \"Bordered - light\",\n      \"lang\": \"ts\"\n    }));\n  },\n  'Bordered - dark': function BorderedDark(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImgDark from './img_avatar-dark.svg';\\n\\nconst BorderedDark = () => <Avatar src={avatarImgDark} alt=\\\"avatar\\\" border=\\\"dark\\\" />;\",\n      \"title\": \"Bordered - dark\",\n      \"lang\": \"ts\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Size variations\"]), React.createElement(pageData.examples[\"Bordered - light\"]), React.createElement(pageData.examples[\"Bordered - dark\"]));\n};\n\nComponent.displayName = 'ComponentsAvatarReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","avatarImg","avatarImgDark","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/avatar/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport avatarImg from '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./avatarImg.svg';\nimport avatarImgDark from '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./avatarImgDark.svg';\nimport '../../../../node_modules/@patternfly/react-core/src/components/Avatar/examples/./example.css';\nconst pageData = {\n  \"id\": \"Avatar\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/avatar/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Avatar/examples/Avatar.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Avatar\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"alt\",\n          \"type\": \"string\",\n          \"description\": \"Attribute that specifies the alternate text of the image for the Avatar.\",\n          \"required\": true\n        },\n        {\n          \"name\": \"border\",\n          \"type\": \"'light' | 'dark'\",\n          \"description\": \"Border to add\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the Avatar.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"size\",\n          \"type\": \"'sm' | 'md' | 'lg' | 'xl'\",\n          \"description\": \"Size variant of avatar.\"\n        },\n        {\n          \"name\": \"src\",\n          \"type\": \"string\",\n          \"description\": \"Attribute that specifies the URL of the image for the Avatar.\",\n          \"defaultValue\": \"''\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-avatar\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Size variations\",\n    \"Bordered - light\",\n    \"Bordered - dark\"\n  ]\n};\npageData.liveContext = {\n  avatarImg,\n  avatarImgDark\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './avatarImg.svg';\\n\\nconst Basic = () => <Avatar src={avatarImg} alt=\\\"avatar\\\" />;\",\"title\":\"Basic\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Size variations': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './avatarImg.svg';\\n\\nconst SizeVariations = () => (\\n  <React.Fragment>\\n    Small\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"sm\\\" />\\n    <br />\\n    Medium\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"md\\\" />\\n    <br />\\n    Large\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"lg\\\" />\\n    <br />\\n    Extra Large\\n    <br />\\n    <Avatar src={avatarImg} alt=\\\"avatar\\\" size=\\\"xl\\\" />\\n  </React.Fragment>\\n)\",\"title\":\"Size variations\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Bordered - light': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImg from './img_avatar.svg';\\n\\nconst BorderedLight = () => <Avatar src={avatarImg} alt=\\\"avatar\\\" border=\\\"light\\\" />;\",\"title\":\"Bordered - light\",\"lang\":\"ts\"}}>\n      \n    </Example>,\n  'Bordered - dark': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Avatar } from '@patternfly/react-core';\\nimport avatarImgDark from './img_avatar-dark.svg';\\n\\nconst BorderedDark = () => <Avatar src={avatarImgDark} alt=\\\"avatar\\\" border=\\\"dark\\\" />;\",\"title\":\"Bordered - dark\",\"lang\":\"ts\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Size variations\"])}\n    {React.createElement(pageData.examples[\"Bordered - light\"])}\n    {React.createElement(pageData.examples[\"Bordered - dark\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsAvatarReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AACA,OAAOC,SAAP,MAAsB,gGAAtB;AACA,OAAOC,aAAP,MAA0B,oGAA1B;AACA,OAAO,8FAAP;AACA,IAAMC,QAAQ,GAAG;EACf,MAAM,QADS;EAEf,WAAW,YAFI;EAGf,UAAU,OAHK;EAIf,QAAQ,0BAJO;EAKf,cAAc,qIALC;EAMf,kBAAkB,CAChB;IACE,QAAQ,QADV;IAEE,eAAe,EAFjB;IAGE,SAAS,CACP;MACE,QAAQ,KADV;MAEE,QAAQ,QAFV;MAGE,eAAe,0EAHjB;MAIE,YAAY;IAJd,CADO,EAOP;MACE,QAAQ,QADV;MAEE,QAAQ,kBAFV;MAGE,eAAe;IAHjB,CAPO,EAYP;MACE,QAAQ,WADV;MAEE,QAAQ,QAFV;MAGE,eAAe,yCAHjB;MAIE,gBAAgB;IAJlB,CAZO,EAkBP;MACE,QAAQ,MADV;MAEE,QAAQ,2BAFV;MAGE,eAAe;IAHjB,CAlBO,EAuBP;MACE,QAAQ,KADV;MAEE,QAAQ,QAFV;MAGE,eAAe,+DAHjB;MAIE,gBAAgB;IAJlB,CAvBO;EAHX,CADgB,CANH;EA0Cf,aAAa,CACX,aADW,CA1CE;EA6Cf,YAAY,CACV,OADU,EAEV,iBAFU,EAGV,kBAHU,EAIV,iBAJU;AA7CG,CAAjB;AAoDAA,QAAQ,CAACC,WAAT,GAAuB;EACrBH,SAAS,EAATA,SADqB;EAErBC,aAAa,EAAbA;AAFqB,CAAvB;AAIAC,QAAQ,CAACE,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,0LAA9C;MAAyO,SAAQ,OAAjP;MAAyP,QAAO;IAAhQ,GADY;EAAA,CADI;EAKlB,mBAAmB,wBAAAA,KAAK;IAAA,oBACtB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,yjBAA9C;MAAwmB,SAAQ,iBAAhnB;MAAkoB,QAAO;IAAzoB,GADsB;EAAA,CALN;EASlB,oBAAoB,uBAAAA,KAAK;IAAA,oBACvB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,oNAA9C;MAAmQ,SAAQ,kBAA3Q;MAA8R,QAAO;IAArS,GADuB;EAAA,CATP;EAalB,mBAAmB,sBAAAA,KAAK;IAAA,oBACtB,oBAAC,OAAD,eAAaH,QAAb,EAA2BG,KAA3B;MAAuC,QAAO,+NAA9C;MAA8Q,SAAQ,iBAAtR;MAAwS,QAAO;IAA/S,GADsB;EAAA;AAbN,CAApB;;AAmBA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,UAA1B;IAAqC,QAAO,IAA5C;IAAiD,aAAY;EAA7D,cADF,EAIGX,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,OAAlB,CAApB,CAJH,EAKGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,iBAAlB,CAApB,CALH,EAMGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,kBAAlB,CAApB,CANH,EAOGT,KAAK,CAACY,aAAN,CAAoBL,QAAQ,CAACE,QAAT,CAAkB,iBAAlB,CAApB,CAPH,CADgB;AAAA,CAAlB;;AAWAE,SAAS,CAACE,WAAV,GAAwB,2BAAxB;AACAF,SAAS,CAACJ,QAAV,GAAqBA,QAArB;AAEA,eAAeI,SAAf"},"metadata":{},"sourceType":"module"}