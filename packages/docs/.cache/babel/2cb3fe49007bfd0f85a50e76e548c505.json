{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Progress stepper\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/progress-stepper/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/ProgressStepperDemo.md\",\n  \"beta\": true,\n  \"examples\": [\"Basic\"]\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ProgressStepper, ProgressStep, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentStep, setCurrentStep] = React.useState(0);\\n\\n  const steps = [\\n    { title: 'First step', id: 'step1' },\\n    { title: 'Second step', id: 'step2' },\\n    { title: 'Third step', id: 'step3' },\\n    { title: 'Fourth step', id: 'step4' },\\n    { title: 'Fifth step', id: 'step5' }\\n  ];\\n\\n  const onStepForward = event => {\\n    const next = currentStep + 1;\\n    setCurrentStep(next <= 5 ? next : 4);\\n  };\\n\\n  const onStepBack = event => {\\n    const next = currentStep - 1;\\n    setCurrentStep(next > 0 ? next : 0);\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={onStepBack} isDisabled={currentStep === 0}>\\n          Step back\\n        </Button>{' '}\\n        <Button onClick={onStepForward} isDisabled={currentStep === 5}>\\n          Step forward\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {steps[currentStep] && `On ${steps[currentStep].title}.`}\\n          {steps[currentStep - 1] && `${steps[currentStep - 1].title} was successful.`}\\n        </div>\\n        <ProgressStepper>\\n          {steps.map((step, index) => {\\n            let variant = 'pending';\\n            let ariaLabel = 'pending step';\\n            if (index < currentStep) {\\n              variant = 'success';\\n              ariaLabel = 'completed step, step with success';\\n            } else if (index === currentStep) {\\n              variant = 'info';\\n              ariaLabel = 'current step';\\n            }\\n\\n            return (\\n              <ProgressStep\\n                id={index}\\n                titleId={step.id}\\n                key={index}\\n                variant={variant}\\n                isCurrent={index === currentStep}\\n                aria-label={ariaLabel}\\n              >\\n                {step.title}\\n              </ProgressStep>\\n            );\\n          })}\\n        </ProgressStepper>\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"demos\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Demos\"), React.createElement(pageData.examples[\"Basic\"]));\n};\n\nComponent.displayName = 'ComponentsProgressStepperReactDemosDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/progress-stepper/react-demos.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Progress stepper\",\n  \"section\": \"components\",\n  \"source\": \"react-demos\",\n  \"slug\": \"/components/progress-stepper/react-demos\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/demos/ProgressStepperDemo.md\",\n  \"beta\": true,\n  \"examples\": [\n    \"Basic\"\n  ]\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ProgressStepper, ProgressStep, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nProgressStepperDemo = () => {\\n  const [currentStep, setCurrentStep] = React.useState(0);\\n\\n  const steps = [\\n    { title: 'First step', id: 'step1' },\\n    { title: 'Second step', id: 'step2' },\\n    { title: 'Third step', id: 'step3' },\\n    { title: 'Fourth step', id: 'step4' },\\n    { title: 'Fifth step', id: 'step5' }\\n  ];\\n\\n  const onStepForward = event => {\\n    const next = currentStep + 1;\\n    setCurrentStep(next <= 5 ? next : 4);\\n  };\\n\\n  const onStepBack = event => {\\n    const next = currentStep - 1;\\n    setCurrentStep(next > 0 ? next : 0);\\n  };\\n\\n  return (\\n    <Stack>\\n      <StackItem>\\n        <Button onClick={onStepBack} isDisabled={currentStep === 0}>\\n          Step back\\n        </Button>{' '}\\n        <Button onClick={onStepForward} isDisabled={currentStep === 5}>\\n          Step forward\\n        </Button>\\n        <br />\\n        <br />\\n      </StackItem>\\n      <StackItem>\\n        <div className=\\\"pf-screen-reader\\\" aria-live=\\\"polite\\\">\\n          {steps[currentStep] && `On ${steps[currentStep].title}.`}\\n          {steps[currentStep - 1] && `${steps[currentStep - 1].title} was successful.`}\\n        </div>\\n        <ProgressStepper>\\n          {steps.map((step, index) => {\\n            let variant = 'pending';\\n            let ariaLabel = 'pending step';\\n            if (index < currentStep) {\\n              variant = 'success';\\n              ariaLabel = 'completed step, step with success';\\n            } else if (index === currentStep) {\\n              variant = 'info';\\n              ariaLabel = 'current step';\\n            }\\n\\n            return (\\n              <ProgressStep\\n                id={index}\\n                titleId={step.id}\\n                key={index}\\n                variant={variant}\\n                isCurrent={index === currentStep}\\n                aria-label={ariaLabel}\\n              >\\n                {step.title}\\n              </ProgressStep>\\n            );\\n          })}\\n        </ProgressStepper>\\n      </StackItem>\\n    </Stack>\\n  );\\n};\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"demos\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Demos`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsProgressStepperReactDemosDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,OAAzB,EAAkCC,IAAI,IAAIC,mBAA1C,QAAqE,iCAArE;AAEA,IAAMC,QAAQ,GAAG;EACf,MAAM,kBADS;EAEf,WAAW,YAFI;EAGf,UAAU,aAHK;EAIf,QAAQ,0CAJO;EAKf,cAAc,6HALC;EAMf,QAAQ,IANO;EAOf,YAAY,CACV,OADU;AAPG,CAAjB;AAWAA,QAAQ,CAACC,QAAT,GAAoB;EAClB,SAAS,eAAAC,KAAK;IAAA,oBACZ,oBAAC,OAAD,eAAaF,QAAb,EAA2BE,KAA3B;MAAuC,QAAO,+nEAA9C;MAA8qE,SAAQ,OAAtrE;MAA8rE,QAAO;IAArsE,GADY;EAAA;AADI,CAApB;;AAOA,IAAMC,SAAS,GAAG,SAAZA,SAAY;EAAA,oBAChB,oBAAC,KAAD,CAAO,QAAP,qBACE,oBAAC,cAAD;IAAqB,MAAK,OAA1B;IAAkC,QAAO,IAAzC;IAA8C,aAAY;EAA1D,WADF,EAIGR,KAAK,CAACS,aAAN,CAAoBJ,QAAQ,CAACC,QAAT,CAAkB,OAAlB,CAApB,CAJH,CADgB;AAAA,CAAlB;;AAQAE,SAAS,CAACE,WAAV,GAAwB,yCAAxB;AACAF,SAAS,CAACH,QAAV,GAAqBA,QAArB;AAEA,eAAeG,SAAf"},"metadata":{},"sourceType":"module"}