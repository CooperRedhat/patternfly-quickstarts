{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport '../../../../node_modules/@patternfly/react-core/src/components/ToggleGroup/examples/./toggleGroup.css';\nimport { ToggleGroup, ToggleGroupItem, Button, Stack, StackItem } from '@patternfly/react-core';\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\nvar pageData = {\n  \"id\": \"Toggle group\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/toggle-group/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ToggleGroup/examples/ToggleGroup.md\",\n  \"propComponents\": [{\n    \"name\": \"ToggleGroup\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"areAllGroupsDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Disable all toggle group items under this component.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Accessible label for the toggle group\"\n    }, {\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the toggle group\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the toggle group\"\n    }, {\n      \"name\": \"isCompact\",\n      \"type\": \"boolean\",\n      \"description\": \"Modifies the toggle group to include compact styling.\",\n      \"defaultValue\": \"false\"\n    }]\n  }, {\n    \"name\": \"ToggleGroupItem\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"required when icon is used with no supporting text\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"buttonId\",\n      \"type\": \"string\",\n      \"description\": \"Optional id for the button within the toggle group item\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the toggle group item\"\n    }, {\n      \"name\": \"icon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Icon rendered inside the toggle group item\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the toggle group item is disabled\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isSelected\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the toggle group item is selected\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(selected: boolean, event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => void\",\n      \"description\": \"A callback for when the toggle group item selection changes.\",\n      \"defaultValue\": \"() => {}\"\n    }, {\n      \"name\": \"text\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Text rendered inside the toggle group item\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-toggle-group\"],\n  \"examples\": [\"Default with multiple selectable\", \"Default with single selectable\", \"Icons\", \"Text and icons\", \"Compact variant\"]\n};\npageData.liveContext = {\n  ToggleGroup: ToggleGroup,\n  ToggleGroupItem: ToggleGroupItem,\n  Button: Button,\n  Stack: Stack,\n  StackItem: StackItem,\n  UndoIcon: UndoIcon,\n  CopyIcon: CopyIcon,\n  ShareSquareIcon: ShareSquareIcon\n};\npageData.examples = {\n  'Default with multiple selectable': function DefaultWithMultipleSelectable(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nclass DefaultToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        first: false,\\n        second: false,\\n        disableAll: false\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n    this.disableAllClick = () => {\\n      this.setState(prevState => ({ disableAll: !prevState.disableAll }));\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <Stack hasGutter>\\n        <StackItem>\\n          <Button onClick={this.disableAllClick}>\\n            {this.state.disableAll ? \\\"Enable back\\\" : \\\"Disable all\\\"}\\n          </Button>\\n        </StackItem>\\n        <StackItem>\\n          <ToggleGroup areAllGroupsDisabled={this.state.disableAll} aria-label=\\\"Default with multiple selectable\\\">\\n            <ToggleGroupItem text=\\\"Option 1\\\" key={0} buttonId=\\\"first\\\" isSelected={isSelected.first} onChange={this.handleItemClick} />\\n            <ToggleGroupItem text=\\\"Option 2\\\" key={1} buttonId=\\\"second\\\" isSelected={isSelected.second} onChange={this.handleItemClick} />\\n            <ToggleGroupItem text=\\\"Option 3\\\" key={2} isDisabled/>\\n          </ToggleGroup>\\n        </StackItem>\\n      </Stack>\\n    );\\n  }\\n}\",\n      \"title\": \"Default with multiple selectable\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Default with single selectable': function DefaultWithSingleSelectable(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\n\\nclass DefaultAsRadioToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: \\\"\\\"\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState({ isSelected: id });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <ToggleGroup aria-label=\\\"Default with single selectable\\\">\\n        <ToggleGroupItem text=\\\"Option 1\\\" buttonId=\\\"firstRadio\\\" isSelected={isSelected === \\\"firstRadio\\\"} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 2\\\" buttonId=\\\"secondRadio\\\" isSelected={isSelected === \\\"secondRadio\\\"} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 3\\\" buttonId=\\\"thirdRadio\\\" isSelected={isSelected === \\\"thirdRadio\\\"} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\n      \"title\": \"Default with single selectable\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Icons': function Icons(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\\n\\nclass IconToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        third: false,\\n        fourth: false,\\n        fifth: true\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n    return (\\n      <ToggleGroup aria-label=\\\"Icon variant toggle group\\\">\\n        <ToggleGroupItem icon={<CopyIcon />} aria-label=\\\"copy icon button\\\" buttonId=\\\"third\\\" isSelected={isSelected.third} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<UndoIcon />} aria-label=\\\"undo icon button\\\" buttonId=\\\"fourth\\\" isSelected={isSelected.fourth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<ShareSquareIcon />} aria-label=\\\"share square icon button\\\" buttonId=\\\"fifth\\\" isSelected={isSelected.fifth} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\n      \"title\": \"Icons\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Text and icons': function TextAndIcons(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\\n\\nclass TextIconToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        third: false,\\n        fourth: false,\\n        fifth: true\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n    return (\\n      <ToggleGroup aria-label=\\\"Icon variant toggle group\\\">\\n        <ToggleGroupItem icon={<CopyIcon />} text=\\\"Copy\\\" aria-label=\\\"copy icon button\\\" buttonId=\\\"third\\\" isSelected={isSelected.third} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<UndoIcon />} text=\\\"Undo\\\" aria-label=\\\"undo icon button\\\" buttonId=\\\"fourth\\\" isSelected={isSelected.fourth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<ShareSquareIcon />} text=\\\"Share\\\" aria-label=\\\"share square icon button\\\" buttonId=\\\"fifth\\\" isSelected={isSelected.fifth} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\n      \"title\": \"Text and icons\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Compact variant': function CompactVariant(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem, ToggleGroupVariant } from '@patternfly/react-core';\\n\\nclass CompactToggleGroupExample extends React.Component {\\nconstructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        sixth: false,\\n        seventh: false\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <ToggleGroup isCompact aria-label=\\\"Compact variant toggle group\\\">\\n        <ToggleGroupItem text=\\\"Option 1\\\" buttonId=\\\"sixth\\\" isSelected={isSelected.sixth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 2\\\" buttonId=\\\"seventh\\\" isSelected={isSelected.seventh} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 3\\\" isDisabled />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\n      \"title\": \"Compact variant\",\n      \"lang\": \"js\"\n    }));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Default with multiple selectable\"]), React.createElement(pageData.examples[\"Default with single selectable\"]), React.createElement(pageData.examples[\"Icons\"]), React.createElement(pageData.examples[\"Text and icons\"]), React.createElement(pageData.examples[\"Compact variant\"]));\n};\n\nComponent.displayName = 'ComponentsToggleGroupReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","ToggleGroup","ToggleGroupItem","Button","Stack","StackItem","UndoIcon","CopyIcon","ShareSquareIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/toggle-group/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport '../../../../node_modules/@patternfly/react-core/src/components/ToggleGroup/examples/./toggleGroup.css';\nimport { ToggleGroup, ToggleGroupItem, Button, Stack, StackItem } from '@patternfly/react-core';\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\nconst pageData = {\n  \"id\": \"Toggle group\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/toggle-group/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/ToggleGroup/examples/ToggleGroup.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"ToggleGroup\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"areAllGroupsDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Disable all toggle group items under this component.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Accessible label for the toggle group\"\n        },\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the toggle group\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the toggle group\"\n        },\n        {\n          \"name\": \"isCompact\",\n          \"type\": \"boolean\",\n          \"description\": \"Modifies the toggle group to include compact styling.\",\n          \"defaultValue\": \"false\"\n        }\n      ]\n    },\n    {\n      \"name\": \"ToggleGroupItem\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"required when icon is used with no supporting text\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"buttonId\",\n          \"type\": \"string\",\n          \"description\": \"Optional id for the button within the toggle group item\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the toggle group item\"\n        },\n        {\n          \"name\": \"icon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Icon rendered inside the toggle group item\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the toggle group item is disabled\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isSelected\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the toggle group item is selected\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(selected: boolean, event: React.MouseEvent<any> | React.KeyboardEvent | MouseEvent) => void\",\n          \"description\": \"A callback for when the toggle group item selection changes.\",\n          \"defaultValue\": \"() => {}\"\n        },\n        {\n          \"name\": \"text\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Text rendered inside the toggle group item\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-toggle-group\"\n  ],\n  \"examples\": [\n    \"Default with multiple selectable\",\n    \"Default with single selectable\",\n    \"Icons\",\n    \"Text and icons\",\n    \"Compact variant\"\n  ]\n};\npageData.liveContext = {\n  ToggleGroup,\n  ToggleGroupItem,\n  Button,\n  Stack,\n  StackItem,\n  UndoIcon,\n  CopyIcon,\n  ShareSquareIcon\n};\npageData.examples = {\n  'Default with multiple selectable': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem, Button, Stack, StackItem } from '@patternfly/react-core';\\n\\nclass DefaultToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        first: false,\\n        second: false,\\n        disableAll: false\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n    this.disableAllClick = () => {\\n      this.setState(prevState => ({ disableAll: !prevState.disableAll }));\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <Stack hasGutter>\\n        <StackItem>\\n          <Button onClick={this.disableAllClick}>\\n            {this.state.disableAll ? \\\"Enable back\\\" : \\\"Disable all\\\"}\\n          </Button>\\n        </StackItem>\\n        <StackItem>\\n          <ToggleGroup areAllGroupsDisabled={this.state.disableAll} aria-label=\\\"Default with multiple selectable\\\">\\n            <ToggleGroupItem text=\\\"Option 1\\\" key={0} buttonId=\\\"first\\\" isSelected={isSelected.first} onChange={this.handleItemClick} />\\n            <ToggleGroupItem text=\\\"Option 2\\\" key={1} buttonId=\\\"second\\\" isSelected={isSelected.second} onChange={this.handleItemClick} />\\n            <ToggleGroupItem text=\\\"Option 3\\\" key={2} isDisabled/>\\n          </ToggleGroup>\\n        </StackItem>\\n      </Stack>\\n    );\\n  }\\n}\",\"title\":\"Default with multiple selectable\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Default with single selectable': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\n\\nclass DefaultAsRadioToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: \\\"\\\"\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState({ isSelected: id });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <ToggleGroup aria-label=\\\"Default with single selectable\\\">\\n        <ToggleGroupItem text=\\\"Option 1\\\" buttonId=\\\"firstRadio\\\" isSelected={isSelected === \\\"firstRadio\\\"} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 2\\\" buttonId=\\\"secondRadio\\\" isSelected={isSelected === \\\"secondRadio\\\"} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 3\\\" buttonId=\\\"thirdRadio\\\" isSelected={isSelected === \\\"thirdRadio\\\"} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\"title\":\"Default with single selectable\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Icons': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\\n\\nclass IconToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        third: false,\\n        fourth: false,\\n        fifth: true\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n    return (\\n      <ToggleGroup aria-label=\\\"Icon variant toggle group\\\">\\n        <ToggleGroupItem icon={<CopyIcon />} aria-label=\\\"copy icon button\\\" buttonId=\\\"third\\\" isSelected={isSelected.third} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<UndoIcon />} aria-label=\\\"undo icon button\\\" buttonId=\\\"fourth\\\" isSelected={isSelected.fourth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<ShareSquareIcon />} aria-label=\\\"share square icon button\\\" buttonId=\\\"fifth\\\" isSelected={isSelected.fifth} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\"title\":\"Icons\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Text and icons': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem } from '@patternfly/react-core';\\nimport UndoIcon from '@patternfly/react-icons/dist/esm/icons/undo-icon';\\nimport CopyIcon from '@patternfly/react-icons/dist/esm/icons/copy-icon';\\nimport ShareSquareIcon from '@patternfly/react-icons/dist/esm/icons/share-square-icon';\\n\\nclass TextIconToggleGroupExample extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        third: false,\\n        fourth: false,\\n        fifth: true\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n    return (\\n      <ToggleGroup aria-label=\\\"Icon variant toggle group\\\">\\n        <ToggleGroupItem icon={<CopyIcon />} text=\\\"Copy\\\" aria-label=\\\"copy icon button\\\" buttonId=\\\"third\\\" isSelected={isSelected.third} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<UndoIcon />} text=\\\"Undo\\\" aria-label=\\\"undo icon button\\\" buttonId=\\\"fourth\\\" isSelected={isSelected.fourth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem icon={<ShareSquareIcon />} text=\\\"Share\\\" aria-label=\\\"share square icon button\\\" buttonId=\\\"fifth\\\" isSelected={isSelected.fifth} onChange={this.handleItemClick} />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\"title\":\"Text and icons\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Compact variant': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { ToggleGroup, ToggleGroupItem, ToggleGroupVariant } from '@patternfly/react-core';\\n\\nclass CompactToggleGroupExample extends React.Component {\\nconstructor(props) {\\n    super(props);\\n    this.state = {\\n      isSelected: {\\n        sixth: false,\\n        seventh: false\\n      }\\n    };\\n    this.handleItemClick = (isSelected, event) => {\\n      const id = event.currentTarget.id;\\n      this.setState(prevState => {\\n        prevState.isSelected[id] = isSelected;\\n        return {\\n          isSelected: prevState.isSelected\\n        };\\n      });\\n    };\\n  }\\n\\n  render() {\\n    const { isSelected } = this.state;\\n\\n    return (\\n      <ToggleGroup isCompact aria-label=\\\"Compact variant toggle group\\\">\\n        <ToggleGroupItem text=\\\"Option 1\\\" buttonId=\\\"sixth\\\" isSelected={isSelected.sixth} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 2\\\" buttonId=\\\"seventh\\\" isSelected={isSelected.seventh} onChange={this.handleItemClick} />\\n        <ToggleGroupItem text=\\\"Option 3\\\" isDisabled />\\n      </ToggleGroup>\\n    );\\n  }\\n}\",\"title\":\"Compact variant\",\"lang\":\"js\"}}>\n      \n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Default with multiple selectable\"])}\n    {React.createElement(pageData.examples[\"Default with single selectable\"])}\n    {React.createElement(pageData.examples[\"Icons\"])}\n    {React.createElement(pageData.examples[\"Text and icons\"])}\n    {React.createElement(pageData.examples[\"Compact variant\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsToggleGroupReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}