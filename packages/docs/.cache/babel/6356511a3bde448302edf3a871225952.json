{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Text area\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/text-area/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/TextArea/examples/TextArea.md\",\n  \"propComponents\": [{\n    \"name\": \"TextArea\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"aria-label\",\n      \"type\": \"string\",\n      \"description\": \"Custom flag to show that the TextArea requires an associated id or aria-label.\"\n    }, {\n      \"name\": \"autoResize\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to modify height based on contents.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the TextArea.\"\n    }, {\n      \"name\": \"innerRef\",\n      \"type\": \"React.RefObject<any>\",\n      \"description\": \"A reference object to attach to the textarea.\"\n    }, {\n      \"name\": \"isDisabled\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to show if the TextArea is disabled.\"\n    }, {\n      \"name\": \"isIconSprite\",\n      \"type\": \"boolean\",\n      \"description\": \"Use the external file instead of a data URI\"\n    }, {\n      \"name\": \"isReadOnly\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to show if the TextArea is read only.\"\n    }, {\n      \"name\": \"isRequired\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag to show if the TextArea is required.\"\n    }, {\n      \"name\": \"onChange\",\n      \"type\": \"(value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void\",\n      \"description\": \"A callback for when the TextArea value changes.\"\n    }, {\n      \"name\": \"resizeOrientation\",\n      \"type\": \"'horizontal' | 'vertical' | 'both'\",\n      \"description\": \"Sets the orientation to limit the resize to\"\n    }, {\n      \"name\": \"validated\",\n      \"type\": \"'success' | 'warning' | 'error' | 'default'\",\n      \"description\": \"Value to indicate if the textarea is modified to show that validation state.\\nIf set to success, textarea will be modified to indicate valid state.\\nIf set to error, textarea will be modified to indicate error state.\"\n    }, {\n      \"name\": \"value\",\n      \"type\": \"string | number\",\n      \"description\": \"Value of the TextArea.\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-form-control\"],\n  \"examples\": [\"Basic\", \"Invalid\", \"Validated\", \"Vertically resizable text area\", \"Horizontally resizable text area\", \"Uncontrolled\", \"Disabled\", \"Auto resizing\", \"Icon sprite variants\"]\n};\npageData.examples = {\n  'Basic': function Basic(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass SimpleTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} aria-label=\\\"text area example\\\" />;\\n  }\\n}\",\n      \"title\": \"Basic\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Invalid': function Invalid(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass InvalidTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n    \\n    this.handleInvalidTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return (\\n      <TextArea\\n        value={value}\\n        onChange={this.handleInvalidTextAreaChange}\\n        isRequired\\n        validated={'error'}\\n        aria-label=\\\"invalid text area example\\\"\\n      />\\n    );\\n  }\\n}\",\n      \"title\": \"Invalid\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Validated': function Validated(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Form, FormGroup, TextArea } from '@patternfly/react-core';\\n\\nclass InvalidTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      invalidText: 'You must have something to say',\\n      validated: 'default',\\n      helperText: 'Share your thoughts.'\\n    };\\n    \\n    this.simulateNetworkCall = callback => {\\n      setTimeout(callback, 2000);\\n    }\\n    \\n    this.handleTextAreaChange = value => {\\n\\n      this.setState({\\n        value,\\n        validated: 'default',\\n        helperText: 'Validating...',\\n      },\\n        this.simulateNetworkCall(() => {\\n          if (value && value.length > 0) {\\n            if (value.length >= 10) {\\n              this.setState({validated: 'success', helperText: 'Thanks for your comments!'});\\n            } else {\\n              this.setState({validated: 'error', invalidText: 'Your being too brief, please enter at least 10 characters.'});\\n            }\\n          }\\n          else {\\n            this.setState({validated: 'warning', helperText: 'You must have something to say'});\\n          }\\n        })\\n      );\\n    };\\n  }\\n\\n  render() {\\n    const { value, validated, helperText, invalidText } = this.state;\\n\\n    return (\\n      <Form>\\n        <FormGroup\\n          label=\\\"Comments:\\\"\\n          type=\\\"string\\\"\\n          helperText={helperText}\\n          helperTextInvalid={invalidText}\\n          fieldId=\\\"selection\\\"\\n          validated={validated}\\n        >\\n          <TextArea\\n            value={value}\\n            onChange={this.handleTextAreaChange}\\n            isRequired\\n            validated={validated}\\n            aria-label=\\\"invalid text area example\\\"\\n          />\\n        </FormGroup>\\n      </Form>\\n    );\\n  }\\n}\",\n      \"title\": \"Validated\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Vertically resizable text area': function VerticallyResizableTextArea(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass VerticalResizeTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} resizeOrientation='vertical' aria-label=\\\"text vertical resize example\\\" />;\\n  }\\n}\",\n      \"title\": \"Vertically resizable text area\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Horizontally resizable text area': function HorizontallyResizableTextArea(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass HorizontalResizeTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} resizeOrientation='horizontal' aria-label=\\\"text horizontal resize example\\\" />;\\n  }\\n}\",\n      \"title\": \"Horizontally resizable text area\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Uncontrolled': function Uncontrolled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst Uncontrolled = () => <TextArea defaultValue=\\\"default value\\\" aria-label=\\\"uncontrolled text area example\\\" />\",\n      \"title\": \"Uncontrolled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Disabled': function Disabled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst Disabled = () => <TextArea aria-label=\\\"disabled text area example\\\" isDisabled />\",\n      \"title\": \"Disabled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Auto resizing': function AutoResizing(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst AutoResizing = () => <TextArea aria-label=\\\"auto resizing text area example\\\" autoResize />\",\n      \"title\": \"Auto resizing\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Icon sprite variants': function IconSpriteVariants(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nIconSpriteTextArea = () => {\\n  const [success, setSuccess] = React.useState('');\\n  const [warning, setWarning] = React.useState('');\\n  const [error, setError] = React.useState('');\\n\\n  return (\\n    <>\\n      <TextArea\\n        validated={ValidatedOptions.success}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setSuccess(value)}\\n        aria-label=\\\"success icon sprite text area example\\\"\\n      />\\n      <br />\\n      <br />\\n      <TextArea\\n        validated={ValidatedOptions.warning}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setWarning(value)}\\n        aria-label=\\\"warning icon sprite text input example\\\"\\n      />\\n      <br />\\n      <br />\\n      <TextArea\\n        validated={ValidatedOptions.error}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setError(value)}\\n        aria-label=\\\"error icon sprite text area example\\\"\\n      />\\n    </>\\n  );\\n};\",\n      \"title\": \"Icon sprite variants\",\n      \"lang\": \"js\",\n      \"isBeta\": true\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, /*#__PURE__*/React.createElement(\"strong\", null, \"Note:\"), \" The icons for the success, invalid, calendar, etc. variations in form control elements are applied as background images to the form element. By default, the image URLs for these icons are data URIs. However, there may be cases where data URIs are not ideal, such as in an application with a content security policy that disallows data URIs for security reasons. The \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"isIconSprite\"), \" variation changes the icon source to an external SVG file that serves as a sprite for all of the supported icons.\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Basic\"]), React.createElement(pageData.examples[\"Invalid\"]), React.createElement(pageData.examples[\"Validated\"]), React.createElement(pageData.examples[\"Vertically resizable text area\"]), React.createElement(pageData.examples[\"Horizontally resizable text area\"]), React.createElement(pageData.examples[\"Uncontrolled\"]), React.createElement(pageData.examples[\"Disabled\"]), React.createElement(pageData.examples[\"Auto resizing\"]), React.createElement(pageData.examples[\"Icon sprite variants\"]));\n};\n\nComponent.displayName = 'ComponentsTextAreaReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/text-area/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Text area\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/text-area/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/TextArea/examples/TextArea.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"TextArea\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"aria-label\",\n          \"type\": \"string\",\n          \"description\": \"Custom flag to show that the TextArea requires an associated id or aria-label.\"\n        },\n        {\n          \"name\": \"autoResize\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to modify height based on contents.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the TextArea.\"\n        },\n        {\n          \"name\": \"innerRef\",\n          \"type\": \"React.RefObject<any>\",\n          \"description\": \"A reference object to attach to the textarea.\"\n        },\n        {\n          \"name\": \"isDisabled\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to show if the TextArea is disabled.\"\n        },\n        {\n          \"name\": \"isIconSprite\",\n          \"type\": \"boolean\",\n          \"description\": \"Use the external file instead of a data URI\"\n        },\n        {\n          \"name\": \"isReadOnly\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to show if the TextArea is read only.\"\n        },\n        {\n          \"name\": \"isRequired\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag to show if the TextArea is required.\"\n        },\n        {\n          \"name\": \"onChange\",\n          \"type\": \"(value: string, event: React.ChangeEvent<HTMLTextAreaElement>) => void\",\n          \"description\": \"A callback for when the TextArea value changes.\"\n        },\n        {\n          \"name\": \"resizeOrientation\",\n          \"type\": \"'horizontal' | 'vertical' | 'both'\",\n          \"description\": \"Sets the orientation to limit the resize to\"\n        },\n        {\n          \"name\": \"validated\",\n          \"type\": \"'success' | 'warning' | 'error' | 'default'\",\n          \"description\": \"Value to indicate if the textarea is modified to show that validation state.\\nIf set to success, textarea will be modified to indicate valid state.\\nIf set to error, textarea will be modified to indicate error state.\"\n        },\n        {\n          \"name\": \"value\",\n          \"type\": \"string | number\",\n          \"description\": \"Value of the TextArea.\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-form-control\"\n  ],\n  \"examples\": [\n    \"Basic\",\n    \"Invalid\",\n    \"Validated\",\n    \"Vertically resizable text area\",\n    \"Horizontally resizable text area\",\n    \"Uncontrolled\",\n    \"Disabled\",\n    \"Auto resizing\",\n    \"Icon sprite variants\"\n  ]\n};\npageData.examples = {\n  'Basic': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass SimpleTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} aria-label=\\\"text area example\\\" />;\\n  }\\n}\",\"title\":\"Basic\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Invalid': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass InvalidTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n    \\n    this.handleInvalidTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return (\\n      <TextArea\\n        value={value}\\n        onChange={this.handleInvalidTextAreaChange}\\n        isRequired\\n        validated={'error'}\\n        aria-label=\\\"invalid text area example\\\"\\n      />\\n    );\\n  }\\n}\",\"title\":\"Invalid\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Validated': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Form, FormGroup, TextArea } from '@patternfly/react-core';\\n\\nclass InvalidTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: '',\\n      invalidText: 'You must have something to say',\\n      validated: 'default',\\n      helperText: 'Share your thoughts.'\\n    };\\n    \\n    this.simulateNetworkCall = callback => {\\n      setTimeout(callback, 2000);\\n    }\\n    \\n    this.handleTextAreaChange = value => {\\n\\n      this.setState({\\n        value,\\n        validated: 'default',\\n        helperText: 'Validating...',\\n      },\\n        this.simulateNetworkCall(() => {\\n          if (value && value.length > 0) {\\n            if (value.length >= 10) {\\n              this.setState({validated: 'success', helperText: 'Thanks for your comments!'});\\n            } else {\\n              this.setState({validated: 'error', invalidText: 'Your being too brief, please enter at least 10 characters.'});\\n            }\\n          }\\n          else {\\n            this.setState({validated: 'warning', helperText: 'You must have something to say'});\\n          }\\n        })\\n      );\\n    };\\n  }\\n\\n  render() {\\n    const { value, validated, helperText, invalidText } = this.state;\\n\\n    return (\\n      <Form>\\n        <FormGroup\\n          label=\\\"Comments:\\\"\\n          type=\\\"string\\\"\\n          helperText={helperText}\\n          helperTextInvalid={invalidText}\\n          fieldId=\\\"selection\\\"\\n          validated={validated}\\n        >\\n          <TextArea\\n            value={value}\\n            onChange={this.handleTextAreaChange}\\n            isRequired\\n            validated={validated}\\n            aria-label=\\\"invalid text area example\\\"\\n          />\\n        </FormGroup>\\n      </Form>\\n    );\\n  }\\n}\",\"title\":\"Validated\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Vertically resizable text area': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass VerticalResizeTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} resizeOrientation='vertical' aria-label=\\\"text vertical resize example\\\" />;\\n  }\\n}\",\"title\":\"Vertically resizable text area\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Horizontally resizable text area': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nclass HorizontalResizeTextArea extends React.Component {\\n  constructor(props) {\\n    super(props);\\n    this.state = {\\n      value: ''\\n    };\\n\\n    this.handleTextAreaChange = value => {\\n      this.setState({ value });\\n    };\\n  }\\n\\n  render() {\\n    const { value } = this.state;\\n\\n    return <TextArea value={value} onChange={this.handleTextAreaChange} resizeOrientation='horizontal' aria-label=\\\"text horizontal resize example\\\" />;\\n  }\\n}\",\"title\":\"Horizontally resizable text area\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Uncontrolled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst Uncontrolled = () => <TextArea defaultValue=\\\"default value\\\" aria-label=\\\"uncontrolled text area example\\\" />\",\"title\":\"Uncontrolled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Disabled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst Disabled = () => <TextArea aria-label=\\\"disabled text area example\\\" isDisabled />\",\"title\":\"Disabled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Auto resizing': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nconst AutoResizing = () => <TextArea aria-label=\\\"auto resizing text area example\\\" autoResize />\",\"title\":\"Auto resizing\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Icon sprite variants': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { TextArea } from '@patternfly/react-core';\\n\\nIconSpriteTextArea = () => {\\n  const [success, setSuccess] = React.useState('');\\n  const [warning, setWarning] = React.useState('');\\n  const [error, setError] = React.useState('');\\n\\n  return (\\n    <>\\n      <TextArea\\n        validated={ValidatedOptions.success}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setSuccess(value)}\\n        aria-label=\\\"success icon sprite text area example\\\"\\n      />\\n      <br />\\n      <br />\\n      <TextArea\\n        validated={ValidatedOptions.warning}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setWarning(value)}\\n        aria-label=\\\"warning icon sprite text input example\\\"\\n      />\\n      <br />\\n      <br />\\n      <TextArea\\n        validated={ValidatedOptions.error}\\n        isIconSprite\\n        type=\\\"text\\\"\\n        onChange={value => setError(value)}\\n        aria-label=\\\"error icon sprite text area example\\\"\\n      />\\n    </>\\n  );\\n};\",\"title\":\"Icon sprite variants\",\"lang\":\"js\",\"isBeta\":true}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        \n        <strong>\n          {`Note:`}\n        </strong>\n        {` The icons for the success, invalid, calendar, etc. variations in form control elements are applied as background images to the form element. By default, the image URLs for these icons are data URIs. However, there may be cases where data URIs are not ideal, such as in an application with a content security policy that disallows data URIs for security reasons. The `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`isIconSprite`}\n        </code>\n        {` variation changes the icon source to an external SVG file that serves as a sprite for all of the supported icons.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Basic\"])}\n    {React.createElement(pageData.examples[\"Invalid\"])}\n    {React.createElement(pageData.examples[\"Validated\"])}\n    {React.createElement(pageData.examples[\"Vertically resizable text area\"])}\n    {React.createElement(pageData.examples[\"Horizontally resizable text area\"])}\n    {React.createElement(pageData.examples[\"Uncontrolled\"])}\n    {React.createElement(pageData.examples[\"Disabled\"])}\n    {React.createElement(pageData.examples[\"Auto resizing\"])}\n    {React.createElement(pageData.examples[\"Icon sprite variants\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsTextAreaReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}