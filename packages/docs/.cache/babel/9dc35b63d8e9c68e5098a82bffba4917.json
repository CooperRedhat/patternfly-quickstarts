{"ast":null,"code":"function _extends() { _extends = Object.assign ? Object.assign.bind() : function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { Link } from '@reach/router';\nvar pageData = {\n  \"id\": \"Label\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/label/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Label/examples/Label.md\",\n  \"propComponents\": [{\n    \"name\": \"Label\",\n    \"description\": \"\",\n    \"props\": [{\n      \"name\": \"children\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Content rendered inside the label.\"\n    }, {\n      \"name\": \"className\",\n      \"type\": \"string\",\n      \"description\": \"Additional classes added to the label.\",\n      \"defaultValue\": \"''\"\n    }, {\n      \"name\": \"closeBtn\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Node for custom close button.\"\n    }, {\n      \"name\": \"closeBtnAriaLabel\",\n      \"type\": \"string\",\n      \"description\": \"Aria label for close button\"\n    }, {\n      \"name\": \"closeBtnProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional properties for the default close button.\"\n    }, {\n      \"name\": \"color\",\n      \"type\": \"'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey'\",\n      \"description\": \"Color of the label.\",\n      \"defaultValue\": \"'grey'\"\n    }, {\n      \"name\": \"editableProps\",\n      \"type\": \"any\",\n      \"description\": \"Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control.\",\n      \"beta\": true\n    }, {\n      \"name\": \"href\",\n      \"type\": \"string\",\n      \"description\": \"Href for a label that is a link. If present, the label will change to an anchor element.\"\n    }, {\n      \"name\": \"icon\",\n      \"type\": \"React.ReactNode\",\n      \"description\": \"Icon added to the left of the label text.\"\n    }, {\n      \"name\": \"isCompact\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating the label is compact.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"isEditable\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating the label is editable.\",\n      \"defaultValue\": \"false\",\n      \"beta\": true\n    }, {\n      \"name\": \"isOverflowLabel\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating if the label is an overflow label\"\n    }, {\n      \"name\": \"isTruncated\",\n      \"type\": \"boolean\",\n      \"description\": \"Flag indicating the label text should be truncated.\",\n      \"defaultValue\": \"false\"\n    }, {\n      \"name\": \"onClose\",\n      \"type\": \"(event: React.MouseEvent) => void\",\n      \"description\": \"Close click callback for removable labels. If present, label will have a close button.\"\n    }, {\n      \"name\": \"onEditCancel\",\n      \"type\": \"(previousText: string) => void\",\n      \"description\": \"Callback when an editable label cancels an edit.\",\n      \"beta\": true\n    }, {\n      \"name\": \"onEditComplete\",\n      \"type\": \"(newText: string) => void\",\n      \"description\": \"Callback when an editable label completes an edit.\",\n      \"beta\": true\n    }, {\n      \"name\": \"render\",\n      \"type\": \"({\\n  className,\\n  content,\\n  componentRef\\n}: {\\n  className: string;\\n  content: React.ReactNode;\\n  componentRef: any;\\n}) => React.ReactNode\",\n      \"description\": \"Forwards the label content and className to rendered function.  Use this prop for react router support.\"\n    }, {\n      \"name\": \"tooltipPosition\",\n      \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n      \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n    }, {\n      \"name\": \"variant\",\n      \"type\": \"'outline' | 'filled'\",\n      \"description\": \"Variant of the label.\",\n      \"defaultValue\": \"'filled'\"\n    }]\n  }],\n  \"cssPrefix\": [\"pf-c-label\"],\n  \"examples\": [\"Filled\", \"Outline\", \"Compact\", \"Router link\", \"Editable\"]\n};\npageData.liveContext = {\n  InfoCircleIcon: InfoCircleIcon,\n  Link: Link\n};\npageData.examples = {\n  'Filled': function Filled(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Filled = () => (\\n  <React.Fragment>\\n    <Label>Grey</Label> <Label icon={<InfoCircleIcon />}>Grey icon</Label>{' '}\\n    <Label onClose={Function.prototype}>Grey removable</Label>{' '}\\n    <Label icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Grey icon removable\\n    </Label>{' '}\\n    <Label href=\\\"#filled\\\">Grey link</Label>{' '}\\n    <Label href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Grey link removable\\n    </Label>\\n    <Label icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Grey label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"blue\\\">Blue</Label>{' '}\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />}>\\n      Blue icon\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" onClose={Function.prototype}>\\n      Blue removable\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Blue icon removable\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" href=\\\"#filled\\\">\\n      Blue link\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Blue link removable\\n    </Label>\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Blue label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"green\\\">Green</Label>{' '}\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />}>\\n      Green icon\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" onClose={Function.prototype}>\\n      Green removable\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Green icon removable\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" href=\\\"#filled\\\">\\n      Green link\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Green link removable\\n    </Label>\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Green label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"orange\\\">Orange</Label>{' '}\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />}>\\n      Orange icon\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" onClose={Function.prototype}>\\n      Orange removable\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Orange icon removable\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" href=\\\"#filled\\\">\\n      Orange link\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Orange link removable\\n    </Label>\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Orange label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"red\\\">Red</Label>{' '}\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />}>\\n      Red icon\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" onClose={Function.prototype}>\\n      Red removable\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Red icon removable\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" href=\\\"#filled\\\">\\n      Red link\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Red link removable\\n    </Label>\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Red label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"purple\\\">Purple</Label>{' '}\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />}>\\n      Purple icon\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" onClose={Function.prototype}>\\n      Purple removable\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Purple icon removable\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" href=\\\"#filled\\\">\\n      Purple link\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Purple link removable\\n    </Label>\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Purple label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"cyan\\\">Cyan</Label>{' '}\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />}>\\n      Cyan icon\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" onClose={Function.prototype}>\\n      Cyan removable\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Cyan icon removable\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" href=\\\"#filled\\\">\\n      Cyan link\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Cyan link removable\\n    </Label>\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Cyan label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\n      \"title\": \"Filled\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Outline': function Outline(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Outline = () => (\\n  <React.Fragment>\\n    <Label variant=\\\"outline\\\">Grey</Label>{' '}\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />}>\\n      Grey icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" onClose={Function.prototype}>\\n      Grey removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Grey icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" href=\\\"#outline\\\">\\n      Grey link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Grey link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Grey label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\">\\n      Blue\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />}>\\n      Blue icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" onClose={Function.prototype}>\\n      Blue removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Blue icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" href=\\\"#outline\\\">\\n      Blue link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Blue link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Blue label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\">\\n      Green\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />}>\\n      Green icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" onClose={Function.prototype}>\\n      Green removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Green icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" href=\\\"#outline\\\">\\n      Green link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Green link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Green label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\">\\n      Orange\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />}>\\n      Orange icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" onClose={Function.prototype}>\\n      Orange removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Orange icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" href=\\\"#outline\\\">\\n      Orange link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Orange link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Orange label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\">\\n      Red\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />}>\\n      Red icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" onClose={Function.prototype}>\\n      Red removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Red icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" href=\\\"#outline\\\">\\n      Red link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Red link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Red label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\">\\n      Purple\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />}>\\n      Purple icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" onClose={Function.prototype}>\\n      Purple removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Purple icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" href=\\\"#outline\\\">\\n      Purple link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Purple link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Purple label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\">\\n      Cyan\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />}>\\n      Cyan icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" onClose={Function.prototype}>\\n      Cyan removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Cyan icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" href=\\\"#outline\\\">\\n      Cyan link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Cyan link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Cyan label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\n      \"title\": \"Outline\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Compact': function Compact(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Compact = () => (\\n  <React.Fragment>\\n    <Label isCompact>Grey</Label>{' '}\\n    <Label isCompact icon={<InfoCircleIcon />}>\\n      Compact icon\\n    </Label>{' '}\\n    <Label isCompact onClose={Function.prototype}>\\n      Compact removable\\n    </Label>{' '}\\n    <Label isCompact icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Compact icon removable\\n    </Label>{' '}\\n    <Label isCompact href=\\\"#outline\\\">\\n      Compact link\\n    </Label>{' '}\\n    <Label isCompact href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Compact link removable\\n    </Label>\\n    <Label isCompact icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Compact label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\n      \"title\": \"Compact\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Router link': function RouterLink(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\nimport { Link } from '@reach/router';\\n\\nconst RouterLink = () => (\\n  <Label\\n    color=\\\"blue\\\"\\n    icon={<InfoCircleIcon />}\\n    onClose={Function.prototype}\\n    isTruncated\\n    render={({ className, content, componentRef }) => (\\n      <Link to=\\\"/\\\" className={className} innerRef={componentRef}>\\n        {content}\\n      </Link>\\n    )}\\n  >\\n    Blue label router link with icon that overflows\\n  </Label>\\n)\",\n      \"title\": \"Router link\",\n      \"lang\": \"js\"\n    }));\n  },\n  'Editable': function Editable(props) {\n    return /*#__PURE__*/React.createElement(Example, _extends({}, pageData, props, {\n      \"code\": \"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\n\\nexport const LabelEditable: React.FunctionComponent = () => {\\n  const [labelText, setLabelText] = React.useState('Editable label');\\n  const [compactLabelText, setCompactLabelText] = React.useState('Compact editable label');\\n\\n  const onEditCancel = (prevText: string) => {\\n    setLabelText(prevText);\\n  };\\n\\n  const onEditComplete = (text: string) => {\\n    setLabelText(text);\\n  };\\n\\n  const onCompactEditCancel = (prevText: string) => {\\n    setCompactLabelText(prevText);\\n  };\\n\\n  const onCompactEditComplete = (text: string) => {\\n    setCompactLabelText(text);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Label\\n        color=\\\"blue\\\"\\n        onClose={() => {}}\\n        closeBtnAriaLabel=\\\"Custom close button for editable label\\\"\\n        onEditCancel={onEditCancel}\\n        onEditComplete={onEditComplete}\\n        isEditable\\n        editableProps={{\\n          'aria-label': 'Editable text',\\n          id: 'editable-label'\\n        }}\\n      >\\n        {labelText}\\n      </Label>\\n      <Label\\n        color=\\\"grey\\\"\\n        isCompact\\n        onClose={() => {}}\\n        closeBtnAriaLabel=\\\"Custom close button for compact editable label\\\"\\n        onEditCancel={onCompactEditCancel}\\n        onEditComplete={onCompactEditComplete}\\n        isEditable\\n        editableProps={{\\n          'aria-label': 'Compact editable text',\\n          id: 'compact-editable-label'\\n        }}\\n      >\\n        {compactLabelText}\\n      </Label>\\n    </React.Fragment>\\n  );\\n};\\n\",\n      \"title\": \"Editable\",\n      \"lang\": \"js\",\n      \"isBeta\": true\n    }), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"Click or press either enter or space to begin editing a label. After editing, click outside the label or press enter again to complete the edit. To cancel an edit, press escape.\"), /*#__PURE__*/React.createElement(\"p\", {\n      \"className\": \"ws-p\"\n    }, \"You can also customize any Label's close button aria-label as this example shows with \", /*#__PURE__*/React.createElement(\"code\", {\n      \"className\": \"ws-code\"\n    }, \"closeBtnAriaLabel\"), \".\"));\n  }\n};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(AutoLinkHeader, {\n    \"id\": \"examples\",\n    \"size\": \"h2\",\n    \"className\": \"ws-title ws-h2\"\n  }, \"Examples\"), React.createElement(pageData.examples[\"Filled\"]), React.createElement(pageData.examples[\"Outline\"]), React.createElement(pageData.examples[\"Compact\"]), React.createElement(pageData.examples[\"Router link\"]), React.createElement(pageData.examples[\"Editable\"]));\n};\n\nComponent.displayName = 'ComponentsLabelReactDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","InfoCircleIcon","pageData","liveContext","examples","props","Component","createElement","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/label/react.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\nimport { Link } from '@reach/router';\nconst pageData = {\n  \"id\": \"Label\",\n  \"section\": \"components\",\n  \"source\": \"react\",\n  \"slug\": \"/components/label/react\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-react/blob/main/packages/docs/packages/react-core/src/components/Label/examples/Label.md\",\n  \"propComponents\": [\n    {\n      \"name\": \"Label\",\n      \"description\": \"\",\n      \"props\": [\n        {\n          \"name\": \"children\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Content rendered inside the label.\"\n        },\n        {\n          \"name\": \"className\",\n          \"type\": \"string\",\n          \"description\": \"Additional classes added to the label.\",\n          \"defaultValue\": \"''\"\n        },\n        {\n          \"name\": \"closeBtn\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Node for custom close button.\"\n        },\n        {\n          \"name\": \"closeBtnAriaLabel\",\n          \"type\": \"string\",\n          \"description\": \"Aria label for close button\"\n        },\n        {\n          \"name\": \"closeBtnProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional properties for the default close button.\"\n        },\n        {\n          \"name\": \"color\",\n          \"type\": \"'blue' | 'cyan' | 'green' | 'orange' | 'purple' | 'red' | 'grey'\",\n          \"description\": \"Color of the label.\",\n          \"defaultValue\": \"'grey'\"\n        },\n        {\n          \"name\": \"editableProps\",\n          \"type\": \"any\",\n          \"description\": \"Additional props passed to the editable label text div. Optionally passing onInput and onBlur callbacks will allow finer custom text input control.\",\n          \"beta\": true\n        },\n        {\n          \"name\": \"href\",\n          \"type\": \"string\",\n          \"description\": \"Href for a label that is a link. If present, the label will change to an anchor element.\"\n        },\n        {\n          \"name\": \"icon\",\n          \"type\": \"React.ReactNode\",\n          \"description\": \"Icon added to the left of the label text.\"\n        },\n        {\n          \"name\": \"isCompact\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating the label is compact.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"isEditable\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating the label is editable.\",\n          \"defaultValue\": \"false\",\n          \"beta\": true\n        },\n        {\n          \"name\": \"isOverflowLabel\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating if the label is an overflow label\"\n        },\n        {\n          \"name\": \"isTruncated\",\n          \"type\": \"boolean\",\n          \"description\": \"Flag indicating the label text should be truncated.\",\n          \"defaultValue\": \"false\"\n        },\n        {\n          \"name\": \"onClose\",\n          \"type\": \"(event: React.MouseEvent) => void\",\n          \"description\": \"Close click callback for removable labels. If present, label will have a close button.\"\n        },\n        {\n          \"name\": \"onEditCancel\",\n          \"type\": \"(previousText: string) => void\",\n          \"description\": \"Callback when an editable label cancels an edit.\",\n          \"beta\": true\n        },\n        {\n          \"name\": \"onEditComplete\",\n          \"type\": \"(newText: string) => void\",\n          \"description\": \"Callback when an editable label completes an edit.\",\n          \"beta\": true\n        },\n        {\n          \"name\": \"render\",\n          \"type\": \"({\\n  className,\\n  content,\\n  componentRef\\n}: {\\n  className: string;\\n  content: React.ReactNode;\\n  componentRef: any;\\n}) => React.ReactNode\",\n          \"description\": \"Forwards the label content and className to rendered function.  Use this prop for react router support.\"\n        },\n        {\n          \"name\": \"tooltipPosition\",\n          \"type\": \"| TooltipPosition\\n| 'auto'\\n| 'top'\\n| 'bottom'\\n| 'left'\\n| 'right'\\n| 'top-start'\\n| 'top-end'\\n| 'bottom-start'\\n| 'bottom-end'\\n| 'left-start'\\n| 'left-end'\\n| 'right-start'\\n| 'right-end'\",\n          \"description\": \"Position of the tooltip which is displayed if text is truncated\"\n        },\n        {\n          \"name\": \"variant\",\n          \"type\": \"'outline' | 'filled'\",\n          \"description\": \"Variant of the label.\",\n          \"defaultValue\": \"'filled'\"\n        }\n      ]\n    }\n  ],\n  \"cssPrefix\": [\n    \"pf-c-label\"\n  ],\n  \"examples\": [\n    \"Filled\",\n    \"Outline\",\n    \"Compact\",\n    \"Router link\",\n    \"Editable\"\n  ]\n};\npageData.liveContext = {\n  InfoCircleIcon,\n  Link\n};\npageData.examples = {\n  'Filled': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Filled = () => (\\n  <React.Fragment>\\n    <Label>Grey</Label> <Label icon={<InfoCircleIcon />}>Grey icon</Label>{' '}\\n    <Label onClose={Function.prototype}>Grey removable</Label>{' '}\\n    <Label icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Grey icon removable\\n    </Label>{' '}\\n    <Label href=\\\"#filled\\\">Grey link</Label>{' '}\\n    <Label href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Grey link removable\\n    </Label>\\n    <Label icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Grey label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"blue\\\">Blue</Label>{' '}\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />}>\\n      Blue icon\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" onClose={Function.prototype}>\\n      Blue removable\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Blue icon removable\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" href=\\\"#filled\\\">\\n      Blue link\\n    </Label>{' '}\\n    <Label color=\\\"blue\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Blue link removable\\n    </Label>\\n    <Label color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Blue label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"green\\\">Green</Label>{' '}\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />}>\\n      Green icon\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" onClose={Function.prototype}>\\n      Green removable\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Green icon removable\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" href=\\\"#filled\\\">\\n      Green link\\n    </Label>{' '}\\n    <Label color=\\\"green\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Green link removable\\n    </Label>\\n    <Label color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Green label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"orange\\\">Orange</Label>{' '}\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />}>\\n      Orange icon\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" onClose={Function.prototype}>\\n      Orange removable\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Orange icon removable\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" href=\\\"#filled\\\">\\n      Orange link\\n    </Label>{' '}\\n    <Label color=\\\"orange\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Orange link removable\\n    </Label>\\n    <Label color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Orange label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"red\\\">Red</Label>{' '}\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />}>\\n      Red icon\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" onClose={Function.prototype}>\\n      Red removable\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Red icon removable\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" href=\\\"#filled\\\">\\n      Red link\\n    </Label>{' '}\\n    <Label color=\\\"red\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Red link removable\\n    </Label>\\n    <Label color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Red label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"purple\\\">Purple</Label>{' '}\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />}>\\n      Purple icon\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" onClose={Function.prototype}>\\n      Purple removable\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Purple icon removable\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" href=\\\"#filled\\\">\\n      Purple link\\n    </Label>{' '}\\n    <Label color=\\\"purple\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Purple link removable\\n    </Label>\\n    <Label color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Purple label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label color=\\\"cyan\\\">Cyan</Label>{' '}\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />}>\\n      Cyan icon\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" onClose={Function.prototype}>\\n      Cyan removable\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Cyan icon removable\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" href=\\\"#filled\\\">\\n      Cyan link\\n    </Label>{' '}\\n    <Label color=\\\"cyan\\\" href=\\\"#filled\\\" onClose={Function.prototype}>\\n      Cyan link removable\\n    </Label>\\n    <Label color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Cyan label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\"title\":\"Filled\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Outline': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Outline = () => (\\n  <React.Fragment>\\n    <Label variant=\\\"outline\\\">Grey</Label>{' '}\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />}>\\n      Grey icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" onClose={Function.prototype}>\\n      Grey removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Grey icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" href=\\\"#outline\\\">\\n      Grey link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Grey link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Grey label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\">\\n      Blue\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />}>\\n      Blue icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" onClose={Function.prototype}>\\n      Blue removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Blue icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" href=\\\"#outline\\\">\\n      Blue link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Blue link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"blue\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Blue label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\">\\n      Green\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />}>\\n      Green icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" onClose={Function.prototype}>\\n      Green removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Green icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" href=\\\"#outline\\\">\\n      Green link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Green link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"green\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Green label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\">\\n      Orange\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />}>\\n      Orange icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" onClose={Function.prototype}>\\n      Orange removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Orange icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" href=\\\"#outline\\\">\\n      Orange link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Orange link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"orange\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Orange label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\">\\n      Red\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />}>\\n      Red icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" onClose={Function.prototype}>\\n      Red removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Red icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" href=\\\"#outline\\\">\\n      Red link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Red link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"red\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Red label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\">\\n      Purple\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />}>\\n      Purple icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" onClose={Function.prototype}>\\n      Purple removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Purple icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" href=\\\"#outline\\\">\\n      Purple link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Purple link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"purple\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Purple label with icon that overflows\\n    </Label>\\n    <br />\\n    <br />\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\">\\n      Cyan\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />}>\\n      Cyan icon\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" onClose={Function.prototype}>\\n      Cyan removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Cyan icon removable\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" href=\\\"#outline\\\">\\n      Cyan link\\n    </Label>{' '}\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Cyan link removable\\n    </Label>\\n    <Label variant=\\\"outline\\\" color=\\\"cyan\\\" icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Cyan label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\"title\":\"Outline\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Compact': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\n\\nconst Compact = () => (\\n  <React.Fragment>\\n    <Label isCompact>Grey</Label>{' '}\\n    <Label isCompact icon={<InfoCircleIcon />}>\\n      Compact icon\\n    </Label>{' '}\\n    <Label isCompact onClose={Function.prototype}>\\n      Compact removable\\n    </Label>{' '}\\n    <Label isCompact icon={<InfoCircleIcon />} onClose={Function.prototype}>\\n      Compact icon removable\\n    </Label>{' '}\\n    <Label isCompact href=\\\"#outline\\\">\\n      Compact link\\n    </Label>{' '}\\n    <Label isCompact href=\\\"#outline\\\" onClose={Function.prototype}>\\n      Compact link removable\\n    </Label>\\n    <Label isCompact icon={<InfoCircleIcon />} onClose={Function.prototype} isTruncated>\\n      Compact label with icon that overflows\\n    </Label>\\n  </React.Fragment>\\n)\",\"title\":\"Compact\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Router link': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\nimport InfoCircleIcon from '@patternfly/react-icons/dist/esm/icons/info-circle-icon';\\nimport { Link } from '@reach/router';\\n\\nconst RouterLink = () => (\\n  <Label\\n    color=\\\"blue\\\"\\n    icon={<InfoCircleIcon />}\\n    onClose={Function.prototype}\\n    isTruncated\\n    render={({ className, content, componentRef }) => (\\n      <Link to=\\\"/\\\" className={className} innerRef={componentRef}>\\n        {content}\\n      </Link>\\n    )}\\n  >\\n    Blue label router link with icon that overflows\\n  </Label>\\n)\",\"title\":\"Router link\",\"lang\":\"js\"}}>\n      \n    </Example>,\n  'Editable': props => \n    <Example {...pageData} {...props} {...{\"code\":\"import React from 'react';\\nimport { Label } from '@patternfly/react-core';\\n\\nexport const LabelEditable: React.FunctionComponent = () => {\\n  const [labelText, setLabelText] = React.useState('Editable label');\\n  const [compactLabelText, setCompactLabelText] = React.useState('Compact editable label');\\n\\n  const onEditCancel = (prevText: string) => {\\n    setLabelText(prevText);\\n  };\\n\\n  const onEditComplete = (text: string) => {\\n    setLabelText(text);\\n  };\\n\\n  const onCompactEditCancel = (prevText: string) => {\\n    setCompactLabelText(prevText);\\n  };\\n\\n  const onCompactEditComplete = (text: string) => {\\n    setCompactLabelText(text);\\n  };\\n\\n  return (\\n    <React.Fragment>\\n      <Label\\n        color=\\\"blue\\\"\\n        onClose={() => {}}\\n        closeBtnAriaLabel=\\\"Custom close button for editable label\\\"\\n        onEditCancel={onEditCancel}\\n        onEditComplete={onEditComplete}\\n        isEditable\\n        editableProps={{\\n          'aria-label': 'Editable text',\\n          id: 'editable-label'\\n        }}\\n      >\\n        {labelText}\\n      </Label>\\n      <Label\\n        color=\\\"grey\\\"\\n        isCompact\\n        onClose={() => {}}\\n        closeBtnAriaLabel=\\\"Custom close button for compact editable label\\\"\\n        onEditCancel={onCompactEditCancel}\\n        onEditComplete={onCompactEditComplete}\\n        isEditable\\n        editableProps={{\\n          'aria-label': 'Compact editable text',\\n          id: 'compact-editable-label'\\n        }}\\n      >\\n        {compactLabelText}\\n      </Label>\\n    </React.Fragment>\\n  );\\n};\\n\",\"title\":\"Editable\",\"lang\":\"js\",\"isBeta\":true}}>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`Click or press either enter or space to begin editing a label. After editing, click outside the label or press enter again to complete the edit. To cancel an edit, press escape.`}\n      </p>\n      \n      <p {...{\"className\":\"ws-p\"}}>\n        {`You can also customize any Label's close button aria-label as this example shows with `}\n        \n        <code {...{\"className\":\"ws-code\"}}>\n          {`closeBtnAriaLabel`}\n        </code>\n        {`.`}\n      </p>\n    </Example>\n};\n\nconst Component = () => (\n  <React.Fragment>\n    <AutoLinkHeader {...{\"id\":\"examples\",\"size\":\"h2\",\"className\":\"ws-title ws-h2\"}}>\n      {`Examples`}\n    </AutoLinkHeader>\n    {React.createElement(pageData.examples[\"Filled\"])}\n    {React.createElement(pageData.examples[\"Outline\"])}\n    {React.createElement(pageData.examples[\"Compact\"])}\n    {React.createElement(pageData.examples[\"Router link\"])}\n    {React.createElement(pageData.examples[\"Editable\"])}\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsLabelReactDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}