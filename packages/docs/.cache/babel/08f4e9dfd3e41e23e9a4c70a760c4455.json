{"ast":null,"code":"import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\nvar pageData = {\n  \"id\": \"Calendar month\",\n  \"section\": \"components\",\n  \"source\": \"accessibility\",\n  \"slug\": \"/components/calendar-month/accessibility\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/src/content/accessibility/calendar-month/calendar-month.md\"\n};\npageData.examples = {};\n\nvar Component = function Component() {\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"A \", /*#__PURE__*/React.createElement(\"strong\", null, \"calendar month\"), \" is a box area or text that communicates and triggers user actions when clicked or selected. Calendar months are interactive elements.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Keyboard users\"), \" should be able to focus on parts of the calendar month using \", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab\"), \" to move forward and \", /*#__PURE__*/React.createElement(\"strong\", null, \"Tab + Shift\"), \" to move backward through interactive elements. They should be able to select a focused component, such as a month on the date selection menu, using \", /*#__PURE__*/React.createElement(\"strong\", null, \"Space\"), \" or \", /*#__PURE__*/React.createElement(\"strong\", null, \"Enter\"), \". They should also be able to use \", /*#__PURE__*/React.createElement(\"strong\", null, \"Arrow Keys\"), \" to navigate through the calendar to select a date.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, /*#__PURE__*/React.createElement(\"strong\", null, \"Screen reader users\"), \" should be able to navigate to the calendar month and it should be able to be described by a screen reader. Since a calendar month is interactive, screen readers must announce the different interactive elements of the component. For example, in the dropdown menus to select a month, screen readers must announce the month that the user is on, and within the calendar screen readers must announce the date the user is on.\"), /*#__PURE__*/React.createElement(\"p\", {\n    \"className\": \"ws-p\"\n  }, \"The following props/attributes have been added for you or are customizable in PatternFly:\"), /*#__PURE__*/React.createElement(\"table\", {\n    \"className\": \"ws-table pf-c-table pf-m-grid-lg pf-m-compact\",\n    \"role\": \"grid\"\n  }, /*#__PURE__*/React.createElement(\"thead\", null, /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"React prop\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"React component it should be applied to\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Which HTML element it appears on in markup\")), /*#__PURE__*/React.createElement(\"th\", {\n    \"className\": \" pf-m-wrap\",\n    \"role\": \"columnheader\",\n    \"scope\": \"col\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Reason used\")))), /*#__PURE__*/React.createElement(\"tbody\", {\n    \"role\": \"rowgroup\"\n  }, /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"cellAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CalendarMonth, CalendarFormat\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-calendar-month__date\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the date cells. Unlike most of our AriaLabel props, cellAriaLabel expects a function which takes a Date object as a parameter and returns a string.\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"nextMonthAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CalendarMonth, CalendarFormat\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-calendar-month__header-nav-control\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the next month button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"prevMonthAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CalendarMonth, CalendarFormat\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, /*#__PURE__*/React.createElement(\"code\", {\n    \"className\": \"ws-code\"\n  }, \".pf-c-calendar-month__header-nav-control\"))), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the previous month button\"))), /*#__PURE__*/React.createElement(\"tr\", {\n    \"role\": \"row\"\n  }, /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React prop\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"yearInputAriaLabel\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"React component it should be applied to\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"CalendarMonth, CalendarFormat\")), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Which HTML element it appears on in markup\"\n  }, /*#__PURE__*/React.createElement(\"div\", null)), /*#__PURE__*/React.createElement(\"td\", {\n    \"role\": \"cell\",\n    \"data-label\": \"Reason used\"\n  }, /*#__PURE__*/React.createElement(\"div\", null, \"Aria-label for the year input\"))))));\n};\n\nComponent.displayName = 'ComponentsCalendarMonthAccessibilityDocs';\nComponent.pageData = pageData;\nexport default Component;","map":{"version":3,"names":["React","AutoLinkHeader","Example","Link","PatternflyThemeLink","pageData","examples","Component","displayName"],"sources":["/Users/jschuler/Code/patternfly-quickstarts/packages/docs/src/generated/components/calendar-month/accessibility.js"],"sourcesContent":["import React from 'react';\nimport { AutoLinkHeader, Example, Link as PatternflyThemeLink } from 'theme-patternfly-org/components';\n\nconst pageData = {\n  \"id\": \"Calendar month\",\n  \"section\": \"components\",\n  \"source\": \"accessibility\",\n  \"slug\": \"/components/calendar-month/accessibility\",\n  \"sourceLink\": \"https://github.com/patternfly/patternfly-org/blob/main/packages/docs/src/content/accessibility/calendar-month/calendar-month.md\"\n};\npageData.examples = {\n  \n};\n\nconst Component = () => (\n  <React.Fragment>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`A `}\n      <strong>\n        {`calendar month`}\n      </strong>\n      {` is a box area or text that communicates and triggers user actions when clicked or selected. Calendar months are interactive elements.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      <strong>\n        {`Keyboard users`}\n      </strong>\n      {` should be able to focus on parts of the calendar month using `}\n      <strong>\n        {`Tab`}\n      </strong>\n      {` to move forward and `}\n      <strong>\n        {`Tab + Shift`}\n      </strong>\n      {` to move backward through interactive elements. They should be able to select a focused component, such as a month on the date selection menu, using `}\n      <strong>\n        {`Space`}\n      </strong>\n      {` or `}\n      <strong>\n        {`Enter`}\n      </strong>\n      {`. They should also be able to use `}\n      <strong>\n        {`Arrow Keys`}\n      </strong>\n      {` to navigate through the calendar to select a date.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      <strong>\n        {`Screen reader users`}\n      </strong>\n      {` should be able to navigate to the calendar month and it should be able to be described by a screen reader. Since a calendar month is interactive, screen readers must announce the different interactive elements of the component. For example, in the dropdown menus to select a month, screen readers must announce the month that the user is on, and within the calendar screen readers must announce the date the user is on.`}\n    </p>\n    <p {...{\"className\":\"ws-p\"}}>\n      {`The following props/attributes have been added for you or are customizable in PatternFly:`}\n    </p>\n    <table {...{\"className\":\"ws-table pf-c-table pf-m-grid-lg pf-m-compact\",\"role\":\"grid\"}}>\n      <thead>\n        <tr {...{\"role\":\"row\"}}>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`React prop`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`React component it should be applied to`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`Which HTML element it appears on in markup`}\n            </div>\n          </th>\n          <th {...{\"className\":\" pf-m-wrap\",\"role\":\"columnheader\",\"scope\":\"col\"}}>\n            <div>\n              {`Reason used`}\n            </div>\n          </th>\n        </tr>\n      </thead>\n      <tbody {...{\"role\":\"rowgroup\"}}>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`cellAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CalendarMonth, CalendarFormat`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-calendar-month__date`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the date cells. Unlike most of our AriaLabel props, cellAriaLabel expects a function which takes a Date object as a parameter and returns a string.`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`nextMonthAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CalendarMonth, CalendarFormat`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-calendar-month__header-nav-control`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the next month button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`prevMonthAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CalendarMonth, CalendarFormat`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n              <code {...{\"className\":\"ws-code\"}}>\n                {`.pf-c-calendar-month__header-nav-control`}\n              </code>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the previous month button`}\n            </div>\n          </td>\n        </tr>\n        <tr {...{\"role\":\"row\"}}>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React prop\"}}>\n            <div>\n              {`yearInputAriaLabel`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"React component it should be applied to\"}}>\n            <div>\n              {`CalendarMonth, CalendarFormat`}\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Which HTML element it appears on in markup\"}}>\n            <div>\n            </div>\n          </td>\n          <td {...{\"role\":\"cell\",\"data-label\":\"Reason used\"}}>\n            <div>\n              {`Aria-label for the year input`}\n            </div>\n          </td>\n        </tr>\n      </tbody>\n    </table>\n  </React.Fragment>\n);\nComponent.displayName = 'ComponentsCalendarMonthAccessibilityDocs';\nComponent.pageData = pageData;\n\nexport default Component;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}